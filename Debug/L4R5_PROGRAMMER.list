
L4R5_PROGRAMMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c38  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08005df8  08005df8  00015df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006268  08006268  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006270  08006270  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000068  080062e0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080062e0  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb94  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023fd  00000000  00000000  0002ec6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  00031070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000901  00000000  00000000  00031c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a959  00000000  00000000  00032541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001014b  00000000  00000000  0005ce9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff581  00000000  00000000  0006cfe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003708  00000000  00000000  0016c568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0016fc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000068 	.word	0x20000068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005de0 	.word	0x08005de0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	08005de0 	.word	0x08005de0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <stm32_enter_boot_mode>:
 * 	   			using the selected serial interface as the interface.
 * @param huart UART handle.
 * @retval 		stm32_err_t
 */
stm32_err_t stm32_enter_boot_mode(UART_HandleTypeDef *huart)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	/* Register UART Handler in huart_handle variable */
	huart_handle = huart;
 80005a4:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <stm32_enter_boot_mode+0x54>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6013      	str	r3, [r2, #0]

	/* Print debug message */
	printf("Enter in Boot mode: begin\r\n");
 80005aa:	4812      	ldr	r0, [pc, #72]	; (80005f4 <stm32_enter_boot_mode+0x58>)
 80005ac:	f004 fe26 	bl	80051fc <puts>

	/* Set the MCU in Boot Mode */

	/* Set NRST Control pin LOW to Reset Target */
	stm32_nrst_low();
 80005b0:	2200      	movs	r2, #0
 80005b2:	2110      	movs	r1, #16
 80005b4:	4810      	ldr	r0, [pc, #64]	; (80005f8 <stm32_enter_boot_mode+0x5c>)
 80005b6:	f001 fedd 	bl	8002374 <HAL_GPIO_WritePin>

	/* Set BOOT Control Pin High to initialize Target in BOOT Mode */
	stm32_boot_high();
 80005ba:	2201      	movs	r2, #1
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <stm32_enter_boot_mode+0x5c>)
 80005c0:	f001 fed8 	bl	8002374 <HAL_GPIO_WritePin>

	/* 20ms Delay */
	stm32_delay(20);
 80005c4:	2014      	movs	r0, #20
 80005c6:	f001 fbb9 	bl	8001d3c <HAL_Delay>

	/* Set NRST Control pin HIGH to wake up Target */
	stm32_nrst_high();
 80005ca:	2201      	movs	r2, #1
 80005cc:	2110      	movs	r1, #16
 80005ce:	480a      	ldr	r0, [pc, #40]	; (80005f8 <stm32_enter_boot_mode+0x5c>)
 80005d0:	f001 fed0 	bl	8002374 <HAL_GPIO_WritePin>

	/* 100ms Delay */
	stm32_delay(100);
 80005d4:	2064      	movs	r0, #100	; 0x64
 80005d6:	f001 fbb1 	bl	8001d3c <HAL_Delay>

	/* Send Bootloader entry code sequence 0x7F */
	/* Returns Status returned from stm32_send_init_seq Function */
	return stm32_send_init_seq(huart_handle);
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <stm32_enter_boot_mode+0x54>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fd52 	bl	8001088 <stm32_send_init_seq>
 80005e4:	4603      	mov	r3, r0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000084 	.word	0x20000084
 80005f4:	08005df8 	.word	0x08005df8
 80005f8:	48000c00 	.word	0x48000c00

080005fc <stm32_init>:
 * @param huart  UART handle.
 * @param stm    stm32_cmd.
 * @retval 	     stm32_err_t
 */
stm32_err_t stm32_init(UART_HandleTypeDef *huart,stm32_cmd *stm)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b0c6      	sub	sp, #280	; 0x118
 8000600:	af00      	add	r7, sp, #0
 8000602:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000606:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800060a:	6018      	str	r0, [r3, #0]
 800060c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000610:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000614:	6019      	str	r1, [r3, #0]
	/* Local Variables */
	uint8_t len, val, buf[257];
	int i, new_cmds;

	/* Register UART Handler in huart_handle variable */
	huart_handle = huart;
 8000616:	4ad6      	ldr	r2, [pc, #856]	; (8000970 <stm32_init+0x374>)
 8000618:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800061c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6013      	str	r3, [r2, #0]

	/* Initialize the STM32 Target in boot mode */
	stm32_enter_boot_mode(huart_handle);
 8000624:	4bd2      	ldr	r3, [pc, #840]	; (8000970 <stm32_init+0x374>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffb7 	bl	800059c <stm32_enter_boot_mode>

	/* Number of bytes in the reply */
	len = STM32_CMD_GET_LENGTH;
 800062e:	2311      	movs	r3, #17
 8000630:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	/* Get Command Function to get the Target Bootloader Version and its Supported Commands   */
	/* Check returned Status: In case of Status different than "OK", returns Status "Unknown" */
	if (stm32_guess_len_cmd(huart_handle, GET_CMD_COMMAND, buf, len) != STM32_ERR_OK)
 8000634:	4bce      	ldr	r3, [pc, #824]	; (8000970 <stm32_init+0x374>)
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800063c:	f107 020c 	add.w	r2, r7, #12
 8000640:	2100      	movs	r1, #0
 8000642:	f000 fa89 	bl	8000b58 <stm32_guess_len_cmd>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <stm32_init+0x54>
		return STM32_ERR_UNKNOWN;
 800064c:	2301      	movs	r3, #1
 800064e:	e271      	b.n	8000b34 <stm32_init+0x538>

	/* Registers Byte 2: Number of bytes received + 1 */
	len = buf[0] + 1;
 8000650:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000654:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	/* Registers Byte 3: Bootloader Version received */
	stm->bl_version = buf[1];
 8000660:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000664:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000668:	785a      	ldrb	r2, [r3, #1]
 800066a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800066e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	745a      	strb	r2, [r3, #17]

	/* Local variable */
	new_cmds = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	/* Loop through the data received starting from buf[2] */
	for (i = 1; i < len; i++) {
 800067c:	2301      	movs	r3, #1
 800067e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000682:	e15b      	b.n	800093c <stm32_init+0x340>

		val = buf[i + 1];
 8000684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000688:	3301      	adds	r3, #1
 800068a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800068e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000692:	5cd3      	ldrb	r3, [r2, r3]
 8000694:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

		switch (val) {
 8000698:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800069c:	2ba1      	cmp	r3, #161	; 0xa1
 800069e:	f000 812b 	beq.w	80008f8 <stm32_init+0x2fc>
 80006a2:	2ba1      	cmp	r3, #161	; 0xa1
 80006a4:	f300 8131 	bgt.w	800090a <stm32_init+0x30e>
 80006a8:	2b92      	cmp	r3, #146	; 0x92
 80006aa:	f000 811c 	beq.w	80008e6 <stm32_init+0x2ea>
 80006ae:	2b92      	cmp	r3, #146	; 0x92
 80006b0:	f300 812b 	bgt.w	800090a <stm32_init+0x30e>
 80006b4:	2b82      	cmp	r3, #130	; 0x82
 80006b6:	f000 810d 	beq.w	80008d4 <stm32_init+0x2d8>
 80006ba:	2b82      	cmp	r3, #130	; 0x82
 80006bc:	f300 8125 	bgt.w	800090a <stm32_init+0x30e>
 80006c0:	2b73      	cmp	r3, #115	; 0x73
 80006c2:	f000 80fe 	beq.w	80008c2 <stm32_init+0x2c6>
 80006c6:	2b73      	cmp	r3, #115	; 0x73
 80006c8:	f300 811f 	bgt.w	800090a <stm32_init+0x30e>
 80006cc:	2b63      	cmp	r3, #99	; 0x63
 80006ce:	f300 811c 	bgt.w	800090a <stm32_init+0x30e>
 80006d2:	2b43      	cmp	r3, #67	; 0x43
 80006d4:	da05      	bge.n	80006e2 <stm32_init+0xe6>
 80006d6:	2b21      	cmp	r3, #33	; 0x21
 80006d8:	f300 8096 	bgt.w	8000808 <stm32_init+0x20c>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	da49      	bge.n	8000774 <stm32_init+0x178>
 80006e0:	e113      	b.n	800090a <stm32_init+0x30e>
 80006e2:	3b43      	subs	r3, #67	; 0x43
 80006e4:	2b20      	cmp	r3, #32
 80006e6:	f200 8110 	bhi.w	800090a <stm32_init+0x30e>
 80006ea:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <stm32_init+0xf4>)
 80006ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f0:	0800087b 	.word	0x0800087b
 80006f4:	0800087b 	.word	0x0800087b
 80006f8:	0800090b 	.word	0x0800090b
 80006fc:	0800090b 	.word	0x0800090b
 8000700:	0800090b 	.word	0x0800090b
 8000704:	0800090b 	.word	0x0800090b
 8000708:	0800090b 	.word	0x0800090b
 800070c:	0800090b 	.word	0x0800090b
 8000710:	0800090b 	.word	0x0800090b
 8000714:	0800090b 	.word	0x0800090b
 8000718:	0800090b 	.word	0x0800090b
 800071c:	0800090b 	.word	0x0800090b
 8000720:	0800090b 	.word	0x0800090b
 8000724:	0800088d 	.word	0x0800088d
 8000728:	0800089f 	.word	0x0800089f
 800072c:	0800090b 	.word	0x0800090b
 8000730:	0800090b 	.word	0x0800090b
 8000734:	0800090b 	.word	0x0800090b
 8000738:	0800090b 	.word	0x0800090b
 800073c:	0800090b 	.word	0x0800090b
 8000740:	0800090b 	.word	0x0800090b
 8000744:	0800090b 	.word	0x0800090b
 8000748:	0800090b 	.word	0x0800090b
 800074c:	0800090b 	.word	0x0800090b
 8000750:	0800090b 	.word	0x0800090b
 8000754:	0800090b 	.word	0x0800090b
 8000758:	0800090b 	.word	0x0800090b
 800075c:	0800090b 	.word	0x0800090b
 8000760:	0800090b 	.word	0x0800090b
 8000764:	0800090b 	.word	0x0800090b
 8000768:	0800090b 	.word	0x0800090b
 800076c:	0800090b 	.word	0x0800090b
 8000770:	080008b1 	.word	0x080008b1
 8000774:	2b21      	cmp	r3, #33	; 0x21
 8000776:	f200 80c8 	bhi.w	800090a <stm32_init+0x30e>
 800077a:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <stm32_init+0x184>)
 800077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000780:	0800080f 	.word	0x0800080f
 8000784:	08000821 	.word	0x08000821
 8000788:	08000833 	.word	0x08000833
 800078c:	0800090b 	.word	0x0800090b
 8000790:	0800090b 	.word	0x0800090b
 8000794:	0800090b 	.word	0x0800090b
 8000798:	0800090b 	.word	0x0800090b
 800079c:	0800090b 	.word	0x0800090b
 80007a0:	0800090b 	.word	0x0800090b
 80007a4:	0800090b 	.word	0x0800090b
 80007a8:	0800090b 	.word	0x0800090b
 80007ac:	0800090b 	.word	0x0800090b
 80007b0:	0800090b 	.word	0x0800090b
 80007b4:	0800090b 	.word	0x0800090b
 80007b8:	0800090b 	.word	0x0800090b
 80007bc:	0800090b 	.word	0x0800090b
 80007c0:	0800090b 	.word	0x0800090b
 80007c4:	08000845 	.word	0x08000845
 80007c8:	0800090b 	.word	0x0800090b
 80007cc:	0800090b 	.word	0x0800090b
 80007d0:	0800090b 	.word	0x0800090b
 80007d4:	0800090b 	.word	0x0800090b
 80007d8:	0800090b 	.word	0x0800090b
 80007dc:	0800090b 	.word	0x0800090b
 80007e0:	0800090b 	.word	0x0800090b
 80007e4:	0800090b 	.word	0x0800090b
 80007e8:	0800090b 	.word	0x0800090b
 80007ec:	0800090b 	.word	0x0800090b
 80007f0:	0800090b 	.word	0x0800090b
 80007f4:	0800090b 	.word	0x0800090b
 80007f8:	0800090b 	.word	0x0800090b
 80007fc:	0800090b 	.word	0x0800090b
 8000800:	0800090b 	.word	0x0800090b
 8000804:	08000857 	.word	0x08000857
 8000808:	2b31      	cmp	r3, #49	; 0x31
 800080a:	d02d      	beq.n	8000868 <stm32_init+0x26c>
 800080c:	e07d      	b.n	800090a <stm32_init+0x30e>
		case GET_CMD_COMMAND:
			stm->get = val; break;
 800080e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000812:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e088      	b.n	8000932 <stm32_init+0x336>

		case GET_VER_COMMAND:
			stm->gvr = val; break;
 8000820:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000824:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800082e:	705a      	strb	r2, [r3, #1]
 8000830:	e07f      	b.n	8000932 <stm32_init+0x336>

		case GET_ID_COMMAND:
			stm->gid = val; break;
 8000832:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000836:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8000840:	709a      	strb	r2, [r3, #2]
 8000842:	e076      	b.n	8000932 <stm32_init+0x336>

		case RMEM_COMMAND:
			stm->rm = val; break;
 8000844:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000848:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8000852:	70da      	strb	r2, [r3, #3]
 8000854:	e06d      	b.n	8000932 <stm32_init+0x336>

		case GO_COMMAND:
			stm->go = val; break;
 8000856:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800085a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8000864:	711a      	strb	r2, [r3, #4]
 8000866:	e064      	b.n	8000932 <stm32_init+0x336>

		case WMEM_COMMAND:
			stm->wm = val;	break;
 8000868:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800086c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8000876:	715a      	strb	r2, [r3, #5]
 8000878:	e05b      	b.n	8000932 <stm32_init+0x336>

		case EMEM_COMMAND:
		case EX_EMEM_COMMAND:
			stm->er = val; break;
 800087a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800087e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8000888:	719a      	strb	r2, [r3, #6]
 800088a:	e052      	b.n	8000932 <stm32_init+0x336>

		case SPECIAL_CMD_COMMAND:
			stm->sp = val; break;
 800088c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000890:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800089a:	71da      	strb	r2, [r3, #7]
 800089c:	e049      	b.n	8000932 <stm32_init+0x336>

		case EX_SPECIAL_CMD_COMMAND:
			stm->xsp = val; break;
 800089e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80008ac:	721a      	strb	r2, [r3, #8]
 80008ae:	e040      	b.n	8000932 <stm32_init+0x336>

		case WP_COMMAND:
			stm->wp = val; break;
 80008b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80008be:	725a      	strb	r2, [r3, #9]
 80008c0:	e037      	b.n	8000932 <stm32_init+0x336>

		case WU_COMMAND:
			stm->uw = val;	break;
 80008c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008c6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80008d0:	729a      	strb	r2, [r3, #10]
 80008d2:	e02e      	b.n	8000932 <stm32_init+0x336>

		case RP_COMMAND:
			stm->rp = val;	break;
 80008d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80008e2:	72da      	strb	r2, [r3, #11]
 80008e4:	e025      	b.n	8000932 <stm32_init+0x336>

		case RU_COMMAND:
			stm->ur = val;	break;
 80008e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80008f4:	731a      	strb	r2, [r3, #12]
 80008f6:	e01c      	b.n	8000932 <stm32_init+0x336>
		case GET_CKSUM_COMMAND:
			stm->crc = val; break;
 80008f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8000906:	735a      	strb	r2, [r3, #13]
 8000908:	e013      	b.n	8000932 <stm32_init+0x336>

		default:
			/* In case of a different command other than the mapped ones */
			/* Check if this is the first time the if statement is being executed by incrementing new_cmds and comparing it to 0 */
			if (new_cmds++ == 0)
 800090a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8000914:	2b00      	cmp	r3, #0
 8000916:	d106      	bne.n	8000926 <stm32_init+0x32a>
				/* Print debug message with the first unknown command */
				printf("GET returns unknown commands (0x%2x", val);
 8000918:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800091c:	4619      	mov	r1, r3
 800091e:	4815      	ldr	r0, [pc, #84]	; (8000974 <stm32_init+0x378>)
 8000920:	f004 fbfe 	bl	8005120 <iprintf>
 8000924:	e005      	b.n	8000932 <stm32_init+0x336>
			else
				/* If this is not the first time the if statement is being executed, continues to print the following unknown commands */
				printf(", 0x%2x", val);
 8000926:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800092a:	4619      	mov	r1, r3
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <stm32_init+0x37c>)
 800092e:	f004 fbf7 	bl	8005120 <iprintf>
	for (i = 1; i < len; i++) {
 8000932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000936:	3301      	adds	r3, #1
 8000938:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800093c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000940:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000944:	429a      	cmp	r2, r3
 8000946:	f6ff ae9d 	blt.w	8000684 <stm32_init+0x88>
		}
	}

	/* If new_cmds variable is different than 0 */
		if (new_cmds)
 800094a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800094e:	2b00      	cmp	r3, #0
 8000950:	d002      	beq.n	8000958 <stm32_init+0x35c>
			/* Print debug message to close the parenthesis of the unknown commands printed */
			printf(")\n");
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <stm32_init+0x380>)
 8000954:	f004 fc52 	bl	80051fc <puts>

		/* Receive ACK/NACK byte within a given time */
		/* Check returned Status */
		if (stm32_get_ack_timeout(huart_handle,DEFAULT_TIMEOUT) != STM32_ERR_OK) {
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <stm32_init+0x374>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2164      	movs	r1, #100	; 0x64
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f93c 	bl	8000bdc <stm32_get_ack_timeout>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d00a      	beq.n	8000980 <stm32_init+0x384>
			return STM32_ERR_UNKNOWN;
 800096a:	2301      	movs	r3, #1
 800096c:	e0e2      	b.n	8000b34 <stm32_init+0x538>
 800096e:	bf00      	nop
 8000970:	20000084 	.word	0x20000084
 8000974:	08005e14 	.word	0x08005e14
 8000978:	08005e38 	.word	0x08005e38
 800097c:	08005e40 	.word	0x08005e40
		}

		/* If GET, GET Version or GET ID command values received from Target are not a valid command */
		if (stm->get == NOT_VALID_COMMAND
 8000980:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000984:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2bff      	cmp	r3, #255	; 0xff
 800098e:	d00f      	beq.n	80009b0 <stm32_init+0x3b4>
				|| stm->gvr == NOT_VALID_COMMAND
 8000990:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000994:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	785b      	ldrb	r3, [r3, #1]
 800099c:	2bff      	cmp	r3, #255	; 0xff
 800099e:	d007      	beq.n	80009b0 <stm32_init+0x3b4>
				|| stm->gid == NOT_VALID_COMMAND) {
 80009a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	789b      	ldrb	r3, [r3, #2]
 80009ac:	2bff      	cmp	r3, #255	; 0xff
 80009ae:	d104      	bne.n	80009ba <stm32_init+0x3be>
			/* Print debug message */
			printf("Error: bootloader did not return correct information from GET command\n");
 80009b0:	4863      	ldr	r0, [pc, #396]	; (8000b40 <stm32_init+0x544>)
 80009b2:	f004 fc23 	bl	80051fc <puts>
			/* Returns Status "Unknown" */
			return STM32_ERR_UNKNOWN;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e0bc      	b.n	8000b34 <stm32_init+0x538>
		 * Bytes 3-4: PID - byte 3 = 0x04, byte 4 = 0xXX
		 * Byte 5	: ACK
		 *
		 * This function will send the GET ID command and check the returned Status
		 * */
		if (stm32_guess_len_cmd(huart_handle, stm->gid, buf, 1) != STM32_ERR_OK) {
 80009ba:	4b62      	ldr	r3, [pc, #392]	; (8000b44 <stm32_init+0x548>)
 80009bc:	6818      	ldr	r0, [r3, #0]
 80009be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	7899      	ldrb	r1, [r3, #2]
 80009ca:	f107 020c 	add.w	r2, r7, #12
 80009ce:	2301      	movs	r3, #1
 80009d0:	f000 f8c2 	bl	8000b58 <stm32_guess_len_cmd>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <stm32_init+0x3e2>
			return STM32_ERR_UNKNOWN;
 80009da:	2301      	movs	r3, #1
 80009dc:	e0aa      	b.n	8000b34 <stm32_init+0x538>
		}

		/* Register the number of bytes received (+1) */
		len = buf[0] + 1;
 80009de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


		/* len MUST be 2 for STM32 devices */
		if (len < 2) {
 80009ee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d807      	bhi.n	8000a06 <stm32_init+0x40a>
			/* Print debug message if len < 2 */
			printf("Only %d bytes sent in the PID, unknown/unsupported device\n", len);
 80009f6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009fa:	4619      	mov	r1, r3
 80009fc:	4852      	ldr	r0, [pc, #328]	; (8000b48 <stm32_init+0x54c>)
 80009fe:	f004 fb8f 	bl	8005120 <iprintf>
			/* Returns Status "Unknown" */
			return STM32_ERR_UNKNOWN;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e096      	b.n	8000b34 <stm32_init+0x538>
		}

		/* As Product ID comes in 2 bytes, this line combines buf[1] and buf[2] values, both 8 bits, into a single 16 bits value */
		/* The PID value is registered */
		stm->pid = (buf[1] << 8) | buf[2];
 8000a06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a0e:	785b      	ldrb	r3, [r3, #1]
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	b21a      	sxth	r2, r3
 8000a14:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a1c:	789b      	ldrb	r3, [r3, #2]
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a2a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	825a      	strh	r2, [r3, #18]

		/* If len > 2, extra bytes are identified */
		if (len > 2) {
 8000a32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d923      	bls.n	8000a82 <stm32_init+0x486>
			/* Print debug message */
			printf("This bootloader returns %d extra bytes in PID:", len);
 8000a3a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4842      	ldr	r0, [pc, #264]	; (8000b4c <stm32_init+0x550>)
 8000a42:	f004 fb6d 	bl	8005120 <iprintf>
			/* For loop to print the values received */
			for (i = 2; i <= len ; i++)
 8000a46:	2302      	movs	r3, #2
 8000a48:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000a4c:	e010      	b.n	8000a70 <stm32_init+0x474>
				printf(" %02x", buf[i]);
 8000a4e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a52:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8000a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a5a:	4413      	add	r3, r2
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	483b      	ldr	r0, [pc, #236]	; (8000b50 <stm32_init+0x554>)
 8000a62:	f004 fb5d 	bl	8005120 <iprintf>
			for (i = 2; i <= len ; i++)
 8000a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000a70:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a74:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dde8      	ble.n	8000a4e <stm32_init+0x452>
			printf("\n");
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	f004 fb61 	bl	8005144 <putchar>
		}
		/* Receives ACK/NACK byte within a given time */
		/* Check returned Status */
		if (stm32_get_ack_timeout(huart_handle,DEFAULT_TIMEOUT) != STM32_ERR_OK) {
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <stm32_init+0x548>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2164      	movs	r1, #100	; 0x64
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f8a7 	bl	8000bdc <stm32_get_ack_timeout>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <stm32_init+0x49c>
			return STM32_ERR_UNKNOWN;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e04d      	b.n	8000b34 <stm32_init+0x538>
		 * version, the read protection and number of times it has been enabled and disabled to the
		 * host
		 *
		 * This function sends GET Version Command and checks the returned Status
		 * */
		if (stm32_send_command_timeout(huart_handle, GET_VER_COMMAND, DEFAULT_TIMEOUT) != STM32_ERR_OK) {
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <stm32_init+0x548>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2264      	movs	r2, #100	; 0x64
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f8cf 	bl	8000c44 <stm32_send_command_timeout>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d004      	beq.n	8000ab6 <stm32_init+0x4ba>
			printf("Error to get version and read protection status\r\n");
 8000aac:	4829      	ldr	r0, [pc, #164]	; (8000b54 <stm32_init+0x558>)
 8000aae:	f004 fba5 	bl	80051fc <puts>
			return STM32_ERR_UNKNOWN;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e03e      	b.n	8000b34 <stm32_init+0x538>
		 * Byte 2: Bootloader version (0 < version <= 255), example: 0x10 = version 1.0
		 * Byte 3: Option byte 1: 0x00 to keep the compatibility with generic bootloader protocol
		 * Byte 4: Option byte 2: 0x00 to keep the compatibility with generic bootloader protocol
		 * Byte 5: ACK
		 * */
		len = 3;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		/* Reads the bytes received over UART and checks the returned Status */
		if( stm32_port_serial_read(huart_handle, buf, len, DEFAULT_TIMEOUT) != HAL_OK)
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <stm32_init+0x548>)
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	f107 010c 	add.w	r1, r7, #12
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	f003 fa15 	bl	8003efa <HAL_UART_Receive>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <stm32_init+0x4de>
			return STM32_ERR_UNKNOWN;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e02c      	b.n	8000b34 <stm32_init+0x538>

		/* Registers Bootloader version */
		stm->version = buf[0];
 8000ada:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ade:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ae8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	739a      	strb	r2, [r3, #14]

		/* Registers Read Protection Status (Option Byte 1 and 2): for legacy compatibility, both bytes are 0 */
		stm->option1 = buf[1];
 8000af0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000af4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000af8:	785a      	ldrb	r2, [r3, #1]
 8000afa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000afe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	73da      	strb	r2, [r3, #15]
		stm->option2 = buf[2];
 8000b06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b0e:	789a      	ldrb	r2, [r3, #2]
 8000b10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	741a      	strb	r2, [r3, #16]

		/* Receives ACK/NACK byte within a given time and checks the returned Status */
		if (stm32_get_ack_timeout(huart_handle,DEFAULT_TIMEOUT) != STM32_ERR_OK) {
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <stm32_init+0x548>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2164      	movs	r1, #100	; 0x64
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f85a 	bl	8000bdc <stm32_get_ack_timeout>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <stm32_init+0x536>
			return STM32_ERR_UNKNOWN;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e000      	b.n	8000b34 <stm32_init+0x538>

		/* Verifies if Product ID returned from Target matches the specified PID */
		if (stm->pid != TARGET_PID);

		/* Returns Status OK */
		return STM32_ERR_OK;
 8000b32:	2300      	movs	r3, #0
	}
 8000b34:	4618      	mov	r0, r3
 8000b36:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	08005e44 	.word	0x08005e44
 8000b44:	20000084 	.word	0x20000084
 8000b48:	08005e8c 	.word	0x08005e8c
 8000b4c:	08005ec8 	.word	0x08005ec8
 8000b50:	08005ef8 	.word	0x08005ef8
 8000b54:	08005f00 	.word	0x08005f00

08000b58 <stm32_guess_len_cmd>:
 * @param len	 Number of bytes in the reply.
 * @retval 	 	 stm32_err_t
 */
stm32_err_t stm32_guess_len_cmd(UART_HandleTypeDef *huart, uint8_t cmd,
		uint8_t *data, unsigned int len)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	460b      	mov	r3, r1
 8000b66:	72fb      	strb	r3, [r7, #11]
	huart_handle = huart;
 8000b68:	4a1b      	ldr	r2, [pc, #108]	; (8000bd8 <stm32_guess_len_cmd+0x80>)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef  p_err;

	/* Send cmd command with a given timeout */
	/* Check returned status */
	if (stm32_send_command_timeout(huart_handle, cmd, DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <stm32_guess_len_cmd+0x80>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	7af9      	ldrb	r1, [r7, #11]
 8000b74:	2264      	movs	r2, #100	; 0x64
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f864 	bl	8000c44 <stm32_send_command_timeout>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <stm32_guess_len_cmd+0x2e>
		return STM32_ERR_UNKNOWN;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e023      	b.n	8000bce <stm32_guess_len_cmd+0x76>

	/* Reads the Number of Bytes to be received and its ACK/NACK byte */
	p_err = stm32_port_serial_read(huart_handle, data, 1, DEFAULT_TIMEOUT);
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <stm32_guess_len_cmd+0x80>)
 8000b88:	6818      	ldr	r0, [r3, #0]
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f003 f9b3 	bl	8003efa <HAL_UART_Receive>
 8000b94:	4603      	mov	r3, r0
 8000b96:	75fb      	strb	r3, [r7, #23]

	/* In case of NACK, returns Status "Unknown" */
	if (p_err != HAL_OK)
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <stm32_guess_len_cmd+0x4a>
		return STM32_ERR_UNKNOWN;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e015      	b.n	8000bce <stm32_guess_len_cmd+0x76>

	/* Registers the Number of Bytes to be received */
	len = data[0];
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	603b      	str	r3, [r7, #0]

	/* Receives Commands Values to follow */
	/* Receives ACK/NACK byte */
	p_err = stm32_port_serial_read(huart_handle, data + 1, len + 1, DEFAULT_TIMEOUT);
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <stm32_guess_len_cmd+0x80>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	1c59      	adds	r1, r3, #1
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	f003 f99e 	bl	8003efa <HAL_UART_Receive>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	75fb      	strb	r3, [r7, #23]

	/* In case of NACK, returns Status "Unknown" */
	if (p_err != HAL_OK)
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <stm32_guess_len_cmd+0x74>
		return STM32_ERR_UNKNOWN;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e000      	b.n	8000bce <stm32_guess_len_cmd+0x76>

	/* In case of ACK, returns Status "OK" */
	return STM32_ERR_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000084 	.word	0x20000084

08000bdc <stm32_get_ack_timeout>:
 * @param huart		UART Handle.
 * @param timeout	Timeout value.
 * @retval			stm32_err_t
 */
stm32_err_t stm32_get_ack_timeout(UART_HandleTypeDef *huart, uint16_t timeout)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	807b      	strh	r3, [r7, #2]
	/* Local Variables */
	uint8_t byte;
	/* Register UART Handler in huart_handle variable */
	huart_handle = huart;
 8000be8:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <stm32_get_ack_timeout+0x5c>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6013      	str	r3, [r2, #0]

	/* Loop until receives an ACK or encounter an error */
	do {
		/* Receives ACK/NACK Byte with a defined Timeout */
		if( stm32_port_serial_read(huart_handle, (uint8_t*)&byte, 1, timeout) == HAL_TIMEOUT)
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <stm32_get_ack_timeout+0x5c>)
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	887b      	ldrh	r3, [r7, #2]
 8000bf4:	f107 010f 	add.w	r1, r7, #15
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f003 f97e 	bl	8003efa <HAL_UART_Receive>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d104      	bne.n	8000c0e <stm32_get_ack_timeout+0x32>
		{
			/* Print a debug message in case of fail to read ACK byte */
			printf( "Failed to read ACK byte\r\n");
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <stm32_get_ack_timeout+0x60>)
 8000c06:	f004 faf9 	bl	80051fc <puts>
			return STM32_ERR_UNKNOWN;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <stm32_get_ack_timeout+0x52>
		}

		if (byte == BL_ACK)
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	2b79      	cmp	r3, #121	; 0x79
 8000c12:	d101      	bne.n	8000c18 <stm32_get_ack_timeout+0x3c>
			return STM32_ERR_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	e00a      	b.n	8000c2e <stm32_get_ack_timeout+0x52>

		else if (byte == BL_NAK)
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2b1f      	cmp	r3, #31
 8000c1c:	d101      	bne.n	8000c22 <stm32_get_ack_timeout+0x46>
			return STM32_ERR_NACK;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e005      	b.n	8000c2e <stm32_get_ack_timeout+0x52>

		/* In case of different byte received, returns Status "Unknown" */
		else {
			/* Prints a debug message of the received byte */
			printf("Got byte 0x%02x instead of ACK\r\n", byte);
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <stm32_get_ack_timeout+0x64>)
 8000c28:	f004 fa7a 	bl	8005120 <iprintf>
			return STM32_ERR_UNKNOWN;
 8000c2c:	2301      	movs	r3, #1
		}
	} while (1);
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000084 	.word	0x20000084
 8000c3c:	08005f34 	.word	0x08005f34
 8000c40:	08005f50 	.word	0x08005f50

08000c44 <stm32_send_command_timeout>:
 * @retval 			stm32_err_t
 */
stm32_err_t stm32_send_command_timeout(UART_HandleTypeDef *huart,
		const uint8_t cmd,
		uint16_t timeout)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
 8000c50:	4613      	mov	r3, r2
 8000c52:	803b      	strh	r3, [r7, #0]
	/* Local Variables */
	huart_handle = huart;
 8000c54:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <stm32_send_command_timeout+0x80>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
	stm32_err_t s_err;
	uint8_t cmd_frame[2];

	/* Sends cmd command */
	cmd_frame[0] = cmd;
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	733b      	strb	r3, [r7, #12]

	/* Sends bitwise XOR of cmd and 0xFF - Simple error-checking mechanism */
	cmd_frame[1] = cmd ^ 0xFF;
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	737b      	strb	r3, [r7, #13]

	/* Flush Anything Previously in the UART */
	stm32_port_serial_flush(huart_handle);
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <stm32_send_command_timeout+0x80>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 fa19 	bl	80040a2 <HAL_UART_Abort>

	/* Sends cmd frame over UART */
	stm32_port_serial_write(huart_handle, cmd_frame, 2U, 1000U);
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <stm32_send_command_timeout+0x80>)
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	f107 010c 	add.w	r1, r7, #12
 8000c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	f003 f8a5 	bl	8003dcc <HAL_UART_Transmit>

	/* Receives ACK/NACK byte within a given time and registers it */
	s_err = stm32_get_ack_timeout(huart_handle, timeout);
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <stm32_send_command_timeout+0x80>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	883a      	ldrh	r2, [r7, #0]
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ffa6 	bl	8000bdc <stm32_get_ack_timeout>
 8000c90:	4603      	mov	r3, r0
 8000c92:	73fb      	strb	r3, [r7, #15]

	/* In case of ACK, returns Status OK */
	if (s_err == STM32_ERR_OK)
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <stm32_send_command_timeout+0x5a>
		return STM32_ERR_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e00e      	b.n	8000cbc <stm32_send_command_timeout+0x78>

	/* Prints debug messages in case of Status different than OK */
	if (s_err == STM32_ERR_NACK)
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d105      	bne.n	8000cb0 <stm32_send_command_timeout+0x6c>
	{
		printf("Got NACK from device on command 0x%02x\r\n", cmd);
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <stm32_send_command_timeout+0x84>)
 8000caa:	f004 fa39 	bl	8005120 <iprintf>
 8000cae:	e004      	b.n	8000cba <stm32_send_command_timeout+0x76>
	}
	else
	{
		printf("Unexpected reply from device on command 0x%02x\r\n", cmd);
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <stm32_send_command_timeout+0x88>)
 8000cb6:	f004 fa33 	bl	8005120 <iprintf>
	}
	return STM32_ERR_UNKNOWN;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000084 	.word	0x20000084
 8000cc8:	08005f74 	.word	0x08005f74
 8000ccc:	08005fa0 	.word	0x08005fa0

08000cd0 <stm32_read_memory>:
 * @param length	Memory length to be read.
 * @retval 			stm32_err_t.
 */
stm32_err_t stm32_read_memory(UART_HandleTypeDef *huart, uint32_t address,
		uint8_t data[], unsigned int len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	603b      	str	r3, [r7, #0]
	/* Local Variables */
	huart_handle = huart;
 8000cde:	4a38      	ldr	r2, [pc, #224]	; (8000dc0 <stm32_read_memory+0xf0>)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6013      	str	r3, [r2, #0]
	uint8_t buf[5];

	/* If len equals to 0, returns Status OK and ends function execution */
	if (!len)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <stm32_read_memory+0x1e>
		return STM32_ERR_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e063      	b.n	8000db6 <stm32_read_memory+0xe6>

	/* If len > 256, prints debug message with the length limit and returns Status Unknown */
	if (len > 256) {
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cf4:	d904      	bls.n	8000d00 <stm32_read_memory+0x30>
		printf("Error: READ length limit at 256 bytes\r\n");
 8000cf6:	4833      	ldr	r0, [pc, #204]	; (8000dc4 <stm32_read_memory+0xf4>)
 8000cf8:	f004 fa80 	bl	80051fc <puts>
		return STM32_ERR_UNKNOWN;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e05a      	b.n	8000db6 <stm32_read_memory+0xe6>
	}

	if (stm32_send_command_timeout(huart_handle, RMEM_COMMAND, DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8000d00:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <stm32_read_memory+0xf0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2264      	movs	r2, #100	; 0x64
 8000d06:	2111      	movs	r1, #17
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff9b 	bl	8000c44 <stm32_send_command_timeout>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <stm32_read_memory+0x48>
		return STM32_ERR_UNKNOWN;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e04e      	b.n	8000db6 <stm32_read_memory+0xe6>

	/* Sends the address to be read */

	/* Byte 3: MSB */
	buf[0] = address >> 24;
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	743b      	strb	r3, [r7, #16]
	/* Byte 4 */
	buf[1] = (address >> 16) & 0xFF;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	0c1b      	lsrs	r3, r3, #16
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	747b      	strb	r3, [r7, #17]
	/* Byte 5 */
	buf[2] = (address >> 8) & 0xFF;
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	0a1b      	lsrs	r3, r3, #8
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	74bb      	strb	r3, [r7, #18]
	/* Byte 6: LSB */
	buf[3] = address & 0xFF;
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	74fb      	strb	r3, [r7, #19]

	/* Performs checksum by performing a bitwise XOR between bytes 3 - 6*/
	buf[4] = buf[0] ^ buf[1] ^ buf[2] ^ buf[3];
 8000d36:	7c3a      	ldrb	r2, [r7, #16]
 8000d38:	7c7b      	ldrb	r3, [r7, #17]
 8000d3a:	4053      	eors	r3, r2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	7cbb      	ldrb	r3, [r7, #18]
 8000d40:	4053      	eors	r3, r2
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	7cfb      	ldrb	r3, [r7, #19]
 8000d46:	4053      	eors	r3, r2
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	753b      	strb	r3, [r7, #20]

	/* Sends the above address over UART and checks the returned Status */
	if (stm32_port_serial_write(huart_handle, buf, 5, DEFAULT_TIMEOUT) != HAL_OK)
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <stm32_read_memory+0xf0>)
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	f107 0110 	add.w	r1, r7, #16
 8000d54:	2364      	movs	r3, #100	; 0x64
 8000d56:	2205      	movs	r2, #5
 8000d58:	f003 f838 	bl	8003dcc <HAL_UART_Transmit>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <stm32_read_memory+0x96>
		return STM32_ERR_UNKNOWN;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e027      	b.n	8000db6 <stm32_read_memory+0xe6>

	/* Receives ACK/NACK byte within a given time and checks the returned Status */
	if (stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <stm32_read_memory+0xf0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2164      	movs	r1, #100	; 0x64
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff35 	bl	8000bdc <stm32_get_ack_timeout>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <stm32_read_memory+0xac>
		return STM32_ERR_UNKNOWN;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e01c      	b.n	8000db6 <stm32_read_memory+0xe6>

	/* Sends the number of bytes to be read - 1 and checks the returned Status */
	if (stm32_send_command_timeout(huart_handle, len - 1,DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <stm32_read_memory+0xf0>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	3b01      	subs	r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2264      	movs	r2, #100	; 0x64
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f7ff ff5a 	bl	8000c44 <stm32_send_command_timeout>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <stm32_read_memory+0xca>
		return STM32_ERR_UNKNOWN;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00d      	b.n	8000db6 <stm32_read_memory+0xe6>

	/* Receives the data over UART and checks the returned Status */
	if( stm32_port_serial_read(huart_handle, data, len, DEFAULT_TIMEOUT) != HAL_OK)
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <stm32_read_memory+0xf0>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	2364      	movs	r3, #100	; 0x64
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	f003 f8a8 	bl	8003efa <HAL_UART_Receive>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <stm32_read_memory+0xe4>
		return STM32_ERR_UNKNOWN;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <stm32_read_memory+0xe6>

	return STM32_ERR_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000084 	.word	0x20000084
 8000dc4:	08005fd4 	.word	0x08005fd4

08000dc8 <stm32_write_memory>:
 * @param length	Memory length to be read.
 * @retval 			stm32_err_t.
 */
stm32_err_t stm32_write_memory(UART_HandleTypeDef *huart, uint32_t address,
		const uint8_t data[], unsigned int len)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b0c9      	sub	sp, #292	; 0x124
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8000dd2:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8000dd6:	6020      	str	r0, [r4, #0]
 8000dd8:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8000ddc:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8000de0:	6001      	str	r1, [r0, #0]
 8000de2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000de6:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8000dea:	600a      	str	r2, [r1, #0]
 8000dec:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000df0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8000df4:	6013      	str	r3, [r2, #0]
	/* Local Variables */
	huart_handle = huart;
 8000df6:	4aa1      	ldr	r2, [pc, #644]	; (800107c <stm32_write_memory+0x2b4>)
 8000df8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000dfc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6013      	str	r3, [r2, #0]
	uint8_t cs, buf[256 + 2];
	unsigned int i, aligned_len;
	stm32_err_t s_err;

	/* If len equals to 0, returns Status OK and ends function execution */
	if (!len)
 8000e04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <stm32_write_memory+0x4e>
		return STM32_ERR_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e12c      	b.n	8001070 <stm32_write_memory+0x2a8>

	/* If len > 256, prints debug message with the length limit and returns Status Unknown */
	if (len > 256) {
 8000e16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e24:	d904      	bls.n	8000e30 <stm32_write_memory+0x68>
		printf("Error: WRITE length limit at 256 bytes\r\n");
 8000e26:	4896      	ldr	r0, [pc, #600]	; (8001080 <stm32_write_memory+0x2b8>)
 8000e28:	f004 f9e8 	bl	80051fc <puts>
		return STM32_ERR_UNKNOWN;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e11f      	b.n	8001070 <stm32_write_memory+0x2a8>
	}

	/* All write operations must be Word-aligned (32bit aligned) */
	/* Checks if address or len are correctly aligned */
	if (address & 0x3 || len & 0x3) {
 8000e30:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d108      	bne.n	8000e54 <stm32_write_memory+0x8c>
 8000e42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d004      	beq.n	8000e5e <stm32_write_memory+0x96>
		printf("Error: WRITE address and length must be 4 byte aligned\r\n");
 8000e54:	488b      	ldr	r0, [pc, #556]	; (8001084 <stm32_write_memory+0x2bc>)
 8000e56:	f004 f9d1 	bl	80051fc <puts>
		return STM32_ERR_UNKNOWN;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e108      	b.n	8001070 <stm32_write_memory+0x2a8>
	}

	if (stm32_send_command_timeout(huart_handle, WMEM_COMMAND,DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8000e5e:	4b87      	ldr	r3, [pc, #540]	; (800107c <stm32_write_memory+0x2b4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2264      	movs	r2, #100	; 0x64
 8000e64:	2131      	movs	r1, #49	; 0x31
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff feec 	bl	8000c44 <stm32_send_command_timeout>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <stm32_write_memory+0xae>
		return STM32_ERR_UNKNOWN;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e0fc      	b.n	8001070 <stm32_write_memory+0x2a8>

	/* Sends the address to be written */
	/* The & 0xFF operation masks the address value with 0xFF - Taking only the least significant 8 bits */

	/* Byte 3: MSB */
	buf[0] = address >> 24;
 8000e76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e7a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0e1b      	lsrs	r3, r3, #24
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000e8c:	701a      	strb	r2, [r3, #0]
	/* Byte 4 */
	buf[1] = (address >> 16) & 0xFF;
 8000e8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e92:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	0c1b      	lsrs	r3, r3, #16
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ea0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ea4:	705a      	strb	r2, [r3, #1]
	/* Byte 5 */
	buf[2] = (address >> 8) & 0xFF;
 8000ea6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000eaa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000eb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ebc:	709a      	strb	r2, [r3, #2]
	/* Byte 6: LSB */
	buf[3] = address & 0xFF;
 8000ebe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ec2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ece:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ed2:	70da      	strb	r2, [r3, #3]

	/* Performs checksum by performing a bitwise XOR between bytes 3 - 6*/
	buf[4] = buf[0] ^ buf[1] ^ buf[2] ^ buf[3];
 8000ed4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ed8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ee2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ee6:	785b      	ldrb	r3, [r3, #1]
 8000ee8:	4053      	eors	r3, r2
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ef0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ef4:	789b      	ldrb	r3, [r3, #2]
 8000ef6:	4053      	eors	r3, r2
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000efe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000f02:	78db      	ldrb	r3, [r3, #3]
 8000f04:	4053      	eors	r3, r2
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000f10:	711a      	strb	r2, [r3, #4]

	/* Sends the above address over UART and checks the returned Status */
	if (stm32_port_serial_write(huart_handle, buf, 5, DEFAULT_TIMEOUT) != HAL_OK)
 8000f12:	4b5a      	ldr	r3, [pc, #360]	; (800107c <stm32_write_memory+0x2b4>)
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	f107 0110 	add.w	r1, r7, #16
 8000f1a:	2364      	movs	r3, #100	; 0x64
 8000f1c:	2205      	movs	r2, #5
 8000f1e:	f002 ff55 	bl	8003dcc <HAL_UART_Transmit>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <stm32_write_memory+0x164>
		return STM32_ERR_UNKNOWN;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e0a1      	b.n	8001070 <stm32_write_memory+0x2a8>

	/* Receives ACK/NACK byte within a given time and checks the returned Status */
	if (stm32_get_ack_timeout(huart_handle,DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8000f2c:	4b53      	ldr	r3, [pc, #332]	; (800107c <stm32_write_memory+0x2b4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2164      	movs	r1, #100	; 0x64
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fe52 	bl	8000bdc <stm32_get_ack_timeout>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <stm32_write_memory+0x17a>
		return STM32_ERR_UNKNOWN;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e096      	b.n	8001070 <stm32_write_memory+0x2a8>

	/* Calculates the aligned length of the data to write */
	aligned_len = (len + 3) & ~3;
 8000f42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3303      	adds	r3, #3
 8000f4e:	f023 0303 	bic.w	r3, r3, #3
 8000f52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	/* Calculates checksum value */
	cs = aligned_len - 1;
 8000f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

	/* Sets the first byte of the buf array to the checksum value calculated previously */
	buf[0] = aligned_len - 1;
 8000f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000f74:	701a      	strb	r2, [r3, #0]

	/* Loop that iterates over the lenght len  */
	for (i = 0; i < len; i++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000f7c:	e023      	b.n	8000fc6 <stm32_write_memory+0x1fe>

		/* Calculates the checksum for the current data by performing a bitwise XOR operation between the current byte of data and the current value of the checksum */
		cs ^= data[i];
 8000f7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000f94:	4053      	eors	r3, r2
 8000f96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		buf[i + 1] = data[i];
 8000f9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000fa8:	441a      	add	r2, r3
 8000faa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000fae:	3301      	adds	r3, #1
 8000fb0:	7811      	ldrb	r1, [r2, #0]
 8000fb2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000fb6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000fba:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len; i++) {
 8000fbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000fc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000fce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3d2      	bcc.n	8000f7e <stm32_write_memory+0x1b6>
	}

	/* Padding data - It iterates over the remaining bytes of data */
	for (i = len; i < aligned_len; i++) {
 8000fd8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fdc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000fe6:	e012      	b.n	800100e <stm32_write_memory+0x246>
		cs ^= 0xFF;
 8000fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000fec:	43db      	mvns	r3, r3
 8000fee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		buf[i + 1] = 0xFF;
 8000ff2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000ffc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001000:	21ff      	movs	r1, #255	; 0xff
 8001002:	54d1      	strb	r1, [r2, r3]
	for (i = len; i < aligned_len; i++) {
 8001004:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001008:	3301      	adds	r3, #1
 800100a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800100e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001016:	429a      	cmp	r2, r3
 8001018:	d3e6      	bcc.n	8000fe8 <stm32_write_memory+0x220>
	}

	/* Registers checksum value */
	buf[aligned_len + 1] = cs;
 800101a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800101e:	3301      	adds	r3, #1
 8001020:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001024:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001028:	f897 111f 	ldrb.w	r1, [r7, #287]	; 0x11f
 800102c:	54d1      	strb	r1, [r2, r3]

	/* Sends the number of aligned bytes to be written and checks the returned Status */
	if (stm32_port_serial_write(huart_handle, buf, aligned_len + 2,DEFAULT_TIMEOUT) != HAL_OK)
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <stm32_write_memory+0x2b4>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001036:	b29b      	uxth	r3, r3
 8001038:	3302      	adds	r3, #2
 800103a:	b29a      	uxth	r2, r3
 800103c:	f107 0110 	add.w	r1, r7, #16
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	f002 fec3 	bl	8003dcc <HAL_UART_Transmit>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <stm32_write_memory+0x288>
		return STM32_ERR_UNKNOWN;
 800104c:	2301      	movs	r3, #1
 800104e:	e00f      	b.n	8001070 <stm32_write_memory+0x2a8>

	/* Receives ACK/NACK byte within a given timeout and checks the returned Status */
	s_err = stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT);
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <stm32_write_memory+0x2b4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2164      	movs	r1, #100	; 0x64
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fdc0 	bl	8000bdc <stm32_get_ack_timeout>
 800105c:	4603      	mov	r3, r0
 800105e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

	/* In case of Status different than OK, it returns Status "Unknown" */
	if (s_err != STM32_ERR_OK) {
 8001062:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <stm32_write_memory+0x2a6>
		return STM32_ERR_UNKNOWN;
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <stm32_write_memory+0x2a8>
	}

	/* Returns Status OK */
	return STM32_ERR_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8001076:	46bd      	mov	sp, r7
 8001078:	bd90      	pop	{r4, r7, pc}
 800107a:	bf00      	nop
 800107c:	20000084 	.word	0x20000084
 8001080:	08005ffc 	.word	0x08005ffc
 8001084:	08006024 	.word	0x08006024

08001088 <stm32_send_init_seq>:
 * @brief 			Send the bootloader entry code sequence 0x7F using the chosen USART
 * @param huart 	UART handle
 * @retval stm32_	err_t
 */
stm32_err_t stm32_send_init_seq(UART_HandleTypeDef *huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	/* Local Variables */
	huart_handle = huart;
 8001090:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <stm32_send_init_seq+0x68>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
	stm32_err_t s_err;
	uint8_t cmd = BL_UART_SOF;
 8001096:	237f      	movs	r3, #127	; 0x7f
 8001098:	73bb      	strb	r3, [r7, #14]

	/* Flush Anything Previously in the UART */
	stm32_port_serial_flush(huart_handle);
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <stm32_send_init_seq+0x68>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 ffff 	bl	80040a2 <HAL_UART_Abort>

	/* Send BL_UART_SOF Command */
	/* Check Returned Status */
	if (stm32_port_serial_write(huart_handle, &cmd, 1,DEFAULT_TIMEOUT) != HAL_OK)
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <stm32_send_init_seq+0x68>)
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	f107 010e 	add.w	r1, r7, #14
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	2201      	movs	r2, #1
 80010b0:	f002 fe8c 	bl	8003dcc <HAL_UART_Transmit>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <stm32_send_init_seq+0x3c>
	{
		/* In case of Status different than "OK", print a debug message */
		printf("Failed to send init the device\r\n");
 80010ba:	480e      	ldr	r0, [pc, #56]	; (80010f4 <stm32_send_init_seq+0x6c>)
 80010bc:	f004 f89e 	bl	80051fc <puts>
		return STM32_ERR_UNKNOWN;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e010      	b.n	80010e6 <stm32_send_init_seq+0x5e>
	}

	/* Receives ACK/NACK byte within a given timeout and checks the returned Status */
	s_err = stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT);
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <stm32_send_init_seq+0x68>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2164      	movs	r1, #100	; 0x64
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fd86 	bl	8000bdc <stm32_get_ack_timeout>
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]

	/* Check Returned Status */
	if (s_err != STM32_ERR_OK) {
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <stm32_send_init_seq+0x56>
		return STM32_ERR_UNKNOWN;
 80010da:	2301      	movs	r3, #1
 80010dc:	e003      	b.n	80010e6 <stm32_send_init_seq+0x5e>
	}

	printf("Success in init the device\r\n");
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <stm32_send_init_seq+0x70>)
 80010e0:	f004 f88c 	bl	80051fc <puts>

	/* Returns Status "OK" */
	return STM32_ERR_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000084 	.word	0x20000084
 80010f4:	0800605c 	.word	0x0800605c
 80010f8:	0800607c 	.word	0x0800607c

080010fc <stm32_erase_memory>:
 * @param spage		Page size.
 * @param pages		Number of pages.
 * @retval 			stm32_err_t
 */
stm32_err_t stm32_erase_memory(UART_HandleTypeDef *huart, uint8_t cmd, uint8_t spage, uint8_t pages)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	4608      	mov	r0, r1
 8001106:	4611      	mov	r1, r2
 8001108:	461a      	mov	r2, r3
 800110a:	4603      	mov	r3, r0
 800110c:	70fb      	strb	r3, [r7, #3]
 800110e:	460b      	mov	r3, r1
 8001110:	70bb      	strb	r3, [r7, #2]
 8001112:	4613      	mov	r3, r2
 8001114:	707b      	strb	r3, [r7, #1]
	/* Local Variables */
	huart_handle = huart;
 8001116:	4aab      	ldr	r2, [pc, #684]	; (80013c4 <stm32_erase_memory+0x2c8>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6013      	str	r3, [r2, #0]
	stm32_err_t s_err;
	HAL_StatusTypeDef  p_err;

	/* If pages equals to 0, returns Status OK and ends function execution */
	if (!pages)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <stm32_erase_memory+0x2a>
		return STM32_ERR_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e14a      	b.n	80013bc <stm32_erase_memory+0x2c0>

	/* This function sends the Erase Memory Command with a given timeout and checks Status returned */
	if (stm32_send_command_timeout(huart_handle, EX_EMEM_COMMAND,DEFAULT_TIMEOUT) != STM32_ERR_OK) {
 8001126:	4ba7      	ldr	r3, [pc, #668]	; (80013c4 <stm32_erase_memory+0x2c8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2264      	movs	r2, #100	; 0x64
 800112c:	2144      	movs	r1, #68	; 0x44
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fd88 	bl	8000c44 <stm32_send_command_timeout>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <stm32_erase_memory+0x48>
		printf( "Can't initiate chip erase!\r\n");
 800113a:	48a3      	ldr	r0, [pc, #652]	; (80013c8 <stm32_erase_memory+0x2cc>)
 800113c:	f004 f85e 	bl	80051fc <puts>
		return STM32_ERR_UNKNOWN;
 8001140:	2301      	movs	r3, #1
 8001142:	e13b      	b.n	80013bc <stm32_erase_memory+0x2c0>
	}

	/* Executes this statement in case of cmd = 0x44 */
	if (cmd == EX_EMEM_COMMAND) {
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	2b44      	cmp	r3, #68	; 0x44
 8001148:	f040 80bf 	bne.w	80012ca <stm32_erase_memory+0x1ce>
		if (pages == 0xFF) {
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2bff      	cmp	r3, #255	; 0xff
 8001150:	d127      	bne.n	80011a2 <stm32_erase_memory+0xa6>
			uint8_t buf[3];

			/* 0xFFFF - To use Global Mass Erase */
			buf[0] = 0xFF;
 8001152:	23ff      	movs	r3, #255	; 0xff
 8001154:	723b      	strb	r3, [r7, #8]
			buf[1] = 0xFF;
 8001156:	23ff      	movs	r3, #255	; 0xff
 8001158:	727b      	strb	r3, [r7, #9]
			/* Checksum byte */
			buf[2] = 0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	72bb      	strb	r3, [r7, #10]

			/* Sends the above bytes over UART and checks the returned Status */
			if (stm32_port_serial_write(huart_handle, buf, 3, DEFAULT_TIMEOUT) != HAL_OK) {
 800115e:	4b99      	ldr	r3, [pc, #612]	; (80013c4 <stm32_erase_memory+0x2c8>)
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	f107 0108 	add.w	r1, r7, #8
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	2203      	movs	r2, #3
 800116a:	f002 fe2f 	bl	8003dcc <HAL_UART_Transmit>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <stm32_erase_memory+0x82>
				printf( "Mass erase error.\r\n");
 8001174:	4895      	ldr	r0, [pc, #596]	; (80013cc <stm32_erase_memory+0x2d0>)
 8001176:	f004 f841 	bl	80051fc <puts>
				return STM32_ERR_UNKNOWN;
 800117a:	2301      	movs	r3, #1
 800117c:	e11e      	b.n	80013bc <stm32_erase_memory+0x2c0>
			}

			/* Receives ACK/NACK byte within a given timeout and checks the returned Status */
			s_err = stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT);
 800117e:	4b91      	ldr	r3, [pc, #580]	; (80013c4 <stm32_erase_memory+0x2c8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2164      	movs	r1, #100	; 0x64
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fd29 	bl	8000bdc <stm32_get_ack_timeout>
 800118a:	4603      	mov	r3, r0
 800118c:	74bb      	strb	r3, [r7, #18]

			/* Prints debug message in case of Status different than OK received and returns Status Unknown */
			if (s_err != STM32_ERR_OK) {
 800118e:	7cbb      	ldrb	r3, [r7, #18]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d004      	beq.n	800119e <stm32_erase_memory+0xa2>
				printf( "Mass erase failed. Try specifying the number of pages to be erased.\r\n");
 8001194:	488e      	ldr	r0, [pc, #568]	; (80013d0 <stm32_erase_memory+0x2d4>)
 8001196:	f004 f831 	bl	80051fc <puts>
				return STM32_ERR_UNKNOWN;
 800119a:	2301      	movs	r3, #1
 800119c:	e10e      	b.n	80013bc <stm32_erase_memory+0x2c0>
			}

			return STM32_ERR_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e10c      	b.n	80013bc <stm32_erase_memory+0x2c0>
		}

		/* Local Variables */
		uint16_t pg_num;
		uint8_t pg_byte;
		uint8_t cs = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t *buf;
		int i = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]

		buf = malloc(2 + 2 * pages + 1);
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	3301      	adds	r3, #1
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	3301      	adds	r3, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 fe35 	bl	8004e24 <malloc>
 80011ba:	4603      	mov	r3, r0
 80011bc:	60fb      	str	r3, [r7, #12]
		if (!buf)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <stm32_erase_memory+0xcc>
			return STM32_ERR_UNKNOWN;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0f9      	b.n	80013bc <stm32_erase_memory+0x2c0>

		/* Number of pages to be erased - 1, on two bytes, with MSB first */
		pg_byte = (pages - 1) >> 8;
 80011c8:	787b      	ldrb	r3, [r7, #1]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	121b      	asrs	r3, r3, #8
 80011ce:	72fb      	strb	r3, [r7, #11]
		buf[i++] = pg_byte;
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	623a      	str	r2, [r7, #32]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	7afa      	ldrb	r2, [r7, #11]
 80011de:	701a      	strb	r2, [r3, #0]
		cs ^= pg_byte;
 80011e0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	4053      	eors	r3, r2
 80011e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		pg_byte = (pages - 1) & 0xFF;
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	72fb      	strb	r3, [r7, #11]
		buf[i++] = pg_byte;
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	623a      	str	r2, [r7, #32]
 80011f8:	461a      	mov	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4413      	add	r3, r2
 80011fe:	7afa      	ldrb	r2, [r7, #11]
 8001200:	701a      	strb	r2, [r3, #0]
		cs ^= pg_byte;
 8001202:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001206:	7afb      	ldrb	r3, [r7, #11]
 8001208:	4053      	eors	r3, r2
 800120a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		for (pg_num = spage; pg_num < spage + pages; pg_num++) {
 800120e:	78bb      	ldrb	r3, [r7, #2]
 8001210:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001212:	e024      	b.n	800125e <stm32_erase_memory+0x162>
			pg_byte = pg_num >> 8;
 8001214:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	b29b      	uxth	r3, r3
 800121a:	72fb      	strb	r3, [r7, #11]
			cs ^= pg_byte;
 800121c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	4053      	eors	r3, r2
 8001224:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			buf[i++] = pg_byte;
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	623a      	str	r2, [r7, #32]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	7afa      	ldrb	r2, [r7, #11]
 8001236:	701a      	strb	r2, [r3, #0]
			pg_byte = pg_num & 0xFF;
 8001238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800123a:	72fb      	strb	r3, [r7, #11]
			cs ^= pg_byte;
 800123c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001240:	7afb      	ldrb	r3, [r7, #11]
 8001242:	4053      	eors	r3, r2
 8001244:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			buf[i++] = pg_byte;
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	623a      	str	r2, [r7, #32]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	7afa      	ldrb	r2, [r7, #11]
 8001256:	701a      	strb	r2, [r3, #0]
		for (pg_num = spage; pg_num < spage + pages; pg_num++) {
 8001258:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800125a:	3301      	adds	r3, #1
 800125c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800125e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001260:	78b9      	ldrb	r1, [r7, #2]
 8001262:	787b      	ldrb	r3, [r7, #1]
 8001264:	440b      	add	r3, r1
 8001266:	429a      	cmp	r2, r3
 8001268:	dbd4      	blt.n	8001214 <stm32_erase_memory+0x118>
		}
		buf[i++] = cs;
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	623a      	str	r2, [r7, #32]
 8001270:	461a      	mov	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4413      	add	r3, r2
 8001276:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800127a:	701a      	strb	r2, [r3, #0]

		/* Sends the buffer buf over UART and checks the returned Status */
		p_err = stm32_port_serial_write(huart_handle, buf, i, DEFAULT_TIMEOUT);
 800127c:	4b51      	ldr	r3, [pc, #324]	; (80013c4 <stm32_erase_memory+0x2c8>)
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	b29a      	uxth	r2, r3
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	68f9      	ldr	r1, [r7, #12]
 8001288:	f002 fda0 	bl	8003dcc <HAL_UART_Transmit>
 800128c:	4603      	mov	r3, r0
 800128e:	74fb      	strb	r3, [r7, #19]
		free(buf);
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f003 fdcf 	bl	8004e34 <free>

		/* Prints debug message in case of Status different than OK received and returns Status Unknown */
		if (p_err != HAL_OK) {
 8001296:	7cfb      	ldrb	r3, [r7, #19]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <stm32_erase_memory+0x1aa>
			printf( "Page-by-page erase error.\r\n");
 800129c:	484d      	ldr	r0, [pc, #308]	; (80013d4 <stm32_erase_memory+0x2d8>)
 800129e:	f003 ffad 	bl	80051fc <puts>
			return STM32_ERR_UNKNOWN;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e08a      	b.n	80013bc <stm32_erase_memory+0x2c0>
		}

		/* Receives ACK/NACK byte within a given timeout and checks the returned Status */
		s_err = stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT);
 80012a6:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <stm32_erase_memory+0x2c8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2164      	movs	r1, #100	; 0x64
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fc95 	bl	8000bdc <stm32_get_ack_timeout>
 80012b2:	4603      	mov	r3, r0
 80012b4:	74bb      	strb	r3, [r7, #18]

		/* Prints debug message in case of Status different than OK received and returns Status Unknown */
		if (s_err != STM32_ERR_OK) {
 80012b6:	7cbb      	ldrb	r3, [r7, #18]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <stm32_erase_memory+0x1ca>
			printf( "Page-by-page erase failed. Check the maximum pages your device supports.\r\n");
 80012bc:	4846      	ldr	r0, [pc, #280]	; (80013d8 <stm32_erase_memory+0x2dc>)
 80012be:	f003 ff9d 	bl	80051fc <puts>
			return STM32_ERR_UNKNOWN;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e07a      	b.n	80013bc <stm32_erase_memory+0x2c0>
		}

		return STM32_ERR_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e078      	b.n	80013bc <stm32_erase_memory+0x2c0>
	}

	/* Regular Erase (0x43 command) */

	if (pages == 0xFF) {
 80012ca:	787b      	ldrb	r3, [r7, #1]
 80012cc:	2bff      	cmp	r3, #255	; 0xff
 80012ce:	d10f      	bne.n	80012f0 <stm32_erase_memory+0x1f4>
		s_err = stm32_send_command_timeout(huart_handle, 0xFF, DEFAULT_TIMEOUT);
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <stm32_erase_memory+0x2c8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2264      	movs	r2, #100	; 0x64
 80012d6:	21ff      	movs	r1, #255	; 0xff
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fcb3 	bl	8000c44 <stm32_send_command_timeout>
 80012de:	4603      	mov	r3, r0
 80012e0:	74bb      	strb	r3, [r7, #18]
		if (s_err != STM32_ERR_OK) {
 80012e2:	7cbb      	ldrb	r3, [r7, #18]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <stm32_erase_memory+0x1f0>
			return STM32_ERR_UNKNOWN;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e067      	b.n	80013bc <stm32_erase_memory+0x2c0>
		}
		return STM32_ERR_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	e065      	b.n	80013bc <stm32_erase_memory+0x2c0>
	} else {
		uint8_t cs = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
		uint8_t pg_num;
		uint8_t *buf;
		int i = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]

		buf = malloc(1 + pages + 1);
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	3302      	adds	r3, #2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 fd91 	bl	8004e24 <malloc>
 8001302:	4603      	mov	r3, r0
 8001304:	617b      	str	r3, [r7, #20]
		if (!buf)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <stm32_erase_memory+0x214>
			return STM32_ERR_UNKNOWN;
 800130c:	2301      	movs	r3, #1
 800130e:	e055      	b.n	80013bc <stm32_erase_memory+0x2c0>

		buf[i++] = pages - 1;
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	61ba      	str	r2, [r7, #24]
 8001316:	461a      	mov	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	4413      	add	r3, r2
 800131c:	787a      	ldrb	r2, [r7, #1]
 800131e:	3a01      	subs	r2, #1
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	701a      	strb	r2, [r3, #0]
		cs ^= (pages-1);
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	3b01      	subs	r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	b25a      	sxtb	r2, r3
 800132c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001330:	4053      	eors	r3, r2
 8001332:	b25b      	sxtb	r3, r3
 8001334:	77fb      	strb	r3, [r7, #31]
		for (pg_num = spage; pg_num < (pages + spage); pg_num++) {
 8001336:	78bb      	ldrb	r3, [r7, #2]
 8001338:	77bb      	strb	r3, [r7, #30]
 800133a:	e00e      	b.n	800135a <stm32_erase_memory+0x25e>
			buf[i++] = pg_num;
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	61ba      	str	r2, [r7, #24]
 8001342:	461a      	mov	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	4413      	add	r3, r2
 8001348:	7fba      	ldrb	r2, [r7, #30]
 800134a:	701a      	strb	r2, [r3, #0]
			cs ^= pg_num;
 800134c:	7ffa      	ldrb	r2, [r7, #31]
 800134e:	7fbb      	ldrb	r3, [r7, #30]
 8001350:	4053      	eors	r3, r2
 8001352:	77fb      	strb	r3, [r7, #31]
		for (pg_num = spage; pg_num < (pages + spage); pg_num++) {
 8001354:	7fbb      	ldrb	r3, [r7, #30]
 8001356:	3301      	adds	r3, #1
 8001358:	77bb      	strb	r3, [r7, #30]
 800135a:	7fba      	ldrb	r2, [r7, #30]
 800135c:	7879      	ldrb	r1, [r7, #1]
 800135e:	78bb      	ldrb	r3, [r7, #2]
 8001360:	440b      	add	r3, r1
 8001362:	429a      	cmp	r2, r3
 8001364:	dbea      	blt.n	800133c <stm32_erase_memory+0x240>
		}
		buf[i++] = cs;
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	61ba      	str	r2, [r7, #24]
 800136c:	461a      	mov	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	4413      	add	r3, r2
 8001372:	7ffa      	ldrb	r2, [r7, #31]
 8001374:	701a      	strb	r2, [r3, #0]

		/* Sends the buffer buf over UART and checks the returned Status */
		p_err = stm32_port_serial_write(huart_handle, buf, i, DEFAULT_TIMEOUT);
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <stm32_erase_memory+0x2c8>)
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	b29a      	uxth	r2, r3
 800137e:	2364      	movs	r3, #100	; 0x64
 8001380:	6979      	ldr	r1, [r7, #20]
 8001382:	f002 fd23 	bl	8003dcc <HAL_UART_Transmit>
 8001386:	4603      	mov	r3, r0
 8001388:	74fb      	strb	r3, [r7, #19]

		free(buf);
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f003 fd52 	bl	8004e34 <free>

		/* Prints debug message in case of Status different than OK received and returns Status Unknown */
		if (p_err != HAL_OK) {
 8001390:	7cfb      	ldrb	r3, [r7, #19]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <stm32_erase_memory+0x2a4>
			printf( "Erase failed.\r\n");
 8001396:	4811      	ldr	r0, [pc, #68]	; (80013dc <stm32_erase_memory+0x2e0>)
 8001398:	f003 ff30 	bl	80051fc <puts>
			return STM32_ERR_UNKNOWN;
 800139c:	2301      	movs	r3, #1
 800139e:	e00d      	b.n	80013bc <stm32_erase_memory+0x2c0>
		}

		/* Receives ACK/NACK byte within a given timeout and checks the returned Status */
		s_err = stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <stm32_erase_memory+0x2c8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2164      	movs	r1, #100	; 0x64
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fc18 	bl	8000bdc <stm32_get_ack_timeout>
 80013ac:	4603      	mov	r3, r0
 80013ae:	74bb      	strb	r3, [r7, #18]

		/* Prints debug message in case of Status different than OK received and returns Status Unknown */
		if (s_err != STM32_ERR_OK) {
 80013b0:	7cbb      	ldrb	r3, [r7, #18]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <stm32_erase_memory+0x2be>
			return STM32_ERR_UNKNOWN;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <stm32_erase_memory+0x2c0>
		}

		return STM32_ERR_OK;
 80013ba:	2300      	movs	r3, #0
	}
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000084 	.word	0x20000084
 80013c8:	08006098 	.word	0x08006098
 80013cc:	080060b4 	.word	0x080060b4
 80013d0:	080060c8 	.word	0x080060c8
 80013d4:	08006110 	.word	0x08006110
 80013d8:	0800612c 	.word	0x0800612c
 80013dc:	08006178 	.word	0x08006178

080013e0 <stm32_go>:
 * @param address	Address to start.
 * 			CAUTION: there is not check if the address is correct.
 * @retval 		stm32_err_t
 */
stm32_err_t stm32_go(UART_HandleTypeDef *huart, uint32_t address)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
	/* Local Variable */
	huart_handle = huart;
 80013ea:	4a27      	ldr	r2, [pc, #156]	; (8001488 <stm32_go+0xa8>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6013      	str	r3, [r2, #0]
	uint8_t buf[5];

	if (stm32_send_command_timeout(huart_handle, GO_COMMAND, DEFAULT_TIMEOUT) != STM32_ERR_OK)
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <stm32_go+0xa8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2264      	movs	r2, #100	; 0x64
 80013f6:	2121      	movs	r1, #33	; 0x21
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fc23 	bl	8000c44 <stm32_send_command_timeout>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <stm32_go+0x28>
		return STM32_ERR_UNKNOWN;
 8001404:	2301      	movs	r3, #1
 8001406:	e03a      	b.n	800147e <stm32_go+0x9e>
	/* Byte 3: MSB */
	buf[0] = address >> 24;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	0e1b      	lsrs	r3, r3, #24
 800140c:	b2db      	uxtb	r3, r3
 800140e:	723b      	strb	r3, [r7, #8]
	/* Byte 4 */
	buf[1] = (address >> 16) & 0xFF;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	0c1b      	lsrs	r3, r3, #16
 8001414:	b2db      	uxtb	r3, r3
 8001416:	727b      	strb	r3, [r7, #9]
	/* Byte 5 */
	buf[2] = (address >> 8) & 0xFF;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	b2db      	uxtb	r3, r3
 800141e:	72bb      	strb	r3, [r7, #10]
	/* Byte 6: LSB */
	buf[3] = address & 0xFF;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	72fb      	strb	r3, [r7, #11]

	/* Performs checksum by performing a bitwise XOR between bytes 3 - 6*/
	buf[4] = buf[0] ^ buf[1] ^ buf[2] ^ buf[3];
 8001426:	7a3a      	ldrb	r2, [r7, #8]
 8001428:	7a7b      	ldrb	r3, [r7, #9]
 800142a:	4053      	eors	r3, r2
 800142c:	b2da      	uxtb	r2, r3
 800142e:	7abb      	ldrb	r3, [r7, #10]
 8001430:	4053      	eors	r3, r2
 8001432:	b2da      	uxtb	r2, r3
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	4053      	eors	r3, r2
 8001438:	b2db      	uxtb	r3, r3
 800143a:	733b      	strb	r3, [r7, #12]

	/* Sends the above address over UART and checks the returned Status */
	if (stm32_port_serial_write(huart_handle, buf, 5,DEFAULT_TIMEOUT) != HAL_OK)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <stm32_go+0xa8>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	f107 0108 	add.w	r1, r7, #8
 8001444:	2364      	movs	r3, #100	; 0x64
 8001446:	2205      	movs	r2, #5
 8001448:	f002 fcc0 	bl	8003dcc <HAL_UART_Transmit>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <stm32_go+0x76>
		return STM32_ERR_UNKNOWN;
 8001452:	2301      	movs	r3, #1
 8001454:	e013      	b.n	800147e <stm32_go+0x9e>

	/* Receives ACK/NACK byte within a given timeout and checks the returned Status */
	if (stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <stm32_go+0xa8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2164      	movs	r1, #100	; 0x64
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fbbd 	bl	8000bdc <stm32_get_ack_timeout>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <stm32_go+0x8c>
		return STM32_ERR_UNKNOWN;
 8001468:	2301      	movs	r3, #1
 800146a:	e008      	b.n	800147e <stm32_go+0x9e>

	/* Set BOOT Control Pin LOW to exit Target from BOOT Mode */
	stm32_boot_low();
 800146c:	2200      	movs	r2, #0
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <stm32_go+0xac>)
 8001472:	f000 ff7f 	bl	8002374 <HAL_GPIO_WritePin>

	printf("\r\nTarget Successfully Programmed!\r\n");
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <stm32_go+0xb0>)
 8001478:	f003 fec0 	bl	80051fc <puts>

	/* Returns Status OK */
	return STM32_ERR_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000084 	.word	0x20000084
 800148c:	48000c00 	.word	0x48000c00
 8001490:	08006188 	.word	0x08006188

08001494 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	4b31      	ldr	r3, [pc, #196]	; (8001570 <MX_GPIO_Init+0xdc>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a30      	ldr	r2, [pc, #192]	; (8001570 <MX_GPIO_Init+0xdc>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <MX_GPIO_Init+0xdc>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <MX_GPIO_Init+0xdc>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a2a      	ldr	r2, [pc, #168]	; (8001570 <MX_GPIO_Init+0xdc>)
 80014c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <MX_GPIO_Init+0xdc>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80014da:	f001 f827 	bl	800252c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_GPIO_Init+0xdc>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	4a23      	ldr	r2, [pc, #140]	; (8001570 <MX_GPIO_Init+0xdc>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_GPIO_Init+0xdc>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <MX_GPIO_Init+0xdc>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <MX_GPIO_Init+0xdc>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_GPIO_Init+0xdc>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_GPIO_Init+0xdc>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <MX_GPIO_Init+0xdc>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_GPIO_Init+0xdc>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NRST_CTRL_PIN_Pin|BOOT_CTRL_PIN_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2190      	movs	r1, #144	; 0x90
 800152a:	4812      	ldr	r0, [pc, #72]	; (8001574 <MX_GPIO_Init+0xe0>)
 800152c:	f000 ff22 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <MX_GPIO_Init+0xe4>)
 8001546:	f000 fd6b 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = NRST_CTRL_PIN_Pin|BOOT_CTRL_PIN_Pin;
 800154a:	2390      	movs	r3, #144	; 0x90
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_GPIO_Init+0xe0>)
 8001562:	f000 fd5d 	bl	8002020 <HAL_GPIO_Init>

}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	48000c00 	.word	0x48000c00
 8001578:	48000800 	.word	0x48000800

0800157c <__io_putchar>:

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int __io_putchar(int ch) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 100);
 8001584:	1d39      	adds	r1, r7, #4
 8001586:	2364      	movs	r3, #100	; 0x64
 8001588:	2201      	movs	r2, #1
 800158a:	4804      	ldr	r0, [pc, #16]	; (800159c <__io_putchar+0x20>)
 800158c:	f002 fc1e 	bl	8003dcc <HAL_UART_Transmit>
	return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200000c0 	.word	0x200000c0

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a4:	f000 fb55 	bl	8001c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a8:	f000 f814 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ac:	f7ff ff72 	bl	8001494 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015b0:	f000 fa32 	bl	8001a18 <MX_USART2_UART_Init>
  MX_LPUART1_UART_Init();
 80015b4:	f000 f9e4 	bl	8001980 <MX_LPUART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 80015b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <main+0x30>)
 80015be:	f000 fec1 	bl	8002344 <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d1f7      	bne.n	80015b8 <main+0x18>
	  		{
	  			/* Calls Boot function to start programming */
	  			Boot_Process_Init();
 80015c8:	f000 f84c 	bl	8001664 <Boot_Process_Init>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 80015cc:	e7f4      	b.n	80015b8 <main+0x18>
 80015ce:	bf00      	nop
 80015d0:	48000800 	.word	0x48000800

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b096      	sub	sp, #88	; 0x58
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	2244      	movs	r2, #68	; 0x44
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 feea 	bl	80053bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015fa:	f000 fef3 	bl	80023e4 <HAL_PWREx_ControlVoltageScaling>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001604:	f000 f8b2 	bl	800176c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001608:	2310      	movs	r3, #16
 800160a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800160c:	2301      	movs	r3, #1
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001614:	2360      	movs	r3, #96	; 0x60
 8001616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001618:	2300      	movs	r3, #0
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4618      	mov	r0, r3
 8001622:	f000 ff93 	bl	800254c <HAL_RCC_OscConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800162c:	f000 f89e 	bl	800176c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001630:	230f      	movs	r3, #15
 8001632:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001634:	2300      	movs	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800163c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f001 fb98 	bl	8002d80 <HAL_RCC_ClockConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001656:	f000 f889 	bl	800176c <Error_Handler>
  }
}
 800165a:	bf00      	nop
 800165c:	3758      	adds	r7, #88	; 0x58
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <Boot_Process_Init>:

/* USER CODE BEGIN 4 */

void Boot_Process_Init (void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
	/* Local variables */
	uint32_t scan = 0xFFFFFFFF, counter = 0;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
	uint32_t SIZE;

	printf("***System Boot demo***\r\n");
 8001674:	4835      	ldr	r0, [pc, #212]	; (800174c <Boot_Process_Init+0xe8>)
 8001676:	f003 fdc1 	bl	80051fc <puts>

	/* Synchronize with target bootloader ###################################### */
	stm32_init(&huart2,&BootDataCmd);
 800167a:	4935      	ldr	r1, [pc, #212]	; (8001750 <Boot_Process_Init+0xec>)
 800167c:	4835      	ldr	r0, [pc, #212]	; (8001754 <Boot_Process_Init+0xf0>)
 800167e:	f7fe ffbd 	bl	80005fc <stm32_init>
	stm32_read_memory(&huart2, TARGET_OPB_START_ADDRESS, RxBuffer, 32);
 8001682:	2320      	movs	r3, #32
 8001684:	4a34      	ldr	r2, [pc, #208]	; (8001758 <Boot_Process_Init+0xf4>)
 8001686:	4935      	ldr	r1, [pc, #212]	; (800175c <Boot_Process_Init+0xf8>)
 8001688:	4832      	ldr	r0, [pc, #200]	; (8001754 <Boot_Process_Init+0xf0>)
 800168a:	f7ff fb21 	bl	8000cd0 <stm32_read_memory>
	stm32_erase_memory(&huart2,EX_EMEM_COMMAND,1,0xFF);
 800168e:	23ff      	movs	r3, #255	; 0xff
 8001690:	2201      	movs	r2, #1
 8001692:	2144      	movs	r1, #68	; 0x44
 8001694:	482f      	ldr	r0, [pc, #188]	; (8001754 <Boot_Process_Init+0xf0>)
 8001696:	f7ff fd31 	bl	80010fc <stm32_erase_memory>

	/* Verifies when scan variable achieved last data of the Image to be programmed */
	while (scan == 0xFFFFFFFF)
 800169a:	e016      	b.n	80016ca <Boot_Process_Init+0x66>
	{
		counter++;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	3301      	adds	r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
		scan = *(uint32_t*)(FLASH_SIZE - (4*counter));
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <Boot_Process_Init+0xfc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d005      	beq.n	80016bc <Boot_Process_Init+0x58>
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <Boot_Process_Init+0xfc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	029a      	lsls	r2, r3, #10
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <Boot_Process_Init+0x100>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	e001      	b.n	80016c0 <Boot_Process_Init+0x5c>
 80016bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
	while (scan == 0xFFFFFFFF)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d0e4      	beq.n	800169c <Boot_Process_Init+0x38>
	 * FLASH_SIZE: Host total flash size
	 * IMAGE_ADDRESS: Start address of the image to be Programmed
	 * FLASH_BASE:Host Flash start address
	 * (4*(Counter-1)): Represents the amount of FLASH to achieve the final data of the Image to be programmed
	 */
	SIZE = (FLASH_SIZE - (IMAGE_ADDRESS - FLASH_BASE) - ((counter)*4));
 80016d2:	4b23      	ldr	r3, [pc, #140]	; (8001760 <Boot_Process_Init+0xfc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d007      	beq.n	80016f0 <Boot_Process_Init+0x8c>
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <Boot_Process_Init+0xfc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	029a      	lsls	r2, r3, #10
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <Boot_Process_Init+0x100>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	f5a3 4310 	sub.w	r3, r3, #36864	; 0x9000
 80016ee:	e000      	b.n	80016f2 <Boot_Process_Init+0x8e>
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <Boot_Process_Init+0x104>)
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	0092      	lsls	r2, r2, #2
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	603b      	str	r3, [r7, #0]

	/* Writes up to 256Bytes of memory, it can be from FLASH or RAM */
	for(uint16_t i = 0; i < SIZE; i+=256)
 80016fa:	2300      	movs	r3, #0
 80016fc:	80fb      	strh	r3, [r7, #6]
 80016fe:	e011      	b.n	8001724 <Boot_Process_Init+0xc0>
	{
		stm32_write_memory(&huart2, (TARGET_FLASH_START_ADDRESS+i), ((uint8_t*)IMAGE_ADDRESS+i), 256);
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001706:	4619      	mov	r1, r3
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 800170e:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
 8001712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001716:	480f      	ldr	r0, [pc, #60]	; (8001754 <Boot_Process_Init+0xf0>)
 8001718:	f7ff fb56 	bl	8000dc8 <stm32_write_memory>
	for(uint16_t i = 0; i < SIZE; i+=256)
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001722:	80fb      	strh	r3, [r7, #6]
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8e9      	bhi.n	8001700 <Boot_Process_Init+0x9c>
	}

	/* Reads up to 256Bytes of memory, it can be from FLASH or RAM */
	stm32_read_memory(&huart2, TARGET_FLASH_START_ADDRESS, RxBuffer, 32);
 800172c:	2320      	movs	r3, #32
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <Boot_Process_Init+0xf4>)
 8001730:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <Boot_Process_Init+0xf0>)
 8001736:	f7ff facb 	bl	8000cd0 <stm32_read_memory>

	/* Executes the downloaded code */
	stm32_go(&huart2, TARGET_FLASH_START_ADDRESS);
 800173a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <Boot_Process_Init+0xf0>)
 8001740:	f7ff fe4e 	bl	80013e0 <stm32_go>
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	080061ac 	.word	0x080061ac
 8001750:	200000a8 	.word	0x200000a8
 8001754:	20000150 	.word	0x20000150
 8001758:	20000088 	.word	0x20000088
 800175c:	40022000 	.word	0x40022000
 8001760:	1fff75e0 	.word	0x1fff75e0
 8001764:	03fffc00 	.word	0x03fffc00
 8001768:	001f7000 	.word	0x001f7000

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001774:	e7fe      	b.n	8001774 <Error_Handler+0x8>
	...

08001778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_MspInit+0x44>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_MspInit+0x44>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6613      	str	r3, [r2, #96]	; 0x60
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_MspInit+0x44>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_MspInit+0x44>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_MspInit+0x44>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6593      	str	r3, [r2, #88]	; 0x58
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_MspInit+0x44>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <NMI_Handler+0x4>

080017c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler+0x4>

080017d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler+0x4>

080017de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180c:	f000 fa76 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e00a      	b.n	800183c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001826:	f3af 8000 	nop.w
 800182a:	4601      	mov	r1, r0
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	60ba      	str	r2, [r7, #8]
 8001832:	b2ca      	uxtb	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	dbf0      	blt.n	8001826 <_read+0x12>
  }

  return len;
 8001844:	687b      	ldr	r3, [r7, #4]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	e009      	b.n	8001874 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60ba      	str	r2, [r7, #8]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fe87 	bl	800157c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3301      	adds	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	dbf1      	blt.n	8001860 <_write+0x12>
  }
  return len;
 800187c:	687b      	ldr	r3, [r7, #4]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <_close>:

int _close(int file)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ae:	605a      	str	r2, [r3, #4]
  return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_isatty>:

int _isatty(int file)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f003 fdaa 	bl	8005478 <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200a0000 	.word	0x200a0000
 8001950:	00000400 	.word	0x00000400
 8001954:	200000bc 	.word	0x200000bc
 8001958:	20000330 	.word	0x20000330

0800195c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 8001986:	4a23      	ldr	r2, [pc, #140]	; (8001a14 <MX_LPUART1_UART_Init+0x94>)
 8001988:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 800198c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001990:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 80019be:	2200      	movs	r2, #0
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80019c8:	4811      	ldr	r0, [pc, #68]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 80019ca:	f002 f9af 	bl	8003d2c <HAL_UART_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80019d4:	f7ff feca 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d8:	2100      	movs	r1, #0
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 80019dc:	f003 f958 	bl	8004c90 <HAL_UARTEx_SetTxFifoThreshold>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019e6:	f7ff fec1 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ea:	2100      	movs	r1, #0
 80019ec:	4808      	ldr	r0, [pc, #32]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 80019ee:	f003 f98d 	bl	8004d0c <HAL_UARTEx_SetRxFifoThreshold>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019f8:	f7ff feb8 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	; (8001a10 <MX_LPUART1_UART_Init+0x90>)
 80019fe:	f003 f90e 	bl	8004c1e <HAL_UARTEx_DisableFifoMode>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a08:	f7ff feb0 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200000c0 	.word	0x200000c0
 8001a14:	40008000 	.word	0x40008000

08001a18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a1e:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <MX_USART2_UART_Init+0x98>)
 8001a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a30:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a64:	4811      	ldr	r0, [pc, #68]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a66:	f002 f961 	bl	8003d2c <HAL_UART_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001a70:	f7ff fe7c 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a74:	2100      	movs	r1, #0
 8001a76:	480d      	ldr	r0, [pc, #52]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a78:	f003 f90a 	bl	8004c90 <HAL_UARTEx_SetTxFifoThreshold>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001a82:	f7ff fe73 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a86:	2100      	movs	r1, #0
 8001a88:	4808      	ldr	r0, [pc, #32]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a8a:	f003 f93f 	bl	8004d0c <HAL_UARTEx_SetRxFifoThreshold>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001a94:	f7ff fe6a 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <MX_USART2_UART_Init+0x94>)
 8001a9a:	f003 f8c0 	bl	8004c1e <HAL_UARTEx_DisableFifoMode>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001aa4:	f7ff fe62 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000150 	.word	0x20000150
 8001ab0:	40004400 	.word	0x40004400

08001ab4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b0b0      	sub	sp, #192	; 0xc0
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001acc:	f107 0318 	add.w	r3, r7, #24
 8001ad0:	2294      	movs	r2, #148	; 0x94
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 fc71 	bl	80053bc <memset>
  if(uartHandle->Instance==LPUART1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a43      	ldr	r2, [pc, #268]	; (8001bec <HAL_UART_MspInit+0x138>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d13e      	bne.n	8001b62 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aec:	f107 0318 	add.w	r3, r7, #24
 8001af0:	4618      	mov	r0, r3
 8001af2:	f001 fc03 	bl	80032fc <HAL_RCCEx_PeriphCLKConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001afc:	f7ff fe36 	bl	800176c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b00:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <HAL_UART_MspInit+0x13c>)
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	4a3a      	ldr	r2, [pc, #232]	; (8001bf0 <HAL_UART_MspInit+0x13c>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b0c:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_UART_MspInit+0x13c>)
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b18:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <HAL_UART_MspInit+0x13c>)
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1c:	4a34      	ldr	r2, [pc, #208]	; (8001bf0 <HAL_UART_MspInit+0x13c>)
 8001b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_UART_MspInit+0x13c>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001b30:	f000 fcfc 	bl	800252c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b4e:	2308      	movs	r3, #8
 8001b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4826      	ldr	r0, [pc, #152]	; (8001bf4 <HAL_UART_MspInit+0x140>)
 8001b5c:	f000 fa60 	bl	8002020 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b60:	e03f      	b.n	8001be2 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <HAL_UART_MspInit+0x144>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d13a      	bne.n	8001be2 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 fbbf 	bl	80032fc <HAL_RCCEx_PeriphCLKConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001b84:	f7ff fdf2 	bl	800176c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_UART_MspInit+0x13c>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <HAL_UART_MspInit+0x13c>)
 8001b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b92:	6593      	str	r3, [r2, #88]	; 0x58
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_UART_MspInit+0x13c>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_UART_MspInit+0x13c>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <HAL_UART_MspInit+0x13c>)
 8001ba6:	f043 0308 	orr.w	r3, r3, #8
 8001baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_UART_MspInit+0x13c>)
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001bb8:	2360      	movs	r3, #96	; 0x60
 8001bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4807      	ldr	r0, [pc, #28]	; (8001bfc <HAL_UART_MspInit+0x148>)
 8001bde:	f000 fa1f 	bl	8002020 <HAL_GPIO_Init>
}
 8001be2:	bf00      	nop
 8001be4:	37c0      	adds	r7, #192	; 0xc0
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40008000 	.word	0x40008000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48001800 	.word	0x48001800
 8001bf8:	40004400 	.word	0x40004400
 8001bfc:	48000c00 	.word	0x48000c00

08001c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c04:	f7ff feaa 	bl	800195c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c08:	480c      	ldr	r0, [pc, #48]	; (8001c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0a:	490d      	ldr	r1, [pc, #52]	; (8001c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <LoopForever+0xe>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c20:	4c0a      	ldr	r4, [pc, #40]	; (8001c4c <LoopForever+0x16>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f003 fc29 	bl	8005484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c32:	f7ff fcb5 	bl	80015a0 <main>

08001c36 <LoopForever>:

LoopForever:
    b LoopForever
 8001c36:	e7fe      	b.n	8001c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c44:	08006278 	.word	0x08006278
  ldr r2, =_sbss
 8001c48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c4c:	20000330 	.word	0x20000330

08001c50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC1_IRQHandler>

08001c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 f943 	bl	8001ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c62:	2000      	movs	r0, #0
 8001c64:	f000 f80e 	bl	8001c84 <HAL_InitTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	e001      	b.n	8001c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c74:	f7ff fd80 	bl	8001778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_InitTick+0x6c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d023      	beq.n	8001ce0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_InitTick+0x70>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_InitTick+0x6c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f941 	bl	8001f36 <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d809      	bhi.n	8001cd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f000 f919 	bl	8001efe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_InitTick+0x74>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e007      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e004      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e001      	b.n	8001ce4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	200001e0 	.word	0x200001e0

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200001e0 	.word	0x200001e0

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_Delay+0x44>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000008 	.word	0x20000008

08001d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da0:	4013      	ands	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db6:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	60d3      	str	r3, [r2, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	f003 0307 	and.w	r3, r3, #7
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0a      	blt.n	8001e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	490c      	ldr	r1, [pc, #48]	; (8001e34 <__NVIC_SetPriority+0x4c>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e10:	e00a      	b.n	8001e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <__NVIC_SetPriority+0x50>)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	761a      	strb	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f1c3 0307 	rsb	r3, r3, #7
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	bf28      	it	cs
 8001e5a:	2304      	movcs	r3, #4
 8001e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d902      	bls.n	8001e6c <NVIC_EncodePriority+0x30>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3b03      	subs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <NVIC_EncodePriority+0x32>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	401a      	ands	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	4313      	orrs	r3, r2
         );
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb4:	d301      	bcc.n	8001eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00f      	b.n	8001eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <SysTick_Config+0x40>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f7ff ff8e 	bl	8001de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SysTick_Config+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <SysTick_Config+0x40>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff47 	bl	8001d84 <__NVIC_SetPriorityGrouping>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f10:	f7ff ff5c 	bl	8001dcc <__NVIC_GetPriorityGrouping>
 8001f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	f7ff ff8e 	bl	8001e3c <NVIC_EncodePriority>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5d 	bl	8001de8 <__NVIC_SetPriority>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffb0 	bl	8001ea4 <SysTick_Config>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d008      	beq.n	8001f78 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e040      	b.n	8001ffa <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 020e 	bic.w	r2, r2, #14
 8001f86:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f96:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	f003 021c 	and.w	r2, r3, #28
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fba:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fc4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fe6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202e:	e166      	b.n	80022fe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2101      	movs	r1, #1
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8158 	beq.w	80022f8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d005      	beq.n	8002060 <HAL_GPIO_Init+0x40>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d130      	bne.n	80020c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002096:	2201      	movs	r2, #1
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	f003 0201 	and.w	r2, r3, #1
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d017      	beq.n	80020fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d123      	bne.n	8002152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	08da      	lsrs	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3208      	adds	r2, #8
 8002112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	08da      	lsrs	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3208      	adds	r2, #8
 800214c:	6939      	ldr	r1, [r7, #16]
 800214e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0203 	and.w	r2, r3, #3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80b2 	beq.w	80022f8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_GPIO_Init+0x2fc>)
 8002196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002198:	4a60      	ldr	r2, [pc, #384]	; (800231c <HAL_GPIO_Init+0x2fc>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6613      	str	r3, [r2, #96]	; 0x60
 80021a0:	4b5e      	ldr	r3, [pc, #376]	; (800231c <HAL_GPIO_Init+0x2fc>)
 80021a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021ac:	4a5c      	ldr	r2, [pc, #368]	; (8002320 <HAL_GPIO_Init+0x300>)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	3302      	adds	r3, #2
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021d6:	d02b      	beq.n	8002230 <HAL_GPIO_Init+0x210>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_GPIO_Init+0x304>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d025      	beq.n	800222c <HAL_GPIO_Init+0x20c>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a51      	ldr	r2, [pc, #324]	; (8002328 <HAL_GPIO_Init+0x308>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d01f      	beq.n	8002228 <HAL_GPIO_Init+0x208>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a50      	ldr	r2, [pc, #320]	; (800232c <HAL_GPIO_Init+0x30c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d019      	beq.n	8002224 <HAL_GPIO_Init+0x204>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a4f      	ldr	r2, [pc, #316]	; (8002330 <HAL_GPIO_Init+0x310>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d013      	beq.n	8002220 <HAL_GPIO_Init+0x200>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a4e      	ldr	r2, [pc, #312]	; (8002334 <HAL_GPIO_Init+0x314>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00d      	beq.n	800221c <HAL_GPIO_Init+0x1fc>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a4d      	ldr	r2, [pc, #308]	; (8002338 <HAL_GPIO_Init+0x318>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d007      	beq.n	8002218 <HAL_GPIO_Init+0x1f8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a4c      	ldr	r2, [pc, #304]	; (800233c <HAL_GPIO_Init+0x31c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_GPIO_Init+0x1f4>
 8002210:	2307      	movs	r3, #7
 8002212:	e00e      	b.n	8002232 <HAL_GPIO_Init+0x212>
 8002214:	2308      	movs	r3, #8
 8002216:	e00c      	b.n	8002232 <HAL_GPIO_Init+0x212>
 8002218:	2306      	movs	r3, #6
 800221a:	e00a      	b.n	8002232 <HAL_GPIO_Init+0x212>
 800221c:	2305      	movs	r3, #5
 800221e:	e008      	b.n	8002232 <HAL_GPIO_Init+0x212>
 8002220:	2304      	movs	r3, #4
 8002222:	e006      	b.n	8002232 <HAL_GPIO_Init+0x212>
 8002224:	2303      	movs	r3, #3
 8002226:	e004      	b.n	8002232 <HAL_GPIO_Init+0x212>
 8002228:	2302      	movs	r3, #2
 800222a:	e002      	b.n	8002232 <HAL_GPIO_Init+0x212>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_GPIO_Init+0x212>
 8002230:	2300      	movs	r3, #0
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	f002 0203 	and.w	r2, r2, #3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4093      	lsls	r3, r2
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002242:	4937      	ldr	r1, [pc, #220]	; (8002320 <HAL_GPIO_Init+0x300>)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002250:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <HAL_GPIO_Init+0x320>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002274:	4a32      	ldr	r2, [pc, #200]	; (8002340 <HAL_GPIO_Init+0x320>)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <HAL_GPIO_Init+0x320>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800229e:	4a28      	ldr	r2, [pc, #160]	; (8002340 <HAL_GPIO_Init+0x320>)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_GPIO_Init+0x320>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022c8:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_GPIO_Init+0x320>)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_GPIO_Init+0x320>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022f2:	4a13      	ldr	r2, [pc, #76]	; (8002340 <HAL_GPIO_Init+0x320>)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3301      	adds	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	f47f ae91 	bne.w	8002030 <HAL_GPIO_Init+0x10>
  }
}
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	371c      	adds	r7, #28
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40021000 	.word	0x40021000
 8002320:	40010000 	.word	0x40010000
 8002324:	48000400 	.word	0x48000400
 8002328:	48000800 	.word	0x48000800
 800232c:	48000c00 	.word	0x48000c00
 8002330:	48001000 	.word	0x48001000
 8002334:	48001400 	.word	0x48001400
 8002338:	48001800 	.word	0x48001800
 800233c:	48001c00 	.word	0x48001c00
 8002340:	40010400 	.word	0x40010400

08002344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e001      	b.n	8002366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002390:	e002      	b.n	8002398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023a8:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b4:	d102      	bne.n	80023bc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80023b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ba:	e00b      	b.n	80023d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80023be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ca:	d102      	bne.n	80023d2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80023cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d0:	e000      	b.n	80023d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80023d2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40007000 	.word	0x40007000

080023e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d141      	bne.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023f2:	4b4b      	ldr	r3, [pc, #300]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fe:	d131      	bne.n	8002464 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002400:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002406:	4a46      	ldr	r2, [pc, #280]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800240c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002410:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002418:	4a41      	ldr	r2, [pc, #260]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002420:	4b40      	ldr	r3, [pc, #256]	; (8002524 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2232      	movs	r2, #50	; 0x32
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	4a3f      	ldr	r2, [pc, #252]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800242c:	fba2 2303 	umull	r2, r3, r2, r3
 8002430:	0c9b      	lsrs	r3, r3, #18
 8002432:	3301      	adds	r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002436:	e002      	b.n	800243e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3b01      	subs	r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800243e:	4b38      	ldr	r3, [pc, #224]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244a:	d102      	bne.n	8002452 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f2      	bne.n	8002438 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002452:	4b33      	ldr	r3, [pc, #204]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245e:	d158      	bne.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e057      	b.n	8002514 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002464:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800246a:	4a2d      	ldr	r2, [pc, #180]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002470:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002474:	e04d      	b.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800247c:	d141      	bne.n	8002502 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800248a:	d131      	bne.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002492:	4a23      	ldr	r2, [pc, #140]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800249c:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024a4:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2232      	movs	r2, #50	; 0x32
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	0c9b      	lsrs	r3, r3, #18
 80024be:	3301      	adds	r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024c2:	e002      	b.n	80024ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d6:	d102      	bne.n	80024de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f2      	bne.n	80024c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ea:	d112      	bne.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e011      	b.n	8002514 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002500:	e007      	b.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002510:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40007000 	.word	0x40007000
 8002524:	20000000 	.word	0x20000000
 8002528:	431bde83 	.word	0x431bde83

0800252c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800253a:	6053      	str	r3, [r2, #4]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40007000 	.word	0x40007000

0800254c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	f000 bc08 	b.w	8002d70 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002560:	4b96      	ldr	r3, [pc, #600]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800256a:	4b94      	ldr	r3, [pc, #592]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80e4 	beq.w	800274a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_RCC_OscConfig+0x4c>
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b0c      	cmp	r3, #12
 800258c:	f040 808b 	bne.w	80026a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b01      	cmp	r3, #1
 8002594:	f040 8087 	bne.w	80026a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002598:	4b88      	ldr	r3, [pc, #544]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_OscConfig+0x64>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e3df      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1a      	ldr	r2, [r3, #32]
 80025b4:	4b81      	ldr	r3, [pc, #516]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <HAL_RCC_OscConfig+0x7e>
 80025c0:	4b7e      	ldr	r3, [pc, #504]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c8:	e005      	b.n	80025d6 <HAL_RCC_OscConfig+0x8a>
 80025ca:	4b7c      	ldr	r3, [pc, #496]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80025cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d223      	bcs.n	8002622 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fdcc 	bl	800317c <RCC_SetFlashLatencyFromMSIRange>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e3c0      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ee:	4b73      	ldr	r3, [pc, #460]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a72      	ldr	r2, [pc, #456]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80025f4:	f043 0308 	orr.w	r3, r3, #8
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b70      	ldr	r3, [pc, #448]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	496d      	ldr	r1, [pc, #436]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800260c:	4b6b      	ldr	r3, [pc, #428]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	4968      	ldr	r1, [pc, #416]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
 8002620:	e025      	b.n	800266e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002622:	4b66      	ldr	r3, [pc, #408]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a65      	ldr	r2, [pc, #404]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002628:	f043 0308 	orr.w	r3, r3, #8
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b63      	ldr	r3, [pc, #396]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4960      	ldr	r1, [pc, #384]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002640:	4b5e      	ldr	r3, [pc, #376]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	495b      	ldr	r1, [pc, #364]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fd8c 	bl	800317c <RCC_SetFlashLatencyFromMSIRange>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e380      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800266e:	f000 fcc1 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002672:	4602      	mov	r2, r0
 8002674:	4b51      	ldr	r3, [pc, #324]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	4950      	ldr	r1, [pc, #320]	; (80027c0 <HAL_RCC_OscConfig+0x274>)
 8002680:	5ccb      	ldrb	r3, [r1, r3]
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	4a4e      	ldr	r2, [pc, #312]	; (80027c4 <HAL_RCC_OscConfig+0x278>)
 800268c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800268e:	4b4e      	ldr	r3, [pc, #312]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff faf6 	bl	8001c84 <HAL_InitTick>
 8002698:	4603      	mov	r3, r0
 800269a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d052      	beq.n	8002748 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	e364      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d032      	beq.n	8002714 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026ae:	4b43      	ldr	r3, [pc, #268]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a42      	ldr	r2, [pc, #264]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026ba:	f7ff fb33 	bl	8001d24 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026c2:	f7ff fb2f 	bl	8001d24 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e34d      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026d4:	4b39      	ldr	r3, [pc, #228]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e0:	4b36      	ldr	r3, [pc, #216]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a35      	ldr	r2, [pc, #212]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80026e6:	f043 0308 	orr.w	r3, r3, #8
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4930      	ldr	r1, [pc, #192]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fe:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	492b      	ldr	r1, [pc, #172]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
 8002712:	e01a      	b.n	800274a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002714:	4b29      	ldr	r3, [pc, #164]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a28      	ldr	r2, [pc, #160]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002720:	f7ff fb00 	bl	8001d24 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002728:	f7ff fafc 	bl	8001d24 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e31a      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x1dc>
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002748:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d073      	beq.n	800283e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d005      	beq.n	8002768 <HAL_RCC_OscConfig+0x21c>
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d10e      	bne.n	8002780 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d10b      	bne.n	8002780 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d063      	beq.n	800283c <HAL_RCC_OscConfig+0x2f0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d15f      	bne.n	800283c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e2f7      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002788:	d106      	bne.n	8002798 <HAL_RCC_OscConfig+0x24c>
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e025      	b.n	80027e4 <HAL_RCC_OscConfig+0x298>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a0:	d114      	bne.n	80027cc <HAL_RCC_OscConfig+0x280>
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a05      	ldr	r2, [pc, #20]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80027a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b03      	ldr	r3, [pc, #12]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a02      	ldr	r2, [pc, #8]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e013      	b.n	80027e4 <HAL_RCC_OscConfig+0x298>
 80027bc:	40021000 	.word	0x40021000
 80027c0:	080061c4 	.word	0x080061c4
 80027c4:	20000000 	.word	0x20000000
 80027c8:	20000004 	.word	0x20000004
 80027cc:	4ba0      	ldr	r3, [pc, #640]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a9f      	ldr	r2, [pc, #636]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80027d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b9d      	ldr	r3, [pc, #628]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a9c      	ldr	r2, [pc, #624]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7ff fa9a 	bl	8001d24 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7ff fa96 	bl	8001d24 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e2b4      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002806:	4b92      	ldr	r3, [pc, #584]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x2a8>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7ff fa86 	bl	8001d24 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7ff fa82 	bl	8001d24 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e2a0      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800282e:	4b88      	ldr	r3, [pc, #544]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x2d0>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d060      	beq.n	800290c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d005      	beq.n	800285c <HAL_RCC_OscConfig+0x310>
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d119      	bne.n	800288a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d116      	bne.n	800288a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800285c:	4b7c      	ldr	r3, [pc, #496]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_OscConfig+0x328>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e27d      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002874:	4b76      	ldr	r3, [pc, #472]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	4973      	ldr	r1, [pc, #460]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002888:	e040      	b.n	800290c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d023      	beq.n	80028da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002892:	4b6f      	ldr	r3, [pc, #444]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6e      	ldr	r2, [pc, #440]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7ff fa41 	bl	8001d24 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a6:	f7ff fa3d 	bl	8001d24 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e25b      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b8:	4b65      	ldr	r3, [pc, #404]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	4b62      	ldr	r3, [pc, #392]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	061b      	lsls	r3, r3, #24
 80028d2:	495f      	ldr	r1, [pc, #380]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
 80028d8:	e018      	b.n	800290c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028da:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a5c      	ldr	r2, [pc, #368]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80028e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7ff fa1d 	bl	8001d24 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ee:	f7ff fa19 	bl	8001d24 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e237      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002900:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f0      	bne.n	80028ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d03c      	beq.n	8002992 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01c      	beq.n	800295a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002920:	4b4b      	ldr	r3, [pc, #300]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002926:	4a4a      	ldr	r2, [pc, #296]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7ff f9f8 	bl	8001d24 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7ff f9f4 	bl	8001d24 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e212      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800294a:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 800294c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ef      	beq.n	8002938 <HAL_RCC_OscConfig+0x3ec>
 8002958:	e01b      	b.n	8002992 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800295a:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 800295c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002960:	4a3b      	ldr	r2, [pc, #236]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296a:	f7ff f9db 	bl	8001d24 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002972:	f7ff f9d7 	bl	8001d24 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e1f5      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002984:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1ef      	bne.n	8002972 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80a6 	beq.w	8002aec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a0:	2300      	movs	r3, #0
 80029a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029a4:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10d      	bne.n	80029cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80029b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ba:	6593      	str	r3, [r2, #88]	; 0x58
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c8:	2301      	movs	r3, #1
 80029ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_RCC_OscConfig+0x508>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d118      	bne.n	8002a0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d8:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_RCC_OscConfig+0x508>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <HAL_RCC_OscConfig+0x508>)
 80029de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e4:	f7ff f99e 	bl	8001d24 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ec:	f7ff f99a 	bl	8001d24 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1b8      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_RCC_OscConfig+0x508>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d108      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4d8>
 8002a12:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a22:	e029      	b.n	8002a78 <HAL_RCC_OscConfig+0x52c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	d115      	bne.n	8002a58 <HAL_RCC_OscConfig+0x50c>
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a32:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	4a03      	ldr	r2, [pc, #12]	; (8002a50 <HAL_RCC_OscConfig+0x504>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a4c:	e014      	b.n	8002a78 <HAL_RCC_OscConfig+0x52c>
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40007000 	.word	0x40007000
 8002a58:	4b9d      	ldr	r3, [pc, #628]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	4a9c      	ldr	r2, [pc, #624]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a68:	4b99      	ldr	r3, [pc, #612]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	4a98      	ldr	r2, [pc, #608]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d016      	beq.n	8002aae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a80:	f7ff f950 	bl	8001d24 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a88:	f7ff f94c 	bl	8001d24 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e168      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9e:	4b8c      	ldr	r3, [pc, #560]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ed      	beq.n	8002a88 <HAL_RCC_OscConfig+0x53c>
 8002aac:	e015      	b.n	8002ada <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aae:	f7ff f939 	bl	8001d24 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7ff f935 	bl	8001d24 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e151      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002acc:	4b80      	ldr	r3, [pc, #512]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1ed      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ada:	7ffb      	ldrb	r3, [r7, #31]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae0:	4b7b      	ldr	r3, [pc, #492]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	4a7a      	ldr	r2, [pc, #488]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d03c      	beq.n	8002b72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01c      	beq.n	8002b3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b00:	4b73      	ldr	r3, [pc, #460]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b06:	4a72      	ldr	r2, [pc, #456]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7ff f908 	bl	8001d24 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b18:	f7ff f904 	bl	8001d24 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e122      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b2a:	4b69      	ldr	r3, [pc, #420]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ef      	beq.n	8002b18 <HAL_RCC_OscConfig+0x5cc>
 8002b38:	e01b      	b.n	8002b72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b3a:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b40:	4a63      	ldr	r2, [pc, #396]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7ff f8eb 	bl	8001d24 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b52:	f7ff f8e7 	bl	8001d24 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e105      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b64:	4b5a      	ldr	r3, [pc, #360]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1ef      	bne.n	8002b52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80f9 	beq.w	8002d6e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	f040 80cf 	bne.w	8002d24 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b86:	4b52      	ldr	r3, [pc, #328]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0203 	and.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d12c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d123      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d11b      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d113      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d109      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	3b01      	subs	r3, #1
 8002bee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d071      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d068      	beq.n	8002ccc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bfa:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c06:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0ac      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c16:	4b2e      	ldr	r3, [pc, #184]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a2d      	ldr	r2, [pc, #180]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c22:	f7ff f87f 	bl	8001d24 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7ff f87b 	bl	8001d24 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e099      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3c:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c48:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	4b21      	ldr	r3, [pc, #132]	; (8002cd4 <HAL_RCC_OscConfig+0x788>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c58:	3a01      	subs	r2, #1
 8002c5a:	0112      	lsls	r2, r2, #4
 8002c5c:	4311      	orrs	r1, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c62:	0212      	lsls	r2, r2, #8
 8002c64:	4311      	orrs	r1, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c6a:	0852      	lsrs	r2, r2, #1
 8002c6c:	3a01      	subs	r2, #1
 8002c6e:	0552      	lsls	r2, r2, #21
 8002c70:	4311      	orrs	r1, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c76:	0852      	lsrs	r2, r2, #1
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	0652      	lsls	r2, r2, #25
 8002c7c:	4311      	orrs	r1, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c82:	06d2      	lsls	r2, r2, #27
 8002c84:	430a      	orrs	r2, r1
 8002c86:	4912      	ldr	r1, [pc, #72]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0f      	ldr	r2, [pc, #60]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c98:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a0c      	ldr	r2, [pc, #48]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca4:	f7ff f83e 	bl	8001d24 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7ff f83a 	bl	8001d24 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e058      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <HAL_RCC_OscConfig+0x784>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cca:	e050      	b.n	8002d6e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e04f      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_OscConfig+0x82c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d144      	bne.n	8002d6e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ce4:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <HAL_RCC_OscConfig+0x82c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a23      	ldr	r2, [pc, #140]	; (8002d78 <HAL_RCC_OscConfig+0x82c>)
 8002cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_RCC_OscConfig+0x82c>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <HAL_RCC_OscConfig+0x82c>)
 8002cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cfc:	f7ff f812 	bl	8001d24 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d04:	f7ff f80e 	bl	8001d24 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e02c      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d16:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <HAL_RCC_OscConfig+0x82c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x7b8>
 8002d22:	e024      	b.n	8002d6e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b0c      	cmp	r3, #12
 8002d28:	d01f      	beq.n	8002d6a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_RCC_OscConfig+0x82c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <HAL_RCC_OscConfig+0x82c>)
 8002d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe fff5 	bl	8001d24 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe fff1 	bl	8001d24 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e00f      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_OscConfig+0x82c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_RCC_OscConfig+0x82c>)
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	4905      	ldr	r1, [pc, #20]	; (8002d78 <HAL_RCC_OscConfig+0x82c>)
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_RCC_OscConfig+0x830>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	60cb      	str	r3, [r1, #12]
 8002d68:	e001      	b.n	8002d6e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	feeefffc 	.word	0xfeeefffc

08002d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e11d      	b.n	8002fd4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b90      	ldr	r3, [pc, #576]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d910      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b8d      	ldr	r3, [pc, #564]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 020f 	bic.w	r2, r3, #15
 8002dae:	498b      	ldr	r1, [pc, #556]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b89      	ldr	r3, [pc, #548]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e105      	b.n	8002fd4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d010      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	4b81      	ldr	r3, [pc, #516]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d908      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de4:	4b7e      	ldr	r3, [pc, #504]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	497b      	ldr	r1, [pc, #492]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d079      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d11e      	bne.n	8002e48 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e0a:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0dc      	b.n	8002fd4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002e1a:	f000 fa09 	bl	8003230 <RCC_GetSysClockFreqFromPLLSource>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a70      	ldr	r2, [pc, #448]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d946      	bls.n	8002eb4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e26:	4b6e      	ldr	r3, [pc, #440]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d140      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e32:	4b6b      	ldr	r3, [pc, #428]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e3a:	4a69      	ldr	r2, [pc, #420]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	e035      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e50:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d115      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0b9      	b.n	8002fd4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e68:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0ad      	b.n	8002fd4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e78:	4b59      	ldr	r3, [pc, #356]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0a5      	b.n	8002fd4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e88:	f000 f8b4 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4a55      	ldr	r2, [pc, #340]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d90f      	bls.n	8002eb4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e94:	4b52      	ldr	r3, [pc, #328]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ea0:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ea8:	4a4d      	ldr	r2, [pc, #308]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb4:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f023 0203 	bic.w	r2, r3, #3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4947      	ldr	r1, [pc, #284]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec6:	f7fe ff2d 	bl	8001d24 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ece:	f7fe ff29 	bl	8001d24 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e077      	b.n	8002fd4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee4:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 020c 	and.w	r2, r3, #12
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d1eb      	bne.n	8002ece <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b80      	cmp	r3, #128	; 0x80
 8002efa:	d105      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002efc:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a37      	ldr	r2, [pc, #220]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f06:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d010      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d208      	bcs.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f24:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	492b      	ldr	r1, [pc, #172]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f36:	4b29      	ldr	r3, [pc, #164]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d210      	bcs.n	8002f66 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 020f 	bic.w	r2, r3, #15
 8002f4c:	4923      	ldr	r1, [pc, #140]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e036      	b.n	8002fd4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	4918      	ldr	r1, [pc, #96]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d009      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4910      	ldr	r1, [pc, #64]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa4:	f000 f826 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	490c      	ldr	r1, [pc, #48]	; (8002fe8 <HAL_RCC_ClockConfig+0x268>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_RCC_ClockConfig+0x26c>)
 8002fc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe fe5b 	bl	8001c84 <HAL_InitTick>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40022000 	.word	0x40022000
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	04c4b400 	.word	0x04c4b400
 8002fe8:	080061c4 	.word	0x080061c4
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003002:	4b3e      	ldr	r3, [pc, #248]	; (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800300c:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x34>
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d121      	bne.n	8003066 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d11e      	bne.n	8003066 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003028:	4b34      	ldr	r3, [pc, #208]	; (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003034:	4b31      	ldr	r3, [pc, #196]	; (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	e005      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003044:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003050:	4a2b      	ldr	r2, [pc, #172]	; (8003100 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003058:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10d      	bne.n	800307c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003064:	e00a      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d102      	bne.n	8003072 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <HAL_RCC_GetSysClockFreq+0x110>)
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	e004      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b08      	cmp	r3, #8
 8003076:	d101      	bne.n	800307c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <HAL_RCC_GetSysClockFreq+0x114>)
 800307a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d134      	bne.n	80030ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d003      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0xa6>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d003      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0xac>
 8003098:	e005      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <HAL_RCC_GetSysClockFreq+0x110>)
 800309c:	617b      	str	r3, [r7, #20]
      break;
 800309e:	e005      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_RCC_GetSysClockFreq+0x114>)
 80030a2:	617b      	str	r3, [r7, #20]
      break;
 80030a4:	e002      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	617b      	str	r3, [r7, #20]
      break;
 80030aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030ac:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3301      	adds	r3, #1
 80030b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	fb03 f202 	mul.w	r2, r3, r2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	0e5b      	lsrs	r3, r3, #25
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	3301      	adds	r3, #1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030ec:	69bb      	ldr	r3, [r7, #24]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3724      	adds	r7, #36	; 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	080061dc 	.word	0x080061dc
 8003104:	00f42400 	.word	0x00f42400
 8003108:	007a1200 	.word	0x007a1200

0800310c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_RCC_GetHCLKFreq+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000000 	.word	0x20000000

08003124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003128:	f7ff fff0 	bl	800310c <HAL_RCC_GetHCLKFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	0a1b      	lsrs	r3, r3, #8
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4904      	ldr	r1, [pc, #16]	; (800314c <HAL_RCC_GetPCLK1Freq+0x28>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	080061d4 	.word	0x080061d4

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003154:	f7ff ffda 	bl	800310c <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0adb      	lsrs	r3, r3, #11
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4904      	ldr	r1, [pc, #16]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	080061d4 	.word	0x080061d4

0800317c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003188:	4b27      	ldr	r3, [pc, #156]	; (8003228 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003194:	f7ff f906 	bl	80023a4 <HAL_PWREx_GetVoltageRange>
 8003198:	6178      	str	r0, [r7, #20]
 800319a:	e014      	b.n	80031c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800319c:	4b22      	ldr	r3, [pc, #136]	; (8003228 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	4a21      	ldr	r2, [pc, #132]	; (8003228 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a6:	6593      	str	r3, [r2, #88]	; 0x58
 80031a8:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031b4:	f7ff f8f6 	bl	80023a4 <HAL_PWREx_GetVoltageRange>
 80031b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	4a1a      	ldr	r2, [pc, #104]	; (8003228 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031cc:	d10b      	bne.n	80031e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b80      	cmp	r3, #128	; 0x80
 80031d2:	d913      	bls.n	80031fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2ba0      	cmp	r3, #160	; 0xa0
 80031d8:	d902      	bls.n	80031e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031da:	2302      	movs	r3, #2
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	e00d      	b.n	80031fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e0:	2301      	movs	r3, #1
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	e00a      	b.n	80031fc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b7f      	cmp	r3, #127	; 0x7f
 80031ea:	d902      	bls.n	80031f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031ec:	2302      	movs	r3, #2
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	e004      	b.n	80031fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b70      	cmp	r3, #112	; 0x70
 80031f6:	d101      	bne.n	80031fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031f8:	2301      	movs	r3, #1
 80031fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f023 020f 	bic.w	r2, r3, #15
 8003204:	4909      	ldr	r1, [pc, #36]	; (800322c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800320c:	4b07      	ldr	r3, [pc, #28]	; (800322c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	429a      	cmp	r2, r3
 8003218:	d001      	beq.n	800321e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	40022000 	.word	0x40022000

08003230 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003236:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d00b      	beq.n	800325e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b03      	cmp	r3, #3
 800324a:	d825      	bhi.n	8003298 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d008      	beq.n	8003264 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d11f      	bne.n	8003298 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800325a:	613b      	str	r3, [r7, #16]
    break;
 800325c:	e01f      	b.n	800329e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800325e:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003260:	613b      	str	r3, [r7, #16]
    break;
 8003262:	e01c      	b.n	800329e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003264:	4b21      	ldr	r3, [pc, #132]	; (80032ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d107      	bne.n	8003280 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003270:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	e005      	b.n	800328c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003280:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800328c:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003294:	613b      	str	r3, [r7, #16]
    break;
 8003296:	e002      	b.n	800329e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
    break;
 800329c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	3301      	adds	r3, #1
 80032aa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032ac:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	fb03 f202 	mul.w	r2, r3, r2
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	0e5b      	lsrs	r3, r3, #25
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	3301      	adds	r3, #1
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032de:	683b      	ldr	r3, [r7, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40021000 	.word	0x40021000
 80032f0:	00f42400 	.word	0x00f42400
 80032f4:	007a1200 	.word	0x007a1200
 80032f8:	080061dc 	.word	0x080061dc

080032fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003304:	2300      	movs	r3, #0
 8003306:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003308:	2300      	movs	r3, #0
 800330a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003314:	2b00      	cmp	r3, #0
 8003316:	d040      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800331c:	2b80      	cmp	r3, #128	; 0x80
 800331e:	d02a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003320:	2b80      	cmp	r3, #128	; 0x80
 8003322:	d825      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003324:	2b60      	cmp	r3, #96	; 0x60
 8003326:	d026      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003328:	2b60      	cmp	r3, #96	; 0x60
 800332a:	d821      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	d006      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	d81d      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003338:	2b20      	cmp	r3, #32
 800333a:	d010      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800333c:	e018      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800333e:	4b89      	ldr	r3, [pc, #548]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	4a88      	ldr	r2, [pc, #544]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800334a:	e015      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fb02 	bl	800395c <RCCEx_PLLSAI1_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800335c:	e00c      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3320      	adds	r3, #32
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fbed 	bl	8003b44 <RCCEx_PLLSAI2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800336e:	e003      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	74fb      	strb	r3, [r7, #19]
      break;
 8003374:	e000      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800337e:	4b79      	ldr	r3, [pc, #484]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003380:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003384:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800338c:	4975      	ldr	r1, [pc, #468]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003394:	e001      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d047      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ae:	d030      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b4:	d82a      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ba:	d02a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033c0:	d824      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c6:	d008      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xde>
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033cc:	d81e      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d6:	d010      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033d8:	e018      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033da:	4b62      	ldr	r3, [pc, #392]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4a61      	ldr	r2, [pc, #388]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033e6:	e015      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fab4 	bl	800395c <RCCEx_PLLSAI1_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033f8:	e00c      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3320      	adds	r3, #32
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fb9f 	bl	8003b44 <RCCEx_PLLSAI2_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800340a:	e003      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	74fb      	strb	r3, [r7, #19]
      break;
 8003410:	e000      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10b      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800341a:	4b52      	ldr	r3, [pc, #328]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800341c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	494e      	ldr	r1, [pc, #312]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003430:	e001      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003432:	7cfb      	ldrb	r3, [r7, #19]
 8003434:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 809f 	beq.w	8003582 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003444:	2300      	movs	r3, #0
 8003446:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003448:	4b46      	ldr	r3, [pc, #280]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003458:	2300      	movs	r3, #0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	4a40      	ldr	r2, [pc, #256]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003468:	6593      	str	r3, [r2, #88]	; 0x58
 800346a:	4b3e      	ldr	r3, [pc, #248]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003476:	2301      	movs	r3, #1
 8003478:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800347a:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a3a      	ldr	r2, [pc, #232]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003486:	f7fe fc4d 	bl	8001d24 <HAL_GetTick>
 800348a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800348c:	e009      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348e:	f7fe fc49 	bl	8001d24 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d902      	bls.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	74fb      	strb	r3, [r7, #19]
        break;
 80034a0:	e005      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034a2:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0ef      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80034ae:	7cfb      	ldrb	r3, [r7, #19]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d15b      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034be:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01f      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d019      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034d2:	4b24      	ldr	r3, [pc, #144]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034de:	4b21      	ldr	r3, [pc, #132]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ee:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f4:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034fe:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d016      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe fc08 	bl	8001d24 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003516:	e00b      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003518:	f7fe fc04 	bl	8001d24 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	; 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d902      	bls.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	74fb      	strb	r3, [r7, #19]
            break;
 800352e:	e006      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0ec      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800353e:	7cfb      	ldrb	r3, [r7, #19]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10c      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003544:	4b07      	ldr	r3, [pc, #28]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	4903      	ldr	r1, [pc, #12]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800355c:	e008      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	74bb      	strb	r3, [r7, #18]
 8003562:	e005      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003564:	40021000 	.word	0x40021000
 8003568:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003570:	7c7b      	ldrb	r3, [r7, #17]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d105      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003576:	4ba0      	ldr	r3, [pc, #640]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	4a9f      	ldr	r2, [pc, #636]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003580:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800358e:	4b9a      	ldr	r3, [pc, #616]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003594:	f023 0203 	bic.w	r2, r3, #3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359c:	4996      	ldr	r1, [pc, #600]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035b0:	4b91      	ldr	r3, [pc, #580]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f023 020c 	bic.w	r2, r3, #12
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	498e      	ldr	r1, [pc, #568]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035d2:	4b89      	ldr	r3, [pc, #548]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	4985      	ldr	r1, [pc, #532]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035f4:	4b80      	ldr	r3, [pc, #512]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003602:	497d      	ldr	r1, [pc, #500]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003616:	4b78      	ldr	r3, [pc, #480]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	4974      	ldr	r1, [pc, #464]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003638:	4b6f      	ldr	r3, [pc, #444]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003646:	496c      	ldr	r1, [pc, #432]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800365a:	4b67      	ldr	r3, [pc, #412]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003668:	4963      	ldr	r1, [pc, #396]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800367c:	4b5e      	ldr	r3, [pc, #376]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800368a:	495b      	ldr	r1, [pc, #364]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800369e:	4b56      	ldr	r3, [pc, #344]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ac:	4952      	ldr	r1, [pc, #328]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036c0:	4b4d      	ldr	r3, [pc, #308]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	494a      	ldr	r1, [pc, #296]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036e2:	4b45      	ldr	r3, [pc, #276]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	4941      	ldr	r1, [pc, #260]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003704:	4b3c      	ldr	r3, [pc, #240]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800370a:	f023 0203 	bic.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003712:	4939      	ldr	r1, [pc, #228]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d028      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003726:	4b34      	ldr	r3, [pc, #208]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003734:	4930      	ldr	r1, [pc, #192]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003744:	d106      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003746:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800374c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003750:	60d3      	str	r3, [r2, #12]
 8003752:	e011      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003758:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800375c:	d10c      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	2101      	movs	r1, #1
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f8f9 	bl	800395c <RCCEx_PLLSAI1_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d04d      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800378c:	d108      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800378e:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003790:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003794:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800379a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800379e:	e012      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80037a0:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037a6:	4a14      	ldr	r2, [pc, #80]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037ac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037be:	490e      	ldr	r1, [pc, #56]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ce:	d106      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037da:	60d3      	str	r3, [r2, #12]
 80037dc:	e020      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037e6:	d109      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a02      	ldr	r2, [pc, #8]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f2:	60d3      	str	r3, [r2, #12]
 80037f4:	e014      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003804:	d10c      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3304      	adds	r3, #4
 800380a:	2101      	movs	r1, #1
 800380c:	4618      	mov	r0, r3
 800380e:	f000 f8a5 	bl	800395c <RCCEx_PLLSAI1_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003816:	7cfb      	ldrb	r3, [r7, #19]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d028      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800382c:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383a:	4947      	ldr	r1, [pc, #284]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800384a:	d106      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800384c:	4b42      	ldr	r3, [pc, #264]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a41      	ldr	r2, [pc, #260]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003856:	60d3      	str	r3, [r2, #12]
 8003858:	e011      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800385e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003862:	d10c      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3304      	adds	r3, #4
 8003868:	2101      	movs	r1, #1
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f876 	bl	800395c <RCCEx_PLLSAI1_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800387a:	7cfb      	ldrb	r3, [r7, #19]
 800387c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01e      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800388a:	4b33      	ldr	r3, [pc, #204]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800389a:	492f      	ldr	r1, [pc, #188]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2102      	movs	r1, #2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f851 	bl	800395c <RCCEx_PLLSAI1_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038be:	7cfb      	ldrb	r3, [r7, #19]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038d4:	4b20      	ldr	r3, [pc, #128]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038da:	f023 0204 	bic.w	r2, r3, #4
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e4:	491c      	ldr	r1, [pc, #112]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038fe:	f023 0218 	bic.w	r2, r3, #24
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	4913      	ldr	r1, [pc, #76]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d017      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800391c:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392c:	490a      	ldr	r1, [pc, #40]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800393a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800393e:	d105      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800394a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800394c:	7cbb      	ldrb	r3, [r7, #18]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000

0800395c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800396a:	4b72      	ldr	r3, [pc, #456]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00e      	beq.n	8003994 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003976:	4b6f      	ldr	r3, [pc, #444]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0203 	and.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d103      	bne.n	800398e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
       ||
 800398a:	2b00      	cmp	r3, #0
 800398c:	d142      	bne.n	8003a14 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
 8003992:	e03f      	b.n	8003a14 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d018      	beq.n	80039ce <RCCEx_PLLSAI1_Config+0x72>
 800399c:	2b03      	cmp	r3, #3
 800399e:	d825      	bhi.n	80039ec <RCCEx_PLLSAI1_Config+0x90>
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d002      	beq.n	80039aa <RCCEx_PLLSAI1_Config+0x4e>
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d009      	beq.n	80039bc <RCCEx_PLLSAI1_Config+0x60>
 80039a8:	e020      	b.n	80039ec <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039aa:	4b62      	ldr	r3, [pc, #392]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d11d      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ba:	e01a      	b.n	80039f2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039bc:	4b5d      	ldr	r3, [pc, #372]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d116      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039cc:	e013      	b.n	80039f6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039ce:	4b59      	ldr	r3, [pc, #356]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039da:	4b56      	ldr	r3, [pc, #344]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ea:	e006      	b.n	80039fa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
      break;
 80039f0:	e004      	b.n	80039fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039f2:	bf00      	nop
 80039f4:	e002      	b.n	80039fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039f6:	bf00      	nop
 80039f8:	e000      	b.n	80039fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d108      	bne.n	8003a14 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003a02:	4b4c      	ldr	r3, [pc, #304]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f023 0203 	bic.w	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4949      	ldr	r1, [pc, #292]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f040 8086 	bne.w	8003b28 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a1c:	4b45      	ldr	r3, [pc, #276]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a44      	ldr	r2, [pc, #272]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a28:	f7fe f97c 	bl	8001d24 <HAL_GetTick>
 8003a2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a2e:	e009      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a30:	f7fe f978 	bl	8001d24 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d902      	bls.n	8003a44 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	73fb      	strb	r3, [r7, #15]
        break;
 8003a42:	e005      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a44:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ef      	bne.n	8003a30 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d168      	bne.n	8003b28 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d113      	bne.n	8003a84 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a5c:	4b35      	ldr	r3, [pc, #212]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	4b35      	ldr	r3, [pc, #212]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6892      	ldr	r2, [r2, #8]
 8003a68:	0211      	lsls	r1, r2, #8
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68d2      	ldr	r2, [r2, #12]
 8003a6e:	06d2      	lsls	r2, r2, #27
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6852      	ldr	r2, [r2, #4]
 8003a76:	3a01      	subs	r2, #1
 8003a78:	0112      	lsls	r2, r2, #4
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	492d      	ldr	r1, [pc, #180]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	610b      	str	r3, [r1, #16]
 8003a82:	e02d      	b.n	8003ae0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d115      	bne.n	8003ab6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a8a:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6892      	ldr	r2, [r2, #8]
 8003a96:	0211      	lsls	r1, r2, #8
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6912      	ldr	r2, [r2, #16]
 8003a9c:	0852      	lsrs	r2, r2, #1
 8003a9e:	3a01      	subs	r2, #1
 8003aa0:	0552      	lsls	r2, r2, #21
 8003aa2:	4311      	orrs	r1, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6852      	ldr	r2, [r2, #4]
 8003aa8:	3a01      	subs	r2, #1
 8003aaa:	0112      	lsls	r2, r2, #4
 8003aac:	430a      	orrs	r2, r1
 8003aae:	4921      	ldr	r1, [pc, #132]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	610b      	str	r3, [r1, #16]
 8003ab4:	e014      	b.n	8003ae0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ab6:	4b1f      	ldr	r3, [pc, #124]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6892      	ldr	r2, [r2, #8]
 8003ac2:	0211      	lsls	r1, r2, #8
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6952      	ldr	r2, [r2, #20]
 8003ac8:	0852      	lsrs	r2, r2, #1
 8003aca:	3a01      	subs	r2, #1
 8003acc:	0652      	lsls	r2, r2, #25
 8003ace:	4311      	orrs	r1, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6852      	ldr	r2, [r2, #4]
 8003ad4:	3a01      	subs	r2, #1
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	4916      	ldr	r1, [pc, #88]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ae0:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ae6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fe f91a 	bl	8001d24 <HAL_GetTick>
 8003af0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003af2:	e009      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003af4:	f7fe f916 	bl	8001d24 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d902      	bls.n	8003b08 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	73fb      	strb	r3, [r7, #15]
          break;
 8003b06:	e005      	b.n	8003b14 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ef      	beq.n	8003af4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	4904      	ldr	r1, [pc, #16]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	07ff800f 	.word	0x07ff800f
 8003b3c:	ff9f800f 	.word	0xff9f800f
 8003b40:	f9ff800f 	.word	0xf9ff800f

08003b44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b52:	4b72      	ldr	r3, [pc, #456]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00e      	beq.n	8003b7c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b5e:	4b6f      	ldr	r3, [pc, #444]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0203 	and.w	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d103      	bne.n	8003b76 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
       ||
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d142      	bne.n	8003bfc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	e03f      	b.n	8003bfc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d018      	beq.n	8003bb6 <RCCEx_PLLSAI2_Config+0x72>
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d825      	bhi.n	8003bd4 <RCCEx_PLLSAI2_Config+0x90>
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d002      	beq.n	8003b92 <RCCEx_PLLSAI2_Config+0x4e>
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d009      	beq.n	8003ba4 <RCCEx_PLLSAI2_Config+0x60>
 8003b90:	e020      	b.n	8003bd4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b92:	4b62      	ldr	r3, [pc, #392]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d11d      	bne.n	8003bda <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba2:	e01a      	b.n	8003bda <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ba4:	4b5d      	ldr	r3, [pc, #372]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d116      	bne.n	8003bde <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb4:	e013      	b.n	8003bde <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bb6:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10f      	bne.n	8003be2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bc2:	4b56      	ldr	r3, [pc, #344]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bd2:	e006      	b.n	8003be2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd8:	e004      	b.n	8003be4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e002      	b.n	8003be4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003be2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003bea:	4b4c      	ldr	r3, [pc, #304]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4949      	ldr	r1, [pc, #292]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f040 8086 	bne.w	8003d10 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c04:	4b45      	ldr	r3, [pc, #276]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a44      	ldr	r2, [pc, #272]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fe f888 	bl	8001d24 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c16:	e009      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c18:	f7fe f884 	bl	8001d24 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d902      	bls.n	8003c2c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	73fb      	strb	r3, [r7, #15]
        break;
 8003c2a:	e005      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c2c:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ef      	bne.n	8003c18 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d168      	bne.n	8003d10 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d113      	bne.n	8003c6c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c44:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	4b35      	ldr	r3, [pc, #212]	; (8003d20 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6892      	ldr	r2, [r2, #8]
 8003c50:	0211      	lsls	r1, r2, #8
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68d2      	ldr	r2, [r2, #12]
 8003c56:	06d2      	lsls	r2, r2, #27
 8003c58:	4311      	orrs	r1, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6852      	ldr	r2, [r2, #4]
 8003c5e:	3a01      	subs	r2, #1
 8003c60:	0112      	lsls	r2, r2, #4
 8003c62:	430a      	orrs	r2, r1
 8003c64:	492d      	ldr	r1, [pc, #180]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	614b      	str	r3, [r1, #20]
 8003c6a:	e02d      	b.n	8003cc8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d115      	bne.n	8003c9e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c72:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6892      	ldr	r2, [r2, #8]
 8003c7e:	0211      	lsls	r1, r2, #8
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6912      	ldr	r2, [r2, #16]
 8003c84:	0852      	lsrs	r2, r2, #1
 8003c86:	3a01      	subs	r2, #1
 8003c88:	0552      	lsls	r2, r2, #21
 8003c8a:	4311      	orrs	r1, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6852      	ldr	r2, [r2, #4]
 8003c90:	3a01      	subs	r2, #1
 8003c92:	0112      	lsls	r2, r2, #4
 8003c94:	430a      	orrs	r2, r1
 8003c96:	4921      	ldr	r1, [pc, #132]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	614b      	str	r3, [r1, #20]
 8003c9c:	e014      	b.n	8003cc8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c9e:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6892      	ldr	r2, [r2, #8]
 8003caa:	0211      	lsls	r1, r2, #8
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6952      	ldr	r2, [r2, #20]
 8003cb0:	0852      	lsrs	r2, r2, #1
 8003cb2:	3a01      	subs	r2, #1
 8003cb4:	0652      	lsls	r2, r2, #25
 8003cb6:	4311      	orrs	r1, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6852      	ldr	r2, [r2, #4]
 8003cbc:	3a01      	subs	r2, #1
 8003cbe:	0112      	lsls	r2, r2, #4
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	4916      	ldr	r1, [pc, #88]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fe f826 	bl	8001d24 <HAL_GetTick>
 8003cd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cda:	e009      	b.n	8003cf0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cdc:	f7fe f822 	bl	8001d24 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d902      	bls.n	8003cf0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	73fb      	strb	r3, [r7, #15]
          break;
 8003cee:	e005      	b.n	8003cfc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	4904      	ldr	r1, [pc, #16]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	07ff800f 	.word	0x07ff800f
 8003d24:	ff9f800f 	.word	0xff9f800f
 8003d28:	f9ff800f 	.word	0xf9ff800f

08003d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e042      	b.n	8003dc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fd feaf 	bl	8001ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2224      	movs	r2, #36	; 0x24
 8003d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 faa4 	bl	80042bc <UART_SetConfig>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e022      	b.n	8003dc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fd94 	bl	80048b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fe1b 	bl	80049f8 <UART_CheckIdleState>
 8003dc2:	4603      	mov	r3, r0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	; 0x28
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	f040 8084 	bne.w	8003ef0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_UART_Transmit+0x28>
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e07c      	b.n	8003ef2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_UART_Transmit+0x3a>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e075      	b.n	8003ef2 <HAL_UART_Transmit+0x126>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2221      	movs	r2, #33	; 0x21
 8003e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e1e:	f7fd ff81 	bl	8001d24 <HAL_GetTick>
 8003e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3c:	d108      	bne.n	8003e50 <HAL_UART_Transmit+0x84>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d104      	bne.n	8003e50 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	e003      	b.n	8003e58 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003e60:	e02d      	b.n	8003ebe <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2180      	movs	r1, #128	; 0x80
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fe0e 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e03a      	b.n	8003ef2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	881a      	ldrh	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e8e:	b292      	uxth	r2, r2
 8003e90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	3302      	adds	r3, #2
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	e008      	b.n	8003eac <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	b292      	uxth	r2, r2
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1cb      	bne.n	8003e62 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2140      	movs	r1, #64	; 0x40
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fdda 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e006      	b.n	8003ef2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e000      	b.n	8003ef2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003ef0:	2302      	movs	r3, #2
  }
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b08a      	sub	sp, #40	; 0x28
 8003efe:	af02      	add	r7, sp, #8
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	f040 80c1 	bne.w	8004098 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_UART_Receive+0x28>
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e0b9      	b.n	800409a <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_UART_Receive+0x3a>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e0b2      	b.n	800409a <HAL_UART_Receive+0x1a0>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2222      	movs	r2, #34	; 0x22
 8003f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f52:	f7fd fee7 	bl	8001d24 <HAL_GetTick>
 8003f56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	88fa      	ldrh	r2, [r7, #6]
 8003f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	88fa      	ldrh	r2, [r7, #6]
 8003f64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f70:	d10e      	bne.n	8003f90 <HAL_UART_Receive+0x96>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d105      	bne.n	8003f86 <HAL_UART_Receive+0x8c>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f84:	e02d      	b.n	8003fe2 <HAL_UART_Receive+0xe8>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	22ff      	movs	r2, #255	; 0xff
 8003f8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f8e:	e028      	b.n	8003fe2 <HAL_UART_Receive+0xe8>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10d      	bne.n	8003fb4 <HAL_UART_Receive+0xba>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d104      	bne.n	8003faa <HAL_UART_Receive+0xb0>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	22ff      	movs	r2, #255	; 0xff
 8003fa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003fa8:	e01b      	b.n	8003fe2 <HAL_UART_Receive+0xe8>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	227f      	movs	r2, #127	; 0x7f
 8003fae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003fb2:	e016      	b.n	8003fe2 <HAL_UART_Receive+0xe8>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fbc:	d10d      	bne.n	8003fda <HAL_UART_Receive+0xe0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <HAL_UART_Receive+0xd6>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	227f      	movs	r2, #127	; 0x7f
 8003fca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003fce:	e008      	b.n	8003fe2 <HAL_UART_Receive+0xe8>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	223f      	movs	r2, #63	; 0x3f
 8003fd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003fd8:	e003      	b.n	8003fe2 <HAL_UART_Receive+0xe8>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003fe8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff2:	d108      	bne.n	8004006 <HAL_UART_Receive+0x10c>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d104      	bne.n	8004006 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	61bb      	str	r3, [r7, #24]
 8004004:	e003      	b.n	800400e <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004016:	e033      	b.n	8004080 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	2120      	movs	r1, #32
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fd33 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e033      	b.n	800409a <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10c      	bne.n	8004052 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800403e:	b29a      	uxth	r2, r3
 8004040:	8a7b      	ldrh	r3, [r7, #18]
 8004042:	4013      	ands	r3, r2
 8004044:	b29a      	uxth	r2, r3
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	3302      	adds	r3, #2
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e00d      	b.n	800406e <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004058:	b29b      	uxth	r3, r3
 800405a:	b2da      	uxtb	r2, r3
 800405c:	8a7b      	ldrh	r3, [r7, #18]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	4013      	ands	r3, r2
 8004062:	b2da      	uxtb	r2, r3
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	3301      	adds	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1c5      	bne.n	8004018 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e000      	b.n	800409a <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8004098:	2302      	movs	r3, #2
  }
}
 800409a:	4618      	mov	r0, r3
 800409c:	3720      	adds	r7, #32
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b0a0      	sub	sp, #128	; 0x80
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80040b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ba:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80040be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ca:	667a      	str	r2, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80040ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80040d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e6      	bne.n	80040aa <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3308      	adds	r3, #8
 80040e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80040ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ee:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004100:	657a      	str	r2, [r7, #84]	; 0x54
 8004102:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004106:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800410e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e3      	bne.n	80040dc <HAL_UART_Abort+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d118      	bne.n	800414e <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	f023 0310 	bic.w	r3, r3, #16
 8004130:	677b      	str	r3, [r7, #116]	; 0x74
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413a:	643b      	str	r3, [r7, #64]	; 0x40
 800413c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e6      	bne.n	800411c <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d137      	bne.n	80041cc <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3308      	adds	r3, #8
 8004162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	61fb      	str	r3, [r7, #28]
   return(result);
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004172:	673b      	str	r3, [r7, #112]	; 0x70
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3308      	adds	r3, #8
 800417a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800417c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004194:	2b00      	cmp	r3, #0
 8004196:	d019      	beq.n	80041cc <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800419c:	2200      	movs	r2, #0
 800419e:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fd fed2 	bl	8001f4e <HAL_DMA_Abort>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00d      	beq.n	80041cc <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fd ff26 	bl	8002006 <HAL_DMA_GetError>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d105      	bne.n	80041cc <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2210      	movs	r2, #16
 80041c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e073      	b.n	80042b4 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d137      	bne.n	800424a <HAL_UART_Abort+0x1a8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3308      	adds	r3, #8
 80041e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3308      	adds	r3, #8
 80041f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041fa:	61ba      	str	r2, [r7, #24]
 80041fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6979      	ldr	r1, [r7, #20]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	613b      	str	r3, [r7, #16]
   return(result);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e5      	bne.n	80041da <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d019      	beq.n	800424a <HAL_UART_Abort+0x1a8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800421a:	2200      	movs	r2, #0
 800421c:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004222:	4618      	mov	r0, r3
 8004224:	f7fd fe93 	bl	8001f4e <HAL_DMA_Abort>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <HAL_UART_Abort+0x1a8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004232:	4618      	mov	r0, r3
 8004234:	f7fd fee7 	bl	8002006 <HAL_DMA_GetError>
 8004238:	4603      	mov	r3, r0
 800423a:	2b20      	cmp	r3, #32
 800423c:	d105      	bne.n	800424a <HAL_UART_Abort+0x1a8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2210      	movs	r2, #16
 8004242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e034      	b.n	80042b4 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	220f      	movs	r2, #15
 8004260:	621a      	str	r2, [r3, #32]

#if defined(USART_CR1_FIFOEN)
  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800426a:	d109      	bne.n	8004280 <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	8b1b      	ldrh	r3, [r3, #24]
 8004272:	b29a      	uxth	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0210 	orr.w	r2, r2, #16
 800427c:	b292      	uxth	r2, r2
 800427e:	831a      	strh	r2, [r3, #24]
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	8b1b      	ldrh	r3, [r3, #24]
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0208 	orr.w	r2, r2, #8
 8004290:	b292      	uxth	r2, r2
 8004292:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3780      	adds	r7, #128	; 0x80
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c0:	b08c      	sub	sp, #48	; 0x30
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	431a      	orrs	r2, r3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	431a      	orrs	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4baa      	ldr	r3, [pc, #680]	; (8004594 <UART_SetConfig+0x2d8>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042f4:	430b      	orrs	r3, r1
 80042f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a9f      	ldr	r2, [pc, #636]	; (8004598 <UART_SetConfig+0x2dc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004324:	4313      	orrs	r3, r2
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004332:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800433c:	430b      	orrs	r3, r1
 800433e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	f023 010f 	bic.w	r1, r3, #15
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a90      	ldr	r2, [pc, #576]	; (800459c <UART_SetConfig+0x2e0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d125      	bne.n	80043ac <UART_SetConfig+0xf0>
 8004360:	4b8f      	ldr	r3, [pc, #572]	; (80045a0 <UART_SetConfig+0x2e4>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b03      	cmp	r3, #3
 800436c:	d81a      	bhi.n	80043a4 <UART_SetConfig+0xe8>
 800436e:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <UART_SetConfig+0xb8>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	08004385 	.word	0x08004385
 8004378:	08004395 	.word	0x08004395
 800437c:	0800438d 	.word	0x0800438d
 8004380:	0800439d 	.word	0x0800439d
 8004384:	2301      	movs	r3, #1
 8004386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800438a:	e116      	b.n	80045ba <UART_SetConfig+0x2fe>
 800438c:	2302      	movs	r3, #2
 800438e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004392:	e112      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004394:	2304      	movs	r3, #4
 8004396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800439a:	e10e      	b.n	80045ba <UART_SetConfig+0x2fe>
 800439c:	2308      	movs	r3, #8
 800439e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043a2:	e10a      	b.n	80045ba <UART_SetConfig+0x2fe>
 80043a4:	2310      	movs	r3, #16
 80043a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043aa:	e106      	b.n	80045ba <UART_SetConfig+0x2fe>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a7c      	ldr	r2, [pc, #496]	; (80045a4 <UART_SetConfig+0x2e8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d138      	bne.n	8004428 <UART_SetConfig+0x16c>
 80043b6:	4b7a      	ldr	r3, [pc, #488]	; (80045a0 <UART_SetConfig+0x2e4>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d82d      	bhi.n	8004420 <UART_SetConfig+0x164>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <UART_SetConfig+0x110>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	08004401 	.word	0x08004401
 80043d0:	08004421 	.word	0x08004421
 80043d4:	08004421 	.word	0x08004421
 80043d8:	08004421 	.word	0x08004421
 80043dc:	08004411 	.word	0x08004411
 80043e0:	08004421 	.word	0x08004421
 80043e4:	08004421 	.word	0x08004421
 80043e8:	08004421 	.word	0x08004421
 80043ec:	08004409 	.word	0x08004409
 80043f0:	08004421 	.word	0x08004421
 80043f4:	08004421 	.word	0x08004421
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004419 	.word	0x08004419
 8004400:	2300      	movs	r3, #0
 8004402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004406:	e0d8      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004408:	2302      	movs	r3, #2
 800440a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800440e:	e0d4      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004410:	2304      	movs	r3, #4
 8004412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004416:	e0d0      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004418:	2308      	movs	r3, #8
 800441a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800441e:	e0cc      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004420:	2310      	movs	r3, #16
 8004422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004426:	e0c8      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a5e      	ldr	r2, [pc, #376]	; (80045a8 <UART_SetConfig+0x2ec>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d125      	bne.n	800447e <UART_SetConfig+0x1c2>
 8004432:	4b5b      	ldr	r3, [pc, #364]	; (80045a0 <UART_SetConfig+0x2e4>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800443c:	2b30      	cmp	r3, #48	; 0x30
 800443e:	d016      	beq.n	800446e <UART_SetConfig+0x1b2>
 8004440:	2b30      	cmp	r3, #48	; 0x30
 8004442:	d818      	bhi.n	8004476 <UART_SetConfig+0x1ba>
 8004444:	2b20      	cmp	r3, #32
 8004446:	d00a      	beq.n	800445e <UART_SetConfig+0x1a2>
 8004448:	2b20      	cmp	r3, #32
 800444a:	d814      	bhi.n	8004476 <UART_SetConfig+0x1ba>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <UART_SetConfig+0x19a>
 8004450:	2b10      	cmp	r3, #16
 8004452:	d008      	beq.n	8004466 <UART_SetConfig+0x1aa>
 8004454:	e00f      	b.n	8004476 <UART_SetConfig+0x1ba>
 8004456:	2300      	movs	r3, #0
 8004458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445c:	e0ad      	b.n	80045ba <UART_SetConfig+0x2fe>
 800445e:	2302      	movs	r3, #2
 8004460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004464:	e0a9      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004466:	2304      	movs	r3, #4
 8004468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800446c:	e0a5      	b.n	80045ba <UART_SetConfig+0x2fe>
 800446e:	2308      	movs	r3, #8
 8004470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004474:	e0a1      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004476:	2310      	movs	r3, #16
 8004478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800447c:	e09d      	b.n	80045ba <UART_SetConfig+0x2fe>
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a4a      	ldr	r2, [pc, #296]	; (80045ac <UART_SetConfig+0x2f0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d125      	bne.n	80044d4 <UART_SetConfig+0x218>
 8004488:	4b45      	ldr	r3, [pc, #276]	; (80045a0 <UART_SetConfig+0x2e4>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004492:	2bc0      	cmp	r3, #192	; 0xc0
 8004494:	d016      	beq.n	80044c4 <UART_SetConfig+0x208>
 8004496:	2bc0      	cmp	r3, #192	; 0xc0
 8004498:	d818      	bhi.n	80044cc <UART_SetConfig+0x210>
 800449a:	2b80      	cmp	r3, #128	; 0x80
 800449c:	d00a      	beq.n	80044b4 <UART_SetConfig+0x1f8>
 800449e:	2b80      	cmp	r3, #128	; 0x80
 80044a0:	d814      	bhi.n	80044cc <UART_SetConfig+0x210>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <UART_SetConfig+0x1f0>
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d008      	beq.n	80044bc <UART_SetConfig+0x200>
 80044aa:	e00f      	b.n	80044cc <UART_SetConfig+0x210>
 80044ac:	2300      	movs	r3, #0
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b2:	e082      	b.n	80045ba <UART_SetConfig+0x2fe>
 80044b4:	2302      	movs	r3, #2
 80044b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ba:	e07e      	b.n	80045ba <UART_SetConfig+0x2fe>
 80044bc:	2304      	movs	r3, #4
 80044be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044c2:	e07a      	b.n	80045ba <UART_SetConfig+0x2fe>
 80044c4:	2308      	movs	r3, #8
 80044c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ca:	e076      	b.n	80045ba <UART_SetConfig+0x2fe>
 80044cc:	2310      	movs	r3, #16
 80044ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044d2:	e072      	b.n	80045ba <UART_SetConfig+0x2fe>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a35      	ldr	r2, [pc, #212]	; (80045b0 <UART_SetConfig+0x2f4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d12a      	bne.n	8004534 <UART_SetConfig+0x278>
 80044de:	4b30      	ldr	r3, [pc, #192]	; (80045a0 <UART_SetConfig+0x2e4>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ec:	d01a      	beq.n	8004524 <UART_SetConfig+0x268>
 80044ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f2:	d81b      	bhi.n	800452c <UART_SetConfig+0x270>
 80044f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f8:	d00c      	beq.n	8004514 <UART_SetConfig+0x258>
 80044fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044fe:	d815      	bhi.n	800452c <UART_SetConfig+0x270>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <UART_SetConfig+0x250>
 8004504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004508:	d008      	beq.n	800451c <UART_SetConfig+0x260>
 800450a:	e00f      	b.n	800452c <UART_SetConfig+0x270>
 800450c:	2300      	movs	r3, #0
 800450e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004512:	e052      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004514:	2302      	movs	r3, #2
 8004516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800451a:	e04e      	b.n	80045ba <UART_SetConfig+0x2fe>
 800451c:	2304      	movs	r3, #4
 800451e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004522:	e04a      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004524:	2308      	movs	r3, #8
 8004526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800452a:	e046      	b.n	80045ba <UART_SetConfig+0x2fe>
 800452c:	2310      	movs	r3, #16
 800452e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004532:	e042      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a17      	ldr	r2, [pc, #92]	; (8004598 <UART_SetConfig+0x2dc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d13a      	bne.n	80045b4 <UART_SetConfig+0x2f8>
 800453e:	4b18      	ldr	r3, [pc, #96]	; (80045a0 <UART_SetConfig+0x2e4>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800454c:	d01a      	beq.n	8004584 <UART_SetConfig+0x2c8>
 800454e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004552:	d81b      	bhi.n	800458c <UART_SetConfig+0x2d0>
 8004554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004558:	d00c      	beq.n	8004574 <UART_SetConfig+0x2b8>
 800455a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455e:	d815      	bhi.n	800458c <UART_SetConfig+0x2d0>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <UART_SetConfig+0x2b0>
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004568:	d008      	beq.n	800457c <UART_SetConfig+0x2c0>
 800456a:	e00f      	b.n	800458c <UART_SetConfig+0x2d0>
 800456c:	2300      	movs	r3, #0
 800456e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004572:	e022      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004574:	2302      	movs	r3, #2
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457a:	e01e      	b.n	80045ba <UART_SetConfig+0x2fe>
 800457c:	2304      	movs	r3, #4
 800457e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004582:	e01a      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004584:	2308      	movs	r3, #8
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800458a:	e016      	b.n	80045ba <UART_SetConfig+0x2fe>
 800458c:	2310      	movs	r3, #16
 800458e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004592:	e012      	b.n	80045ba <UART_SetConfig+0x2fe>
 8004594:	cfff69f3 	.word	0xcfff69f3
 8004598:	40008000 	.word	0x40008000
 800459c:	40013800 	.word	0x40013800
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40004400 	.word	0x40004400
 80045a8:	40004800 	.word	0x40004800
 80045ac:	40004c00 	.word	0x40004c00
 80045b0:	40005000 	.word	0x40005000
 80045b4:	2310      	movs	r3, #16
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4aae      	ldr	r2, [pc, #696]	; (8004878 <UART_SetConfig+0x5bc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	f040 8097 	bne.w	80046f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d823      	bhi.n	8004616 <UART_SetConfig+0x35a>
 80045ce:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <UART_SetConfig+0x318>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	080045f9 	.word	0x080045f9
 80045d8:	08004617 	.word	0x08004617
 80045dc:	08004601 	.word	0x08004601
 80045e0:	08004617 	.word	0x08004617
 80045e4:	08004607 	.word	0x08004607
 80045e8:	08004617 	.word	0x08004617
 80045ec:	08004617 	.word	0x08004617
 80045f0:	08004617 	.word	0x08004617
 80045f4:	0800460f 	.word	0x0800460f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f8:	f7fe fd94 	bl	8003124 <HAL_RCC_GetPCLK1Freq>
 80045fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045fe:	e010      	b.n	8004622 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004600:	4b9e      	ldr	r3, [pc, #632]	; (800487c <UART_SetConfig+0x5c0>)
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004604:	e00d      	b.n	8004622 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004606:	f7fe fcf5 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 800460a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800460c:	e009      	b.n	8004622 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004614:	e005      	b.n	8004622 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004620:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8130 	beq.w	800488a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	4a94      	ldr	r2, [pc, #592]	; (8004880 <UART_SetConfig+0x5c4>)
 8004630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004634:	461a      	mov	r2, r3
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	fbb3 f3f2 	udiv	r3, r3, r2
 800463c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	4613      	mov	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4413      	add	r3, r2
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	429a      	cmp	r2, r3
 800464c:	d305      	bcc.n	800465a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	429a      	cmp	r2, r3
 8004658:	d903      	bls.n	8004662 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004660:	e113      	b.n	800488a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	2200      	movs	r2, #0
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	60fa      	str	r2, [r7, #12]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	4a84      	ldr	r2, [pc, #528]	; (8004880 <UART_SetConfig+0x5c4>)
 8004670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004674:	b29b      	uxth	r3, r3
 8004676:	2200      	movs	r2, #0
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004680:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004684:	f7fb fe0c 	bl	80002a0 <__aeabi_uldivmod>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	020b      	lsls	r3, r1, #8
 800469a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800469e:	0202      	lsls	r2, r0, #8
 80046a0:	6979      	ldr	r1, [r7, #20]
 80046a2:	6849      	ldr	r1, [r1, #4]
 80046a4:	0849      	lsrs	r1, r1, #1
 80046a6:	2000      	movs	r0, #0
 80046a8:	460c      	mov	r4, r1
 80046aa:	4605      	mov	r5, r0
 80046ac:	eb12 0804 	adds.w	r8, r2, r4
 80046b0:	eb43 0905 	adc.w	r9, r3, r5
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	469a      	mov	sl, r3
 80046bc:	4693      	mov	fp, r2
 80046be:	4652      	mov	r2, sl
 80046c0:	465b      	mov	r3, fp
 80046c2:	4640      	mov	r0, r8
 80046c4:	4649      	mov	r1, r9
 80046c6:	f7fb fdeb 	bl	80002a0 <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4613      	mov	r3, r2
 80046d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d8:	d308      	bcc.n	80046ec <UART_SetConfig+0x430>
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e0:	d204      	bcs.n	80046ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a3a      	ldr	r2, [r7, #32]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	e0ce      	b.n	800488a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046f2:	e0ca      	b.n	800488a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fc:	d166      	bne.n	80047cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80046fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004702:	2b08      	cmp	r3, #8
 8004704:	d827      	bhi.n	8004756 <UART_SetConfig+0x49a>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0x450>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004731 	.word	0x08004731
 8004710:	08004739 	.word	0x08004739
 8004714:	08004741 	.word	0x08004741
 8004718:	08004757 	.word	0x08004757
 800471c:	08004747 	.word	0x08004747
 8004720:	08004757 	.word	0x08004757
 8004724:	08004757 	.word	0x08004757
 8004728:	08004757 	.word	0x08004757
 800472c:	0800474f 	.word	0x0800474f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004730:	f7fe fcf8 	bl	8003124 <HAL_RCC_GetPCLK1Freq>
 8004734:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004736:	e014      	b.n	8004762 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004738:	f7fe fd0a 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 800473c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800473e:	e010      	b.n	8004762 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004740:	4b4e      	ldr	r3, [pc, #312]	; (800487c <UART_SetConfig+0x5c0>)
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004744:	e00d      	b.n	8004762 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004746:	f7fe fc55 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 800474a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800474c:	e009      	b.n	8004762 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004754:	e005      	b.n	8004762 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004760:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8090 	beq.w	800488a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	4a44      	ldr	r2, [pc, #272]	; (8004880 <UART_SetConfig+0x5c4>)
 8004770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004774:	461a      	mov	r2, r3
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	fbb3 f3f2 	udiv	r3, r3, r2
 800477c:	005a      	lsls	r2, r3, #1
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	441a      	add	r2, r3
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	2b0f      	cmp	r3, #15
 8004794:	d916      	bls.n	80047c4 <UART_SetConfig+0x508>
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800479c:	d212      	bcs.n	80047c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	f023 030f 	bic.w	r3, r3, #15
 80047a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	8bfb      	ldrh	r3, [r7, #30]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	8bfa      	ldrh	r2, [r7, #30]
 80047c0:	60da      	str	r2, [r3, #12]
 80047c2:	e062      	b.n	800488a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047ca:	e05e      	b.n	800488a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d828      	bhi.n	8004826 <UART_SetConfig+0x56a>
 80047d4:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <UART_SetConfig+0x520>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	08004801 	.word	0x08004801
 80047e0:	08004809 	.word	0x08004809
 80047e4:	08004811 	.word	0x08004811
 80047e8:	08004827 	.word	0x08004827
 80047ec:	08004817 	.word	0x08004817
 80047f0:	08004827 	.word	0x08004827
 80047f4:	08004827 	.word	0x08004827
 80047f8:	08004827 	.word	0x08004827
 80047fc:	0800481f 	.word	0x0800481f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004800:	f7fe fc90 	bl	8003124 <HAL_RCC_GetPCLK1Freq>
 8004804:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004806:	e014      	b.n	8004832 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7fe fca2 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 800480c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800480e:	e010      	b.n	8004832 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004810:	4b1a      	ldr	r3, [pc, #104]	; (800487c <UART_SetConfig+0x5c0>)
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004814:	e00d      	b.n	8004832 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004816:	f7fe fbed 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 800481a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800481c:	e009      	b.n	8004832 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004824:	e005      	b.n	8004832 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004830:	bf00      	nop
    }

    if (pclk != 0U)
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	2b00      	cmp	r3, #0
 8004836:	d028      	beq.n	800488a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	4a10      	ldr	r2, [pc, #64]	; (8004880 <UART_SetConfig+0x5c4>)
 800483e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004842:	461a      	mov	r2, r3
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	fbb3 f2f2 	udiv	r2, r3, r2
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	441a      	add	r2, r3
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	fbb2 f3f3 	udiv	r3, r2, r3
 800485a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2b0f      	cmp	r3, #15
 8004860:	d910      	bls.n	8004884 <UART_SetConfig+0x5c8>
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004868:	d20c      	bcs.n	8004884 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	b29a      	uxth	r2, r3
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60da      	str	r2, [r3, #12]
 8004874:	e009      	b.n	800488a <UART_SetConfig+0x5ce>
 8004876:	bf00      	nop
 8004878:	40008000 	.word	0x40008000
 800487c:	00f42400 	.word	0x00f42400
 8004880:	0800620c 	.word	0x0800620c
      }
      else
      {
        ret = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2201      	movs	r2, #1
 800488e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2201      	movs	r2, #1
 8004896:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2200      	movs	r2, #0
 800489e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2200      	movs	r2, #0
 80048a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80048a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3730      	adds	r7, #48	; 0x30
 80048ae:	46bd      	mov	sp, r7
 80048b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080048b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01a      	beq.n	80049ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b2:	d10a      	bne.n	80049ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a08:	f7fd f98c 	bl	8001d24 <HAL_GetTick>
 8004a0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d10e      	bne.n	8004a3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f82f 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e025      	b.n	8004a86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d10e      	bne.n	8004a66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f819 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e00f      	b.n	8004a86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b09c      	sub	sp, #112	; 0x70
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9e:	e0a9      	b.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	f000 80a5 	beq.w	8004bf4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fd f93b 	bl	8001d24 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004aba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d140      	bne.n	8004b42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ad4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ae4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e6      	bne.n	8004ac0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3308      	adds	r3, #8
 8004af8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	663b      	str	r3, [r7, #96]	; 0x60
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b12:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e5      	bne.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e069      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d051      	beq.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5e:	d149      	bne.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b88:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e6      	bne.n	8004b6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	613b      	str	r3, [r7, #16]
   return(result);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bbc:	623a      	str	r2, [r7, #32]
 8004bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	69f9      	ldr	r1, [r7, #28]
 8004bc2:	6a3a      	ldr	r2, [r7, #32]
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e5      	bne.n	8004b9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e010      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	f43f af46 	beq.w	8004aa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3770      	adds	r7, #112	; 0x70
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b085      	sub	sp, #20
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_UARTEx_DisableFifoMode+0x16>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e027      	b.n	8004c84 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	; 0x24
 8004c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0201 	bic.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e02d      	b.n	8004d04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	; 0x24
 8004cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0201 	bic.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f84f 	bl	8004d88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e02d      	b.n	8004d80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2224      	movs	r2, #36	; 0x24
 8004d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f811 	bl	8004d88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d108      	bne.n	8004daa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004da8:	e031      	b.n	8004e0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004daa:	2308      	movs	r3, #8
 8004dac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004dae:	2308      	movs	r3, #8
 8004db0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	0e5b      	lsrs	r3, r3, #25
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	0f5b      	lsrs	r3, r3, #29
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dd2:	7bbb      	ldrb	r3, [r7, #14]
 8004dd4:	7b3a      	ldrb	r2, [r7, #12]
 8004dd6:	4911      	ldr	r1, [pc, #68]	; (8004e1c <UARTEx_SetNbDataToProcess+0x94>)
 8004dd8:	5c8a      	ldrb	r2, [r1, r2]
 8004dda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004dde:	7b3a      	ldrb	r2, [r7, #12]
 8004de0:	490f      	ldr	r1, [pc, #60]	; (8004e20 <UARTEx_SetNbDataToProcess+0x98>)
 8004de2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004de4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	7b7a      	ldrb	r2, [r7, #13]
 8004df4:	4909      	ldr	r1, [pc, #36]	; (8004e1c <UARTEx_SetNbDataToProcess+0x94>)
 8004df6:	5c8a      	ldrb	r2, [r1, r2]
 8004df8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004dfc:	7b7a      	ldrb	r2, [r7, #13]
 8004dfe:	4908      	ldr	r1, [pc, #32]	; (8004e20 <UARTEx_SetNbDataToProcess+0x98>)
 8004e00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e02:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	08006224 	.word	0x08006224
 8004e20:	0800622c 	.word	0x0800622c

08004e24 <malloc>:
 8004e24:	4b02      	ldr	r3, [pc, #8]	; (8004e30 <malloc+0xc>)
 8004e26:	4601      	mov	r1, r0
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	f000 b82b 	b.w	8004e84 <_malloc_r>
 8004e2e:	bf00      	nop
 8004e30:	20000064 	.word	0x20000064

08004e34 <free>:
 8004e34:	4b02      	ldr	r3, [pc, #8]	; (8004e40 <free+0xc>)
 8004e36:	4601      	mov	r1, r0
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	f000 bb4b 	b.w	80054d4 <_free_r>
 8004e3e:	bf00      	nop
 8004e40:	20000064 	.word	0x20000064

08004e44 <sbrk_aligned>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4e0e      	ldr	r6, [pc, #56]	; (8004e80 <sbrk_aligned+0x3c>)
 8004e48:	460c      	mov	r4, r1
 8004e4a:	6831      	ldr	r1, [r6, #0]
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	b911      	cbnz	r1, 8004e56 <sbrk_aligned+0x12>
 8004e50:	f000 faf0 	bl	8005434 <_sbrk_r>
 8004e54:	6030      	str	r0, [r6, #0]
 8004e56:	4621      	mov	r1, r4
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f000 faeb 	bl	8005434 <_sbrk_r>
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	d00a      	beq.n	8004e78 <sbrk_aligned+0x34>
 8004e62:	1cc4      	adds	r4, r0, #3
 8004e64:	f024 0403 	bic.w	r4, r4, #3
 8004e68:	42a0      	cmp	r0, r4
 8004e6a:	d007      	beq.n	8004e7c <sbrk_aligned+0x38>
 8004e6c:	1a21      	subs	r1, r4, r0
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f000 fae0 	bl	8005434 <_sbrk_r>
 8004e74:	3001      	adds	r0, #1
 8004e76:	d101      	bne.n	8004e7c <sbrk_aligned+0x38>
 8004e78:	f04f 34ff 	mov.w	r4, #4294967295
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	200001e8 	.word	0x200001e8

08004e84 <_malloc_r>:
 8004e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e88:	1ccd      	adds	r5, r1, #3
 8004e8a:	f025 0503 	bic.w	r5, r5, #3
 8004e8e:	3508      	adds	r5, #8
 8004e90:	2d0c      	cmp	r5, #12
 8004e92:	bf38      	it	cc
 8004e94:	250c      	movcc	r5, #12
 8004e96:	2d00      	cmp	r5, #0
 8004e98:	4607      	mov	r7, r0
 8004e9a:	db01      	blt.n	8004ea0 <_malloc_r+0x1c>
 8004e9c:	42a9      	cmp	r1, r5
 8004e9e:	d905      	bls.n	8004eac <_malloc_r+0x28>
 8004ea0:	230c      	movs	r3, #12
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	2600      	movs	r6, #0
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f80 <_malloc_r+0xfc>
 8004eb0:	f000 f868 	bl	8004f84 <__malloc_lock>
 8004eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8004eb8:	461c      	mov	r4, r3
 8004eba:	bb5c      	cbnz	r4, 8004f14 <_malloc_r+0x90>
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	f7ff ffc0 	bl	8004e44 <sbrk_aligned>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	d155      	bne.n	8004f76 <_malloc_r+0xf2>
 8004eca:	f8d8 4000 	ldr.w	r4, [r8]
 8004ece:	4626      	mov	r6, r4
 8004ed0:	2e00      	cmp	r6, #0
 8004ed2:	d145      	bne.n	8004f60 <_malloc_r+0xdc>
 8004ed4:	2c00      	cmp	r4, #0
 8004ed6:	d048      	beq.n	8004f6a <_malloc_r+0xe6>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	4631      	mov	r1, r6
 8004edc:	4638      	mov	r0, r7
 8004ede:	eb04 0903 	add.w	r9, r4, r3
 8004ee2:	f000 faa7 	bl	8005434 <_sbrk_r>
 8004ee6:	4581      	cmp	r9, r0
 8004ee8:	d13f      	bne.n	8004f6a <_malloc_r+0xe6>
 8004eea:	6821      	ldr	r1, [r4, #0]
 8004eec:	1a6d      	subs	r5, r5, r1
 8004eee:	4629      	mov	r1, r5
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	f7ff ffa7 	bl	8004e44 <sbrk_aligned>
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d037      	beq.n	8004f6a <_malloc_r+0xe6>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	442b      	add	r3, r5
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	f8d8 3000 	ldr.w	r3, [r8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d038      	beq.n	8004f7a <_malloc_r+0xf6>
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	42a2      	cmp	r2, r4
 8004f0c:	d12b      	bne.n	8004f66 <_malloc_r+0xe2>
 8004f0e:	2200      	movs	r2, #0
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	e00f      	b.n	8004f34 <_malloc_r+0xb0>
 8004f14:	6822      	ldr	r2, [r4, #0]
 8004f16:	1b52      	subs	r2, r2, r5
 8004f18:	d41f      	bmi.n	8004f5a <_malloc_r+0xd6>
 8004f1a:	2a0b      	cmp	r2, #11
 8004f1c:	d917      	bls.n	8004f4e <_malloc_r+0xca>
 8004f1e:	1961      	adds	r1, r4, r5
 8004f20:	42a3      	cmp	r3, r4
 8004f22:	6025      	str	r5, [r4, #0]
 8004f24:	bf18      	it	ne
 8004f26:	6059      	strne	r1, [r3, #4]
 8004f28:	6863      	ldr	r3, [r4, #4]
 8004f2a:	bf08      	it	eq
 8004f2c:	f8c8 1000 	streq.w	r1, [r8]
 8004f30:	5162      	str	r2, [r4, r5]
 8004f32:	604b      	str	r3, [r1, #4]
 8004f34:	4638      	mov	r0, r7
 8004f36:	f104 060b 	add.w	r6, r4, #11
 8004f3a:	f000 f829 	bl	8004f90 <__malloc_unlock>
 8004f3e:	f026 0607 	bic.w	r6, r6, #7
 8004f42:	1d23      	adds	r3, r4, #4
 8004f44:	1af2      	subs	r2, r6, r3
 8004f46:	d0ae      	beq.n	8004ea6 <_malloc_r+0x22>
 8004f48:	1b9b      	subs	r3, r3, r6
 8004f4a:	50a3      	str	r3, [r4, r2]
 8004f4c:	e7ab      	b.n	8004ea6 <_malloc_r+0x22>
 8004f4e:	42a3      	cmp	r3, r4
 8004f50:	6862      	ldr	r2, [r4, #4]
 8004f52:	d1dd      	bne.n	8004f10 <_malloc_r+0x8c>
 8004f54:	f8c8 2000 	str.w	r2, [r8]
 8004f58:	e7ec      	b.n	8004f34 <_malloc_r+0xb0>
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	6864      	ldr	r4, [r4, #4]
 8004f5e:	e7ac      	b.n	8004eba <_malloc_r+0x36>
 8004f60:	4634      	mov	r4, r6
 8004f62:	6876      	ldr	r6, [r6, #4]
 8004f64:	e7b4      	b.n	8004ed0 <_malloc_r+0x4c>
 8004f66:	4613      	mov	r3, r2
 8004f68:	e7cc      	b.n	8004f04 <_malloc_r+0x80>
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	4638      	mov	r0, r7
 8004f70:	f000 f80e 	bl	8004f90 <__malloc_unlock>
 8004f74:	e797      	b.n	8004ea6 <_malloc_r+0x22>
 8004f76:	6025      	str	r5, [r4, #0]
 8004f78:	e7dc      	b.n	8004f34 <_malloc_r+0xb0>
 8004f7a:	605b      	str	r3, [r3, #4]
 8004f7c:	deff      	udf	#255	; 0xff
 8004f7e:	bf00      	nop
 8004f80:	200001e4 	.word	0x200001e4

08004f84 <__malloc_lock>:
 8004f84:	4801      	ldr	r0, [pc, #4]	; (8004f8c <__malloc_lock+0x8>)
 8004f86:	f000 baa2 	b.w	80054ce <__retarget_lock_acquire_recursive>
 8004f8a:	bf00      	nop
 8004f8c:	2000032c 	.word	0x2000032c

08004f90 <__malloc_unlock>:
 8004f90:	4801      	ldr	r0, [pc, #4]	; (8004f98 <__malloc_unlock+0x8>)
 8004f92:	f000 ba9d 	b.w	80054d0 <__retarget_lock_release_recursive>
 8004f96:	bf00      	nop
 8004f98:	2000032c 	.word	0x2000032c

08004f9c <std>:
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	b510      	push	{r4, lr}
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8004fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004faa:	6083      	str	r3, [r0, #8]
 8004fac:	8181      	strh	r1, [r0, #12]
 8004fae:	6643      	str	r3, [r0, #100]	; 0x64
 8004fb0:	81c2      	strh	r2, [r0, #14]
 8004fb2:	6183      	str	r3, [r0, #24]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	2208      	movs	r2, #8
 8004fb8:	305c      	adds	r0, #92	; 0x5c
 8004fba:	f000 f9ff 	bl	80053bc <memset>
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <std+0x58>)
 8004fc0:	6263      	str	r3, [r4, #36]	; 0x24
 8004fc2:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <std+0x5c>)
 8004fc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <std+0x60>)
 8004fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <std+0x64>)
 8004fcc:	6323      	str	r3, [r4, #48]	; 0x30
 8004fce:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <std+0x68>)
 8004fd0:	6224      	str	r4, [r4, #32]
 8004fd2:	429c      	cmp	r4, r3
 8004fd4:	d006      	beq.n	8004fe4 <std+0x48>
 8004fd6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004fda:	4294      	cmp	r4, r2
 8004fdc:	d002      	beq.n	8004fe4 <std+0x48>
 8004fde:	33d0      	adds	r3, #208	; 0xd0
 8004fe0:	429c      	cmp	r4, r3
 8004fe2:	d105      	bne.n	8004ff0 <std+0x54>
 8004fe4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fec:	f000 ba6e 	b.w	80054cc <__retarget_lock_init_recursive>
 8004ff0:	bd10      	pop	{r4, pc}
 8004ff2:	bf00      	nop
 8004ff4:	0800520d 	.word	0x0800520d
 8004ff8:	0800522f 	.word	0x0800522f
 8004ffc:	08005267 	.word	0x08005267
 8005000:	0800528b 	.word	0x0800528b
 8005004:	200001ec 	.word	0x200001ec

08005008 <stdio_exit_handler>:
 8005008:	4a02      	ldr	r2, [pc, #8]	; (8005014 <stdio_exit_handler+0xc>)
 800500a:	4903      	ldr	r1, [pc, #12]	; (8005018 <stdio_exit_handler+0x10>)
 800500c:	4803      	ldr	r0, [pc, #12]	; (800501c <stdio_exit_handler+0x14>)
 800500e:	f000 b869 	b.w	80050e4 <_fwalk_sglue>
 8005012:	bf00      	nop
 8005014:	2000000c 	.word	0x2000000c
 8005018:	08005c21 	.word	0x08005c21
 800501c:	20000018 	.word	0x20000018

08005020 <cleanup_stdio>:
 8005020:	6841      	ldr	r1, [r0, #4]
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <cleanup_stdio+0x34>)
 8005024:	4299      	cmp	r1, r3
 8005026:	b510      	push	{r4, lr}
 8005028:	4604      	mov	r4, r0
 800502a:	d001      	beq.n	8005030 <cleanup_stdio+0x10>
 800502c:	f000 fdf8 	bl	8005c20 <_fflush_r>
 8005030:	68a1      	ldr	r1, [r4, #8]
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <cleanup_stdio+0x38>)
 8005034:	4299      	cmp	r1, r3
 8005036:	d002      	beq.n	800503e <cleanup_stdio+0x1e>
 8005038:	4620      	mov	r0, r4
 800503a:	f000 fdf1 	bl	8005c20 <_fflush_r>
 800503e:	68e1      	ldr	r1, [r4, #12]
 8005040:	4b06      	ldr	r3, [pc, #24]	; (800505c <cleanup_stdio+0x3c>)
 8005042:	4299      	cmp	r1, r3
 8005044:	d004      	beq.n	8005050 <cleanup_stdio+0x30>
 8005046:	4620      	mov	r0, r4
 8005048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800504c:	f000 bde8 	b.w	8005c20 <_fflush_r>
 8005050:	bd10      	pop	{r4, pc}
 8005052:	bf00      	nop
 8005054:	200001ec 	.word	0x200001ec
 8005058:	20000254 	.word	0x20000254
 800505c:	200002bc 	.word	0x200002bc

08005060 <global_stdio_init.part.0>:
 8005060:	b510      	push	{r4, lr}
 8005062:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <global_stdio_init.part.0+0x30>)
 8005064:	4c0b      	ldr	r4, [pc, #44]	; (8005094 <global_stdio_init.part.0+0x34>)
 8005066:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <global_stdio_init.part.0+0x38>)
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	4620      	mov	r0, r4
 800506c:	2200      	movs	r2, #0
 800506e:	2104      	movs	r1, #4
 8005070:	f7ff ff94 	bl	8004f9c <std>
 8005074:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005078:	2201      	movs	r2, #1
 800507a:	2109      	movs	r1, #9
 800507c:	f7ff ff8e 	bl	8004f9c <std>
 8005080:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005084:	2202      	movs	r2, #2
 8005086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800508a:	2112      	movs	r1, #18
 800508c:	f7ff bf86 	b.w	8004f9c <std>
 8005090:	20000324 	.word	0x20000324
 8005094:	200001ec 	.word	0x200001ec
 8005098:	08005009 	.word	0x08005009

0800509c <__sfp_lock_acquire>:
 800509c:	4801      	ldr	r0, [pc, #4]	; (80050a4 <__sfp_lock_acquire+0x8>)
 800509e:	f000 ba16 	b.w	80054ce <__retarget_lock_acquire_recursive>
 80050a2:	bf00      	nop
 80050a4:	2000032d 	.word	0x2000032d

080050a8 <__sfp_lock_release>:
 80050a8:	4801      	ldr	r0, [pc, #4]	; (80050b0 <__sfp_lock_release+0x8>)
 80050aa:	f000 ba11 	b.w	80054d0 <__retarget_lock_release_recursive>
 80050ae:	bf00      	nop
 80050b0:	2000032d 	.word	0x2000032d

080050b4 <__sinit>:
 80050b4:	b510      	push	{r4, lr}
 80050b6:	4604      	mov	r4, r0
 80050b8:	f7ff fff0 	bl	800509c <__sfp_lock_acquire>
 80050bc:	6a23      	ldr	r3, [r4, #32]
 80050be:	b11b      	cbz	r3, 80050c8 <__sinit+0x14>
 80050c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050c4:	f7ff bff0 	b.w	80050a8 <__sfp_lock_release>
 80050c8:	4b04      	ldr	r3, [pc, #16]	; (80050dc <__sinit+0x28>)
 80050ca:	6223      	str	r3, [r4, #32]
 80050cc:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <__sinit+0x2c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f5      	bne.n	80050c0 <__sinit+0xc>
 80050d4:	f7ff ffc4 	bl	8005060 <global_stdio_init.part.0>
 80050d8:	e7f2      	b.n	80050c0 <__sinit+0xc>
 80050da:	bf00      	nop
 80050dc:	08005021 	.word	0x08005021
 80050e0:	20000324 	.word	0x20000324

080050e4 <_fwalk_sglue>:
 80050e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050e8:	4607      	mov	r7, r0
 80050ea:	4688      	mov	r8, r1
 80050ec:	4614      	mov	r4, r2
 80050ee:	2600      	movs	r6, #0
 80050f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050f4:	f1b9 0901 	subs.w	r9, r9, #1
 80050f8:	d505      	bpl.n	8005106 <_fwalk_sglue+0x22>
 80050fa:	6824      	ldr	r4, [r4, #0]
 80050fc:	2c00      	cmp	r4, #0
 80050fe:	d1f7      	bne.n	80050f0 <_fwalk_sglue+0xc>
 8005100:	4630      	mov	r0, r6
 8005102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005106:	89ab      	ldrh	r3, [r5, #12]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d907      	bls.n	800511c <_fwalk_sglue+0x38>
 800510c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005110:	3301      	adds	r3, #1
 8005112:	d003      	beq.n	800511c <_fwalk_sglue+0x38>
 8005114:	4629      	mov	r1, r5
 8005116:	4638      	mov	r0, r7
 8005118:	47c0      	blx	r8
 800511a:	4306      	orrs	r6, r0
 800511c:	3568      	adds	r5, #104	; 0x68
 800511e:	e7e9      	b.n	80050f4 <_fwalk_sglue+0x10>

08005120 <iprintf>:
 8005120:	b40f      	push	{r0, r1, r2, r3}
 8005122:	b507      	push	{r0, r1, r2, lr}
 8005124:	4906      	ldr	r1, [pc, #24]	; (8005140 <iprintf+0x20>)
 8005126:	ab04      	add	r3, sp, #16
 8005128:	6808      	ldr	r0, [r1, #0]
 800512a:	f853 2b04 	ldr.w	r2, [r3], #4
 800512e:	6881      	ldr	r1, [r0, #8]
 8005130:	9301      	str	r3, [sp, #4]
 8005132:	f000 fa45 	bl	80055c0 <_vfiprintf_r>
 8005136:	b003      	add	sp, #12
 8005138:	f85d eb04 	ldr.w	lr, [sp], #4
 800513c:	b004      	add	sp, #16
 800513e:	4770      	bx	lr
 8005140:	20000064 	.word	0x20000064

08005144 <putchar>:
 8005144:	4b02      	ldr	r3, [pc, #8]	; (8005150 <putchar+0xc>)
 8005146:	4601      	mov	r1, r0
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	6882      	ldr	r2, [r0, #8]
 800514c:	f000 bdf2 	b.w	8005d34 <_putc_r>
 8005150:	20000064 	.word	0x20000064

08005154 <_puts_r>:
 8005154:	6a03      	ldr	r3, [r0, #32]
 8005156:	b570      	push	{r4, r5, r6, lr}
 8005158:	6884      	ldr	r4, [r0, #8]
 800515a:	4605      	mov	r5, r0
 800515c:	460e      	mov	r6, r1
 800515e:	b90b      	cbnz	r3, 8005164 <_puts_r+0x10>
 8005160:	f7ff ffa8 	bl	80050b4 <__sinit>
 8005164:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005166:	07db      	lsls	r3, r3, #31
 8005168:	d405      	bmi.n	8005176 <_puts_r+0x22>
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	0598      	lsls	r0, r3, #22
 800516e:	d402      	bmi.n	8005176 <_puts_r+0x22>
 8005170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005172:	f000 f9ac 	bl	80054ce <__retarget_lock_acquire_recursive>
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	0719      	lsls	r1, r3, #28
 800517a:	d513      	bpl.n	80051a4 <_puts_r+0x50>
 800517c:	6923      	ldr	r3, [r4, #16]
 800517e:	b18b      	cbz	r3, 80051a4 <_puts_r+0x50>
 8005180:	3e01      	subs	r6, #1
 8005182:	68a3      	ldr	r3, [r4, #8]
 8005184:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005188:	3b01      	subs	r3, #1
 800518a:	60a3      	str	r3, [r4, #8]
 800518c:	b9e9      	cbnz	r1, 80051ca <_puts_r+0x76>
 800518e:	2b00      	cmp	r3, #0
 8005190:	da2e      	bge.n	80051f0 <_puts_r+0x9c>
 8005192:	4622      	mov	r2, r4
 8005194:	210a      	movs	r1, #10
 8005196:	4628      	mov	r0, r5
 8005198:	f000 f87b 	bl	8005292 <__swbuf_r>
 800519c:	3001      	adds	r0, #1
 800519e:	d007      	beq.n	80051b0 <_puts_r+0x5c>
 80051a0:	250a      	movs	r5, #10
 80051a2:	e007      	b.n	80051b4 <_puts_r+0x60>
 80051a4:	4621      	mov	r1, r4
 80051a6:	4628      	mov	r0, r5
 80051a8:	f000 f8b0 	bl	800530c <__swsetup_r>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d0e7      	beq.n	8005180 <_puts_r+0x2c>
 80051b0:	f04f 35ff 	mov.w	r5, #4294967295
 80051b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051b6:	07da      	lsls	r2, r3, #31
 80051b8:	d405      	bmi.n	80051c6 <_puts_r+0x72>
 80051ba:	89a3      	ldrh	r3, [r4, #12]
 80051bc:	059b      	lsls	r3, r3, #22
 80051be:	d402      	bmi.n	80051c6 <_puts_r+0x72>
 80051c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051c2:	f000 f985 	bl	80054d0 <__retarget_lock_release_recursive>
 80051c6:	4628      	mov	r0, r5
 80051c8:	bd70      	pop	{r4, r5, r6, pc}
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da04      	bge.n	80051d8 <_puts_r+0x84>
 80051ce:	69a2      	ldr	r2, [r4, #24]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	dc06      	bgt.n	80051e2 <_puts_r+0x8e>
 80051d4:	290a      	cmp	r1, #10
 80051d6:	d004      	beq.n	80051e2 <_puts_r+0x8e>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	6022      	str	r2, [r4, #0]
 80051de:	7019      	strb	r1, [r3, #0]
 80051e0:	e7cf      	b.n	8005182 <_puts_r+0x2e>
 80051e2:	4622      	mov	r2, r4
 80051e4:	4628      	mov	r0, r5
 80051e6:	f000 f854 	bl	8005292 <__swbuf_r>
 80051ea:	3001      	adds	r0, #1
 80051ec:	d1c9      	bne.n	8005182 <_puts_r+0x2e>
 80051ee:	e7df      	b.n	80051b0 <_puts_r+0x5c>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	250a      	movs	r5, #10
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	6022      	str	r2, [r4, #0]
 80051f8:	701d      	strb	r5, [r3, #0]
 80051fa:	e7db      	b.n	80051b4 <_puts_r+0x60>

080051fc <puts>:
 80051fc:	4b02      	ldr	r3, [pc, #8]	; (8005208 <puts+0xc>)
 80051fe:	4601      	mov	r1, r0
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	f7ff bfa7 	b.w	8005154 <_puts_r>
 8005206:	bf00      	nop
 8005208:	20000064 	.word	0x20000064

0800520c <__sread>:
 800520c:	b510      	push	{r4, lr}
 800520e:	460c      	mov	r4, r1
 8005210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005214:	f000 f8fc 	bl	8005410 <_read_r>
 8005218:	2800      	cmp	r0, #0
 800521a:	bfab      	itete	ge
 800521c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800521e:	89a3      	ldrhlt	r3, [r4, #12]
 8005220:	181b      	addge	r3, r3, r0
 8005222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005226:	bfac      	ite	ge
 8005228:	6563      	strge	r3, [r4, #84]	; 0x54
 800522a:	81a3      	strhlt	r3, [r4, #12]
 800522c:	bd10      	pop	{r4, pc}

0800522e <__swrite>:
 800522e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005232:	461f      	mov	r7, r3
 8005234:	898b      	ldrh	r3, [r1, #12]
 8005236:	05db      	lsls	r3, r3, #23
 8005238:	4605      	mov	r5, r0
 800523a:	460c      	mov	r4, r1
 800523c:	4616      	mov	r6, r2
 800523e:	d505      	bpl.n	800524c <__swrite+0x1e>
 8005240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005244:	2302      	movs	r3, #2
 8005246:	2200      	movs	r2, #0
 8005248:	f000 f8d0 	bl	80053ec <_lseek_r>
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005256:	81a3      	strh	r3, [r4, #12]
 8005258:	4632      	mov	r2, r6
 800525a:	463b      	mov	r3, r7
 800525c:	4628      	mov	r0, r5
 800525e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005262:	f000 b8f7 	b.w	8005454 <_write_r>

08005266 <__sseek>:
 8005266:	b510      	push	{r4, lr}
 8005268:	460c      	mov	r4, r1
 800526a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526e:	f000 f8bd 	bl	80053ec <_lseek_r>
 8005272:	1c43      	adds	r3, r0, #1
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	bf15      	itete	ne
 8005278:	6560      	strne	r0, [r4, #84]	; 0x54
 800527a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800527e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005282:	81a3      	strheq	r3, [r4, #12]
 8005284:	bf18      	it	ne
 8005286:	81a3      	strhne	r3, [r4, #12]
 8005288:	bd10      	pop	{r4, pc}

0800528a <__sclose>:
 800528a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528e:	f000 b89d 	b.w	80053cc <_close_r>

08005292 <__swbuf_r>:
 8005292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005294:	460e      	mov	r6, r1
 8005296:	4614      	mov	r4, r2
 8005298:	4605      	mov	r5, r0
 800529a:	b118      	cbz	r0, 80052a4 <__swbuf_r+0x12>
 800529c:	6a03      	ldr	r3, [r0, #32]
 800529e:	b90b      	cbnz	r3, 80052a4 <__swbuf_r+0x12>
 80052a0:	f7ff ff08 	bl	80050b4 <__sinit>
 80052a4:	69a3      	ldr	r3, [r4, #24]
 80052a6:	60a3      	str	r3, [r4, #8]
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	071a      	lsls	r2, r3, #28
 80052ac:	d525      	bpl.n	80052fa <__swbuf_r+0x68>
 80052ae:	6923      	ldr	r3, [r4, #16]
 80052b0:	b31b      	cbz	r3, 80052fa <__swbuf_r+0x68>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	6922      	ldr	r2, [r4, #16]
 80052b6:	1a98      	subs	r0, r3, r2
 80052b8:	6963      	ldr	r3, [r4, #20]
 80052ba:	b2f6      	uxtb	r6, r6
 80052bc:	4283      	cmp	r3, r0
 80052be:	4637      	mov	r7, r6
 80052c0:	dc04      	bgt.n	80052cc <__swbuf_r+0x3a>
 80052c2:	4621      	mov	r1, r4
 80052c4:	4628      	mov	r0, r5
 80052c6:	f000 fcab 	bl	8005c20 <_fflush_r>
 80052ca:	b9e0      	cbnz	r0, 8005306 <__swbuf_r+0x74>
 80052cc:	68a3      	ldr	r3, [r4, #8]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	60a3      	str	r3, [r4, #8]
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	6022      	str	r2, [r4, #0]
 80052d8:	701e      	strb	r6, [r3, #0]
 80052da:	6962      	ldr	r2, [r4, #20]
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	429a      	cmp	r2, r3
 80052e0:	d004      	beq.n	80052ec <__swbuf_r+0x5a>
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	07db      	lsls	r3, r3, #31
 80052e6:	d506      	bpl.n	80052f6 <__swbuf_r+0x64>
 80052e8:	2e0a      	cmp	r6, #10
 80052ea:	d104      	bne.n	80052f6 <__swbuf_r+0x64>
 80052ec:	4621      	mov	r1, r4
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 fc96 	bl	8005c20 <_fflush_r>
 80052f4:	b938      	cbnz	r0, 8005306 <__swbuf_r+0x74>
 80052f6:	4638      	mov	r0, r7
 80052f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052fa:	4621      	mov	r1, r4
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f805 	bl	800530c <__swsetup_r>
 8005302:	2800      	cmp	r0, #0
 8005304:	d0d5      	beq.n	80052b2 <__swbuf_r+0x20>
 8005306:	f04f 37ff 	mov.w	r7, #4294967295
 800530a:	e7f4      	b.n	80052f6 <__swbuf_r+0x64>

0800530c <__swsetup_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4b2a      	ldr	r3, [pc, #168]	; (80053b8 <__swsetup_r+0xac>)
 8005310:	4605      	mov	r5, r0
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	460c      	mov	r4, r1
 8005316:	b118      	cbz	r0, 8005320 <__swsetup_r+0x14>
 8005318:	6a03      	ldr	r3, [r0, #32]
 800531a:	b90b      	cbnz	r3, 8005320 <__swsetup_r+0x14>
 800531c:	f7ff feca 	bl	80050b4 <__sinit>
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005326:	0718      	lsls	r0, r3, #28
 8005328:	d422      	bmi.n	8005370 <__swsetup_r+0x64>
 800532a:	06d9      	lsls	r1, r3, #27
 800532c:	d407      	bmi.n	800533e <__swsetup_r+0x32>
 800532e:	2309      	movs	r3, #9
 8005330:	602b      	str	r3, [r5, #0]
 8005332:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005336:	81a3      	strh	r3, [r4, #12]
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	e034      	b.n	80053a8 <__swsetup_r+0x9c>
 800533e:	0758      	lsls	r0, r3, #29
 8005340:	d512      	bpl.n	8005368 <__swsetup_r+0x5c>
 8005342:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005344:	b141      	cbz	r1, 8005358 <__swsetup_r+0x4c>
 8005346:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800534a:	4299      	cmp	r1, r3
 800534c:	d002      	beq.n	8005354 <__swsetup_r+0x48>
 800534e:	4628      	mov	r0, r5
 8005350:	f000 f8c0 	bl	80054d4 <_free_r>
 8005354:	2300      	movs	r3, #0
 8005356:	6363      	str	r3, [r4, #52]	; 0x34
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	2300      	movs	r3, #0
 8005362:	6063      	str	r3, [r4, #4]
 8005364:	6923      	ldr	r3, [r4, #16]
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	89a3      	ldrh	r3, [r4, #12]
 800536a:	f043 0308 	orr.w	r3, r3, #8
 800536e:	81a3      	strh	r3, [r4, #12]
 8005370:	6923      	ldr	r3, [r4, #16]
 8005372:	b94b      	cbnz	r3, 8005388 <__swsetup_r+0x7c>
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800537a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800537e:	d003      	beq.n	8005388 <__swsetup_r+0x7c>
 8005380:	4621      	mov	r1, r4
 8005382:	4628      	mov	r0, r5
 8005384:	f000 fc9a 	bl	8005cbc <__smakebuf_r>
 8005388:	89a0      	ldrh	r0, [r4, #12]
 800538a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800538e:	f010 0301 	ands.w	r3, r0, #1
 8005392:	d00a      	beq.n	80053aa <__swsetup_r+0x9e>
 8005394:	2300      	movs	r3, #0
 8005396:	60a3      	str	r3, [r4, #8]
 8005398:	6963      	ldr	r3, [r4, #20]
 800539a:	425b      	negs	r3, r3
 800539c:	61a3      	str	r3, [r4, #24]
 800539e:	6923      	ldr	r3, [r4, #16]
 80053a0:	b943      	cbnz	r3, 80053b4 <__swsetup_r+0xa8>
 80053a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053a6:	d1c4      	bne.n	8005332 <__swsetup_r+0x26>
 80053a8:	bd38      	pop	{r3, r4, r5, pc}
 80053aa:	0781      	lsls	r1, r0, #30
 80053ac:	bf58      	it	pl
 80053ae:	6963      	ldrpl	r3, [r4, #20]
 80053b0:	60a3      	str	r3, [r4, #8]
 80053b2:	e7f4      	b.n	800539e <__swsetup_r+0x92>
 80053b4:	2000      	movs	r0, #0
 80053b6:	e7f7      	b.n	80053a8 <__swsetup_r+0x9c>
 80053b8:	20000064 	.word	0x20000064

080053bc <memset>:
 80053bc:	4402      	add	r2, r0
 80053be:	4603      	mov	r3, r0
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d100      	bne.n	80053c6 <memset+0xa>
 80053c4:	4770      	bx	lr
 80053c6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ca:	e7f9      	b.n	80053c0 <memset+0x4>

080053cc <_close_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4d06      	ldr	r5, [pc, #24]	; (80053e8 <_close_r+0x1c>)
 80053d0:	2300      	movs	r3, #0
 80053d2:	4604      	mov	r4, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	602b      	str	r3, [r5, #0]
 80053d8:	f7fc fa55 	bl	8001886 <_close>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_close_r+0x1a>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_close_r+0x1a>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	20000328 	.word	0x20000328

080053ec <_lseek_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d07      	ldr	r5, [pc, #28]	; (800540c <_lseek_r+0x20>)
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fc fa6a 	bl	80018d4 <_lseek>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_lseek_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_lseek_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	20000328 	.word	0x20000328

08005410 <_read_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4d07      	ldr	r5, [pc, #28]	; (8005430 <_read_r+0x20>)
 8005414:	4604      	mov	r4, r0
 8005416:	4608      	mov	r0, r1
 8005418:	4611      	mov	r1, r2
 800541a:	2200      	movs	r2, #0
 800541c:	602a      	str	r2, [r5, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	f7fc f9f8 	bl	8001814 <_read>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d102      	bne.n	800542e <_read_r+0x1e>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	b103      	cbz	r3, 800542e <_read_r+0x1e>
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	bd38      	pop	{r3, r4, r5, pc}
 8005430:	20000328 	.word	0x20000328

08005434 <_sbrk_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d06      	ldr	r5, [pc, #24]	; (8005450 <_sbrk_r+0x1c>)
 8005438:	2300      	movs	r3, #0
 800543a:	4604      	mov	r4, r0
 800543c:	4608      	mov	r0, r1
 800543e:	602b      	str	r3, [r5, #0]
 8005440:	f7fc fa56 	bl	80018f0 <_sbrk>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_sbrk_r+0x1a>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_sbrk_r+0x1a>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	20000328 	.word	0x20000328

08005454 <_write_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d07      	ldr	r5, [pc, #28]	; (8005474 <_write_r+0x20>)
 8005458:	4604      	mov	r4, r0
 800545a:	4608      	mov	r0, r1
 800545c:	4611      	mov	r1, r2
 800545e:	2200      	movs	r2, #0
 8005460:	602a      	str	r2, [r5, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f7fc f9f3 	bl	800184e <_write>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_write_r+0x1e>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_write_r+0x1e>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	20000328 	.word	0x20000328

08005478 <__errno>:
 8005478:	4b01      	ldr	r3, [pc, #4]	; (8005480 <__errno+0x8>)
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000064 	.word	0x20000064

08005484 <__libc_init_array>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	4d0d      	ldr	r5, [pc, #52]	; (80054bc <__libc_init_array+0x38>)
 8005488:	4c0d      	ldr	r4, [pc, #52]	; (80054c0 <__libc_init_array+0x3c>)
 800548a:	1b64      	subs	r4, r4, r5
 800548c:	10a4      	asrs	r4, r4, #2
 800548e:	2600      	movs	r6, #0
 8005490:	42a6      	cmp	r6, r4
 8005492:	d109      	bne.n	80054a8 <__libc_init_array+0x24>
 8005494:	4d0b      	ldr	r5, [pc, #44]	; (80054c4 <__libc_init_array+0x40>)
 8005496:	4c0c      	ldr	r4, [pc, #48]	; (80054c8 <__libc_init_array+0x44>)
 8005498:	f000 fca2 	bl	8005de0 <_init>
 800549c:	1b64      	subs	r4, r4, r5
 800549e:	10a4      	asrs	r4, r4, #2
 80054a0:	2600      	movs	r6, #0
 80054a2:	42a6      	cmp	r6, r4
 80054a4:	d105      	bne.n	80054b2 <__libc_init_array+0x2e>
 80054a6:	bd70      	pop	{r4, r5, r6, pc}
 80054a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ac:	4798      	blx	r3
 80054ae:	3601      	adds	r6, #1
 80054b0:	e7ee      	b.n	8005490 <__libc_init_array+0xc>
 80054b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b6:	4798      	blx	r3
 80054b8:	3601      	adds	r6, #1
 80054ba:	e7f2      	b.n	80054a2 <__libc_init_array+0x1e>
 80054bc:	08006270 	.word	0x08006270
 80054c0:	08006270 	.word	0x08006270
 80054c4:	08006270 	.word	0x08006270
 80054c8:	08006274 	.word	0x08006274

080054cc <__retarget_lock_init_recursive>:
 80054cc:	4770      	bx	lr

080054ce <__retarget_lock_acquire_recursive>:
 80054ce:	4770      	bx	lr

080054d0 <__retarget_lock_release_recursive>:
 80054d0:	4770      	bx	lr
	...

080054d4 <_free_r>:
 80054d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054d6:	2900      	cmp	r1, #0
 80054d8:	d044      	beq.n	8005564 <_free_r+0x90>
 80054da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054de:	9001      	str	r0, [sp, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f1a1 0404 	sub.w	r4, r1, #4
 80054e6:	bfb8      	it	lt
 80054e8:	18e4      	addlt	r4, r4, r3
 80054ea:	f7ff fd4b 	bl	8004f84 <__malloc_lock>
 80054ee:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <_free_r+0x94>)
 80054f0:	9801      	ldr	r0, [sp, #4]
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	b933      	cbnz	r3, 8005504 <_free_r+0x30>
 80054f6:	6063      	str	r3, [r4, #4]
 80054f8:	6014      	str	r4, [r2, #0]
 80054fa:	b003      	add	sp, #12
 80054fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005500:	f7ff bd46 	b.w	8004f90 <__malloc_unlock>
 8005504:	42a3      	cmp	r3, r4
 8005506:	d908      	bls.n	800551a <_free_r+0x46>
 8005508:	6825      	ldr	r5, [r4, #0]
 800550a:	1961      	adds	r1, r4, r5
 800550c:	428b      	cmp	r3, r1
 800550e:	bf01      	itttt	eq
 8005510:	6819      	ldreq	r1, [r3, #0]
 8005512:	685b      	ldreq	r3, [r3, #4]
 8005514:	1949      	addeq	r1, r1, r5
 8005516:	6021      	streq	r1, [r4, #0]
 8005518:	e7ed      	b.n	80054f6 <_free_r+0x22>
 800551a:	461a      	mov	r2, r3
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	b10b      	cbz	r3, 8005524 <_free_r+0x50>
 8005520:	42a3      	cmp	r3, r4
 8005522:	d9fa      	bls.n	800551a <_free_r+0x46>
 8005524:	6811      	ldr	r1, [r2, #0]
 8005526:	1855      	adds	r5, r2, r1
 8005528:	42a5      	cmp	r5, r4
 800552a:	d10b      	bne.n	8005544 <_free_r+0x70>
 800552c:	6824      	ldr	r4, [r4, #0]
 800552e:	4421      	add	r1, r4
 8005530:	1854      	adds	r4, r2, r1
 8005532:	42a3      	cmp	r3, r4
 8005534:	6011      	str	r1, [r2, #0]
 8005536:	d1e0      	bne.n	80054fa <_free_r+0x26>
 8005538:	681c      	ldr	r4, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	6053      	str	r3, [r2, #4]
 800553e:	440c      	add	r4, r1
 8005540:	6014      	str	r4, [r2, #0]
 8005542:	e7da      	b.n	80054fa <_free_r+0x26>
 8005544:	d902      	bls.n	800554c <_free_r+0x78>
 8005546:	230c      	movs	r3, #12
 8005548:	6003      	str	r3, [r0, #0]
 800554a:	e7d6      	b.n	80054fa <_free_r+0x26>
 800554c:	6825      	ldr	r5, [r4, #0]
 800554e:	1961      	adds	r1, r4, r5
 8005550:	428b      	cmp	r3, r1
 8005552:	bf04      	itt	eq
 8005554:	6819      	ldreq	r1, [r3, #0]
 8005556:	685b      	ldreq	r3, [r3, #4]
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	bf04      	itt	eq
 800555c:	1949      	addeq	r1, r1, r5
 800555e:	6021      	streq	r1, [r4, #0]
 8005560:	6054      	str	r4, [r2, #4]
 8005562:	e7ca      	b.n	80054fa <_free_r+0x26>
 8005564:	b003      	add	sp, #12
 8005566:	bd30      	pop	{r4, r5, pc}
 8005568:	200001e4 	.word	0x200001e4

0800556c <__sfputc_r>:
 800556c:	6893      	ldr	r3, [r2, #8]
 800556e:	3b01      	subs	r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	b410      	push	{r4}
 8005574:	6093      	str	r3, [r2, #8]
 8005576:	da08      	bge.n	800558a <__sfputc_r+0x1e>
 8005578:	6994      	ldr	r4, [r2, #24]
 800557a:	42a3      	cmp	r3, r4
 800557c:	db01      	blt.n	8005582 <__sfputc_r+0x16>
 800557e:	290a      	cmp	r1, #10
 8005580:	d103      	bne.n	800558a <__sfputc_r+0x1e>
 8005582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005586:	f7ff be84 	b.w	8005292 <__swbuf_r>
 800558a:	6813      	ldr	r3, [r2, #0]
 800558c:	1c58      	adds	r0, r3, #1
 800558e:	6010      	str	r0, [r2, #0]
 8005590:	7019      	strb	r1, [r3, #0]
 8005592:	4608      	mov	r0, r1
 8005594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005598:	4770      	bx	lr

0800559a <__sfputs_r>:
 800559a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559c:	4606      	mov	r6, r0
 800559e:	460f      	mov	r7, r1
 80055a0:	4614      	mov	r4, r2
 80055a2:	18d5      	adds	r5, r2, r3
 80055a4:	42ac      	cmp	r4, r5
 80055a6:	d101      	bne.n	80055ac <__sfputs_r+0x12>
 80055a8:	2000      	movs	r0, #0
 80055aa:	e007      	b.n	80055bc <__sfputs_r+0x22>
 80055ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b0:	463a      	mov	r2, r7
 80055b2:	4630      	mov	r0, r6
 80055b4:	f7ff ffda 	bl	800556c <__sfputc_r>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d1f3      	bne.n	80055a4 <__sfputs_r+0xa>
 80055bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055c0 <_vfiprintf_r>:
 80055c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	460d      	mov	r5, r1
 80055c6:	b09d      	sub	sp, #116	; 0x74
 80055c8:	4614      	mov	r4, r2
 80055ca:	4698      	mov	r8, r3
 80055cc:	4606      	mov	r6, r0
 80055ce:	b118      	cbz	r0, 80055d8 <_vfiprintf_r+0x18>
 80055d0:	6a03      	ldr	r3, [r0, #32]
 80055d2:	b90b      	cbnz	r3, 80055d8 <_vfiprintf_r+0x18>
 80055d4:	f7ff fd6e 	bl	80050b4 <__sinit>
 80055d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055da:	07d9      	lsls	r1, r3, #31
 80055dc:	d405      	bmi.n	80055ea <_vfiprintf_r+0x2a>
 80055de:	89ab      	ldrh	r3, [r5, #12]
 80055e0:	059a      	lsls	r2, r3, #22
 80055e2:	d402      	bmi.n	80055ea <_vfiprintf_r+0x2a>
 80055e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055e6:	f7ff ff72 	bl	80054ce <__retarget_lock_acquire_recursive>
 80055ea:	89ab      	ldrh	r3, [r5, #12]
 80055ec:	071b      	lsls	r3, r3, #28
 80055ee:	d501      	bpl.n	80055f4 <_vfiprintf_r+0x34>
 80055f0:	692b      	ldr	r3, [r5, #16]
 80055f2:	b99b      	cbnz	r3, 800561c <_vfiprintf_r+0x5c>
 80055f4:	4629      	mov	r1, r5
 80055f6:	4630      	mov	r0, r6
 80055f8:	f7ff fe88 	bl	800530c <__swsetup_r>
 80055fc:	b170      	cbz	r0, 800561c <_vfiprintf_r+0x5c>
 80055fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005600:	07dc      	lsls	r4, r3, #31
 8005602:	d504      	bpl.n	800560e <_vfiprintf_r+0x4e>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	b01d      	add	sp, #116	; 0x74
 800560a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800560e:	89ab      	ldrh	r3, [r5, #12]
 8005610:	0598      	lsls	r0, r3, #22
 8005612:	d4f7      	bmi.n	8005604 <_vfiprintf_r+0x44>
 8005614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005616:	f7ff ff5b 	bl	80054d0 <__retarget_lock_release_recursive>
 800561a:	e7f3      	b.n	8005604 <_vfiprintf_r+0x44>
 800561c:	2300      	movs	r3, #0
 800561e:	9309      	str	r3, [sp, #36]	; 0x24
 8005620:	2320      	movs	r3, #32
 8005622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005626:	f8cd 800c 	str.w	r8, [sp, #12]
 800562a:	2330      	movs	r3, #48	; 0x30
 800562c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80057e0 <_vfiprintf_r+0x220>
 8005630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005634:	f04f 0901 	mov.w	r9, #1
 8005638:	4623      	mov	r3, r4
 800563a:	469a      	mov	sl, r3
 800563c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005640:	b10a      	cbz	r2, 8005646 <_vfiprintf_r+0x86>
 8005642:	2a25      	cmp	r2, #37	; 0x25
 8005644:	d1f9      	bne.n	800563a <_vfiprintf_r+0x7a>
 8005646:	ebba 0b04 	subs.w	fp, sl, r4
 800564a:	d00b      	beq.n	8005664 <_vfiprintf_r+0xa4>
 800564c:	465b      	mov	r3, fp
 800564e:	4622      	mov	r2, r4
 8005650:	4629      	mov	r1, r5
 8005652:	4630      	mov	r0, r6
 8005654:	f7ff ffa1 	bl	800559a <__sfputs_r>
 8005658:	3001      	adds	r0, #1
 800565a:	f000 80a9 	beq.w	80057b0 <_vfiprintf_r+0x1f0>
 800565e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005660:	445a      	add	r2, fp
 8005662:	9209      	str	r2, [sp, #36]	; 0x24
 8005664:	f89a 3000 	ldrb.w	r3, [sl]
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 80a1 	beq.w	80057b0 <_vfiprintf_r+0x1f0>
 800566e:	2300      	movs	r3, #0
 8005670:	f04f 32ff 	mov.w	r2, #4294967295
 8005674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005678:	f10a 0a01 	add.w	sl, sl, #1
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	9307      	str	r3, [sp, #28]
 8005680:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005684:	931a      	str	r3, [sp, #104]	; 0x68
 8005686:	4654      	mov	r4, sl
 8005688:	2205      	movs	r2, #5
 800568a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800568e:	4854      	ldr	r0, [pc, #336]	; (80057e0 <_vfiprintf_r+0x220>)
 8005690:	f7fa fdb6 	bl	8000200 <memchr>
 8005694:	9a04      	ldr	r2, [sp, #16]
 8005696:	b9d8      	cbnz	r0, 80056d0 <_vfiprintf_r+0x110>
 8005698:	06d1      	lsls	r1, r2, #27
 800569a:	bf44      	itt	mi
 800569c:	2320      	movmi	r3, #32
 800569e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a2:	0713      	lsls	r3, r2, #28
 80056a4:	bf44      	itt	mi
 80056a6:	232b      	movmi	r3, #43	; 0x2b
 80056a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ac:	f89a 3000 	ldrb.w	r3, [sl]
 80056b0:	2b2a      	cmp	r3, #42	; 0x2a
 80056b2:	d015      	beq.n	80056e0 <_vfiprintf_r+0x120>
 80056b4:	9a07      	ldr	r2, [sp, #28]
 80056b6:	4654      	mov	r4, sl
 80056b8:	2000      	movs	r0, #0
 80056ba:	f04f 0c0a 	mov.w	ip, #10
 80056be:	4621      	mov	r1, r4
 80056c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056c4:	3b30      	subs	r3, #48	; 0x30
 80056c6:	2b09      	cmp	r3, #9
 80056c8:	d94d      	bls.n	8005766 <_vfiprintf_r+0x1a6>
 80056ca:	b1b0      	cbz	r0, 80056fa <_vfiprintf_r+0x13a>
 80056cc:	9207      	str	r2, [sp, #28]
 80056ce:	e014      	b.n	80056fa <_vfiprintf_r+0x13a>
 80056d0:	eba0 0308 	sub.w	r3, r0, r8
 80056d4:	fa09 f303 	lsl.w	r3, r9, r3
 80056d8:	4313      	orrs	r3, r2
 80056da:	9304      	str	r3, [sp, #16]
 80056dc:	46a2      	mov	sl, r4
 80056de:	e7d2      	b.n	8005686 <_vfiprintf_r+0xc6>
 80056e0:	9b03      	ldr	r3, [sp, #12]
 80056e2:	1d19      	adds	r1, r3, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	9103      	str	r1, [sp, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bfbb      	ittet	lt
 80056ec:	425b      	neglt	r3, r3
 80056ee:	f042 0202 	orrlt.w	r2, r2, #2
 80056f2:	9307      	strge	r3, [sp, #28]
 80056f4:	9307      	strlt	r3, [sp, #28]
 80056f6:	bfb8      	it	lt
 80056f8:	9204      	strlt	r2, [sp, #16]
 80056fa:	7823      	ldrb	r3, [r4, #0]
 80056fc:	2b2e      	cmp	r3, #46	; 0x2e
 80056fe:	d10c      	bne.n	800571a <_vfiprintf_r+0x15a>
 8005700:	7863      	ldrb	r3, [r4, #1]
 8005702:	2b2a      	cmp	r3, #42	; 0x2a
 8005704:	d134      	bne.n	8005770 <_vfiprintf_r+0x1b0>
 8005706:	9b03      	ldr	r3, [sp, #12]
 8005708:	1d1a      	adds	r2, r3, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	9203      	str	r2, [sp, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	bfb8      	it	lt
 8005712:	f04f 33ff 	movlt.w	r3, #4294967295
 8005716:	3402      	adds	r4, #2
 8005718:	9305      	str	r3, [sp, #20]
 800571a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80057f0 <_vfiprintf_r+0x230>
 800571e:	7821      	ldrb	r1, [r4, #0]
 8005720:	2203      	movs	r2, #3
 8005722:	4650      	mov	r0, sl
 8005724:	f7fa fd6c 	bl	8000200 <memchr>
 8005728:	b138      	cbz	r0, 800573a <_vfiprintf_r+0x17a>
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	eba0 000a 	sub.w	r0, r0, sl
 8005730:	2240      	movs	r2, #64	; 0x40
 8005732:	4082      	lsls	r2, r0
 8005734:	4313      	orrs	r3, r2
 8005736:	3401      	adds	r4, #1
 8005738:	9304      	str	r3, [sp, #16]
 800573a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800573e:	4829      	ldr	r0, [pc, #164]	; (80057e4 <_vfiprintf_r+0x224>)
 8005740:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005744:	2206      	movs	r2, #6
 8005746:	f7fa fd5b 	bl	8000200 <memchr>
 800574a:	2800      	cmp	r0, #0
 800574c:	d03f      	beq.n	80057ce <_vfiprintf_r+0x20e>
 800574e:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <_vfiprintf_r+0x228>)
 8005750:	bb1b      	cbnz	r3, 800579a <_vfiprintf_r+0x1da>
 8005752:	9b03      	ldr	r3, [sp, #12]
 8005754:	3307      	adds	r3, #7
 8005756:	f023 0307 	bic.w	r3, r3, #7
 800575a:	3308      	adds	r3, #8
 800575c:	9303      	str	r3, [sp, #12]
 800575e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005760:	443b      	add	r3, r7
 8005762:	9309      	str	r3, [sp, #36]	; 0x24
 8005764:	e768      	b.n	8005638 <_vfiprintf_r+0x78>
 8005766:	fb0c 3202 	mla	r2, ip, r2, r3
 800576a:	460c      	mov	r4, r1
 800576c:	2001      	movs	r0, #1
 800576e:	e7a6      	b.n	80056be <_vfiprintf_r+0xfe>
 8005770:	2300      	movs	r3, #0
 8005772:	3401      	adds	r4, #1
 8005774:	9305      	str	r3, [sp, #20]
 8005776:	4619      	mov	r1, r3
 8005778:	f04f 0c0a 	mov.w	ip, #10
 800577c:	4620      	mov	r0, r4
 800577e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005782:	3a30      	subs	r2, #48	; 0x30
 8005784:	2a09      	cmp	r2, #9
 8005786:	d903      	bls.n	8005790 <_vfiprintf_r+0x1d0>
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0c6      	beq.n	800571a <_vfiprintf_r+0x15a>
 800578c:	9105      	str	r1, [sp, #20]
 800578e:	e7c4      	b.n	800571a <_vfiprintf_r+0x15a>
 8005790:	fb0c 2101 	mla	r1, ip, r1, r2
 8005794:	4604      	mov	r4, r0
 8005796:	2301      	movs	r3, #1
 8005798:	e7f0      	b.n	800577c <_vfiprintf_r+0x1bc>
 800579a:	ab03      	add	r3, sp, #12
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	462a      	mov	r2, r5
 80057a0:	4b12      	ldr	r3, [pc, #72]	; (80057ec <_vfiprintf_r+0x22c>)
 80057a2:	a904      	add	r1, sp, #16
 80057a4:	4630      	mov	r0, r6
 80057a6:	f3af 8000 	nop.w
 80057aa:	4607      	mov	r7, r0
 80057ac:	1c78      	adds	r0, r7, #1
 80057ae:	d1d6      	bne.n	800575e <_vfiprintf_r+0x19e>
 80057b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057b2:	07d9      	lsls	r1, r3, #31
 80057b4:	d405      	bmi.n	80057c2 <_vfiprintf_r+0x202>
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	059a      	lsls	r2, r3, #22
 80057ba:	d402      	bmi.n	80057c2 <_vfiprintf_r+0x202>
 80057bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057be:	f7ff fe87 	bl	80054d0 <__retarget_lock_release_recursive>
 80057c2:	89ab      	ldrh	r3, [r5, #12]
 80057c4:	065b      	lsls	r3, r3, #25
 80057c6:	f53f af1d 	bmi.w	8005604 <_vfiprintf_r+0x44>
 80057ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057cc:	e71c      	b.n	8005608 <_vfiprintf_r+0x48>
 80057ce:	ab03      	add	r3, sp, #12
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	462a      	mov	r2, r5
 80057d4:	4b05      	ldr	r3, [pc, #20]	; (80057ec <_vfiprintf_r+0x22c>)
 80057d6:	a904      	add	r1, sp, #16
 80057d8:	4630      	mov	r0, r6
 80057da:	f000 f879 	bl	80058d0 <_printf_i>
 80057de:	e7e4      	b.n	80057aa <_vfiprintf_r+0x1ea>
 80057e0:	08006234 	.word	0x08006234
 80057e4:	0800623e 	.word	0x0800623e
 80057e8:	00000000 	.word	0x00000000
 80057ec:	0800559b 	.word	0x0800559b
 80057f0:	0800623a 	.word	0x0800623a

080057f4 <_printf_common>:
 80057f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	4616      	mov	r6, r2
 80057fa:	4699      	mov	r9, r3
 80057fc:	688a      	ldr	r2, [r1, #8]
 80057fe:	690b      	ldr	r3, [r1, #16]
 8005800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005804:	4293      	cmp	r3, r2
 8005806:	bfb8      	it	lt
 8005808:	4613      	movlt	r3, r2
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005810:	4607      	mov	r7, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b10a      	cbz	r2, 800581a <_printf_common+0x26>
 8005816:	3301      	adds	r3, #1
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	0699      	lsls	r1, r3, #26
 800581e:	bf42      	ittt	mi
 8005820:	6833      	ldrmi	r3, [r6, #0]
 8005822:	3302      	addmi	r3, #2
 8005824:	6033      	strmi	r3, [r6, #0]
 8005826:	6825      	ldr	r5, [r4, #0]
 8005828:	f015 0506 	ands.w	r5, r5, #6
 800582c:	d106      	bne.n	800583c <_printf_common+0x48>
 800582e:	f104 0a19 	add.w	sl, r4, #25
 8005832:	68e3      	ldr	r3, [r4, #12]
 8005834:	6832      	ldr	r2, [r6, #0]
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	42ab      	cmp	r3, r5
 800583a:	dc26      	bgt.n	800588a <_printf_common+0x96>
 800583c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005840:	1e13      	subs	r3, r2, #0
 8005842:	6822      	ldr	r2, [r4, #0]
 8005844:	bf18      	it	ne
 8005846:	2301      	movne	r3, #1
 8005848:	0692      	lsls	r2, r2, #26
 800584a:	d42b      	bmi.n	80058a4 <_printf_common+0xb0>
 800584c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005850:	4649      	mov	r1, r9
 8005852:	4638      	mov	r0, r7
 8005854:	47c0      	blx	r8
 8005856:	3001      	adds	r0, #1
 8005858:	d01e      	beq.n	8005898 <_printf_common+0xa4>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	6922      	ldr	r2, [r4, #16]
 800585e:	f003 0306 	and.w	r3, r3, #6
 8005862:	2b04      	cmp	r3, #4
 8005864:	bf02      	ittt	eq
 8005866:	68e5      	ldreq	r5, [r4, #12]
 8005868:	6833      	ldreq	r3, [r6, #0]
 800586a:	1aed      	subeq	r5, r5, r3
 800586c:	68a3      	ldr	r3, [r4, #8]
 800586e:	bf0c      	ite	eq
 8005870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005874:	2500      	movne	r5, #0
 8005876:	4293      	cmp	r3, r2
 8005878:	bfc4      	itt	gt
 800587a:	1a9b      	subgt	r3, r3, r2
 800587c:	18ed      	addgt	r5, r5, r3
 800587e:	2600      	movs	r6, #0
 8005880:	341a      	adds	r4, #26
 8005882:	42b5      	cmp	r5, r6
 8005884:	d11a      	bne.n	80058bc <_printf_common+0xc8>
 8005886:	2000      	movs	r0, #0
 8005888:	e008      	b.n	800589c <_printf_common+0xa8>
 800588a:	2301      	movs	r3, #1
 800588c:	4652      	mov	r2, sl
 800588e:	4649      	mov	r1, r9
 8005890:	4638      	mov	r0, r7
 8005892:	47c0      	blx	r8
 8005894:	3001      	adds	r0, #1
 8005896:	d103      	bne.n	80058a0 <_printf_common+0xac>
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a0:	3501      	adds	r5, #1
 80058a2:	e7c6      	b.n	8005832 <_printf_common+0x3e>
 80058a4:	18e1      	adds	r1, r4, r3
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	2030      	movs	r0, #48	; 0x30
 80058aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ae:	4422      	add	r2, r4
 80058b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b8:	3302      	adds	r3, #2
 80058ba:	e7c7      	b.n	800584c <_printf_common+0x58>
 80058bc:	2301      	movs	r3, #1
 80058be:	4622      	mov	r2, r4
 80058c0:	4649      	mov	r1, r9
 80058c2:	4638      	mov	r0, r7
 80058c4:	47c0      	blx	r8
 80058c6:	3001      	adds	r0, #1
 80058c8:	d0e6      	beq.n	8005898 <_printf_common+0xa4>
 80058ca:	3601      	adds	r6, #1
 80058cc:	e7d9      	b.n	8005882 <_printf_common+0x8e>
	...

080058d0 <_printf_i>:
 80058d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	7e0f      	ldrb	r7, [r1, #24]
 80058d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058d8:	2f78      	cmp	r7, #120	; 0x78
 80058da:	4691      	mov	r9, r2
 80058dc:	4680      	mov	r8, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	469a      	mov	sl, r3
 80058e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058e6:	d807      	bhi.n	80058f8 <_printf_i+0x28>
 80058e8:	2f62      	cmp	r7, #98	; 0x62
 80058ea:	d80a      	bhi.n	8005902 <_printf_i+0x32>
 80058ec:	2f00      	cmp	r7, #0
 80058ee:	f000 80d4 	beq.w	8005a9a <_printf_i+0x1ca>
 80058f2:	2f58      	cmp	r7, #88	; 0x58
 80058f4:	f000 80c0 	beq.w	8005a78 <_printf_i+0x1a8>
 80058f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005900:	e03a      	b.n	8005978 <_printf_i+0xa8>
 8005902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005906:	2b15      	cmp	r3, #21
 8005908:	d8f6      	bhi.n	80058f8 <_printf_i+0x28>
 800590a:	a101      	add	r1, pc, #4	; (adr r1, 8005910 <_printf_i+0x40>)
 800590c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005910:	08005969 	.word	0x08005969
 8005914:	0800597d 	.word	0x0800597d
 8005918:	080058f9 	.word	0x080058f9
 800591c:	080058f9 	.word	0x080058f9
 8005920:	080058f9 	.word	0x080058f9
 8005924:	080058f9 	.word	0x080058f9
 8005928:	0800597d 	.word	0x0800597d
 800592c:	080058f9 	.word	0x080058f9
 8005930:	080058f9 	.word	0x080058f9
 8005934:	080058f9 	.word	0x080058f9
 8005938:	080058f9 	.word	0x080058f9
 800593c:	08005a81 	.word	0x08005a81
 8005940:	080059a9 	.word	0x080059a9
 8005944:	08005a3b 	.word	0x08005a3b
 8005948:	080058f9 	.word	0x080058f9
 800594c:	080058f9 	.word	0x080058f9
 8005950:	08005aa3 	.word	0x08005aa3
 8005954:	080058f9 	.word	0x080058f9
 8005958:	080059a9 	.word	0x080059a9
 800595c:	080058f9 	.word	0x080058f9
 8005960:	080058f9 	.word	0x080058f9
 8005964:	08005a43 	.word	0x08005a43
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	1d1a      	adds	r2, r3, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	602a      	str	r2, [r5, #0]
 8005970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005978:	2301      	movs	r3, #1
 800597a:	e09f      	b.n	8005abc <_printf_i+0x1ec>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	0607      	lsls	r7, r0, #24
 8005982:	f103 0104 	add.w	r1, r3, #4
 8005986:	6029      	str	r1, [r5, #0]
 8005988:	d501      	bpl.n	800598e <_printf_i+0xbe>
 800598a:	681e      	ldr	r6, [r3, #0]
 800598c:	e003      	b.n	8005996 <_printf_i+0xc6>
 800598e:	0646      	lsls	r6, r0, #25
 8005990:	d5fb      	bpl.n	800598a <_printf_i+0xba>
 8005992:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005996:	2e00      	cmp	r6, #0
 8005998:	da03      	bge.n	80059a2 <_printf_i+0xd2>
 800599a:	232d      	movs	r3, #45	; 0x2d
 800599c:	4276      	negs	r6, r6
 800599e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a2:	485a      	ldr	r0, [pc, #360]	; (8005b0c <_printf_i+0x23c>)
 80059a4:	230a      	movs	r3, #10
 80059a6:	e012      	b.n	80059ce <_printf_i+0xfe>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	6820      	ldr	r0, [r4, #0]
 80059ac:	1d19      	adds	r1, r3, #4
 80059ae:	6029      	str	r1, [r5, #0]
 80059b0:	0605      	lsls	r5, r0, #24
 80059b2:	d501      	bpl.n	80059b8 <_printf_i+0xe8>
 80059b4:	681e      	ldr	r6, [r3, #0]
 80059b6:	e002      	b.n	80059be <_printf_i+0xee>
 80059b8:	0641      	lsls	r1, r0, #25
 80059ba:	d5fb      	bpl.n	80059b4 <_printf_i+0xe4>
 80059bc:	881e      	ldrh	r6, [r3, #0]
 80059be:	4853      	ldr	r0, [pc, #332]	; (8005b0c <_printf_i+0x23c>)
 80059c0:	2f6f      	cmp	r7, #111	; 0x6f
 80059c2:	bf0c      	ite	eq
 80059c4:	2308      	moveq	r3, #8
 80059c6:	230a      	movne	r3, #10
 80059c8:	2100      	movs	r1, #0
 80059ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ce:	6865      	ldr	r5, [r4, #4]
 80059d0:	60a5      	str	r5, [r4, #8]
 80059d2:	2d00      	cmp	r5, #0
 80059d4:	bfa2      	ittt	ge
 80059d6:	6821      	ldrge	r1, [r4, #0]
 80059d8:	f021 0104 	bicge.w	r1, r1, #4
 80059dc:	6021      	strge	r1, [r4, #0]
 80059de:	b90e      	cbnz	r6, 80059e4 <_printf_i+0x114>
 80059e0:	2d00      	cmp	r5, #0
 80059e2:	d04b      	beq.n	8005a7c <_printf_i+0x1ac>
 80059e4:	4615      	mov	r5, r2
 80059e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ea:	fb03 6711 	mls	r7, r3, r1, r6
 80059ee:	5dc7      	ldrb	r7, [r0, r7]
 80059f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f4:	4637      	mov	r7, r6
 80059f6:	42bb      	cmp	r3, r7
 80059f8:	460e      	mov	r6, r1
 80059fa:	d9f4      	bls.n	80059e6 <_printf_i+0x116>
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d10b      	bne.n	8005a18 <_printf_i+0x148>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	07de      	lsls	r6, r3, #31
 8005a04:	d508      	bpl.n	8005a18 <_printf_i+0x148>
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	6861      	ldr	r1, [r4, #4]
 8005a0a:	4299      	cmp	r1, r3
 8005a0c:	bfde      	ittt	le
 8005a0e:	2330      	movle	r3, #48	; 0x30
 8005a10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a18:	1b52      	subs	r2, r2, r5
 8005a1a:	6122      	str	r2, [r4, #16]
 8005a1c:	f8cd a000 	str.w	sl, [sp]
 8005a20:	464b      	mov	r3, r9
 8005a22:	aa03      	add	r2, sp, #12
 8005a24:	4621      	mov	r1, r4
 8005a26:	4640      	mov	r0, r8
 8005a28:	f7ff fee4 	bl	80057f4 <_printf_common>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d14a      	bne.n	8005ac6 <_printf_i+0x1f6>
 8005a30:	f04f 30ff 	mov.w	r0, #4294967295
 8005a34:	b004      	add	sp, #16
 8005a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	f043 0320 	orr.w	r3, r3, #32
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	4833      	ldr	r0, [pc, #204]	; (8005b10 <_printf_i+0x240>)
 8005a44:	2778      	movs	r7, #120	; 0x78
 8005a46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	6829      	ldr	r1, [r5, #0]
 8005a4e:	061f      	lsls	r7, r3, #24
 8005a50:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a54:	d402      	bmi.n	8005a5c <_printf_i+0x18c>
 8005a56:	065f      	lsls	r7, r3, #25
 8005a58:	bf48      	it	mi
 8005a5a:	b2b6      	uxthmi	r6, r6
 8005a5c:	07df      	lsls	r7, r3, #31
 8005a5e:	bf48      	it	mi
 8005a60:	f043 0320 	orrmi.w	r3, r3, #32
 8005a64:	6029      	str	r1, [r5, #0]
 8005a66:	bf48      	it	mi
 8005a68:	6023      	strmi	r3, [r4, #0]
 8005a6a:	b91e      	cbnz	r6, 8005a74 <_printf_i+0x1a4>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	f023 0320 	bic.w	r3, r3, #32
 8005a72:	6023      	str	r3, [r4, #0]
 8005a74:	2310      	movs	r3, #16
 8005a76:	e7a7      	b.n	80059c8 <_printf_i+0xf8>
 8005a78:	4824      	ldr	r0, [pc, #144]	; (8005b0c <_printf_i+0x23c>)
 8005a7a:	e7e4      	b.n	8005a46 <_printf_i+0x176>
 8005a7c:	4615      	mov	r5, r2
 8005a7e:	e7bd      	b.n	80059fc <_printf_i+0x12c>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	6826      	ldr	r6, [r4, #0]
 8005a84:	6961      	ldr	r1, [r4, #20]
 8005a86:	1d18      	adds	r0, r3, #4
 8005a88:	6028      	str	r0, [r5, #0]
 8005a8a:	0635      	lsls	r5, r6, #24
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	d501      	bpl.n	8005a94 <_printf_i+0x1c4>
 8005a90:	6019      	str	r1, [r3, #0]
 8005a92:	e002      	b.n	8005a9a <_printf_i+0x1ca>
 8005a94:	0670      	lsls	r0, r6, #25
 8005a96:	d5fb      	bpl.n	8005a90 <_printf_i+0x1c0>
 8005a98:	8019      	strh	r1, [r3, #0]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	6123      	str	r3, [r4, #16]
 8005a9e:	4615      	mov	r5, r2
 8005aa0:	e7bc      	b.n	8005a1c <_printf_i+0x14c>
 8005aa2:	682b      	ldr	r3, [r5, #0]
 8005aa4:	1d1a      	adds	r2, r3, #4
 8005aa6:	602a      	str	r2, [r5, #0]
 8005aa8:	681d      	ldr	r5, [r3, #0]
 8005aaa:	6862      	ldr	r2, [r4, #4]
 8005aac:	2100      	movs	r1, #0
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f7fa fba6 	bl	8000200 <memchr>
 8005ab4:	b108      	cbz	r0, 8005aba <_printf_i+0x1ea>
 8005ab6:	1b40      	subs	r0, r0, r5
 8005ab8:	6060      	str	r0, [r4, #4]
 8005aba:	6863      	ldr	r3, [r4, #4]
 8005abc:	6123      	str	r3, [r4, #16]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac4:	e7aa      	b.n	8005a1c <_printf_i+0x14c>
 8005ac6:	6923      	ldr	r3, [r4, #16]
 8005ac8:	462a      	mov	r2, r5
 8005aca:	4649      	mov	r1, r9
 8005acc:	4640      	mov	r0, r8
 8005ace:	47d0      	blx	sl
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d0ad      	beq.n	8005a30 <_printf_i+0x160>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	079b      	lsls	r3, r3, #30
 8005ad8:	d413      	bmi.n	8005b02 <_printf_i+0x232>
 8005ada:	68e0      	ldr	r0, [r4, #12]
 8005adc:	9b03      	ldr	r3, [sp, #12]
 8005ade:	4298      	cmp	r0, r3
 8005ae0:	bfb8      	it	lt
 8005ae2:	4618      	movlt	r0, r3
 8005ae4:	e7a6      	b.n	8005a34 <_printf_i+0x164>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4632      	mov	r2, r6
 8005aea:	4649      	mov	r1, r9
 8005aec:	4640      	mov	r0, r8
 8005aee:	47d0      	blx	sl
 8005af0:	3001      	adds	r0, #1
 8005af2:	d09d      	beq.n	8005a30 <_printf_i+0x160>
 8005af4:	3501      	adds	r5, #1
 8005af6:	68e3      	ldr	r3, [r4, #12]
 8005af8:	9903      	ldr	r1, [sp, #12]
 8005afa:	1a5b      	subs	r3, r3, r1
 8005afc:	42ab      	cmp	r3, r5
 8005afe:	dcf2      	bgt.n	8005ae6 <_printf_i+0x216>
 8005b00:	e7eb      	b.n	8005ada <_printf_i+0x20a>
 8005b02:	2500      	movs	r5, #0
 8005b04:	f104 0619 	add.w	r6, r4, #25
 8005b08:	e7f5      	b.n	8005af6 <_printf_i+0x226>
 8005b0a:	bf00      	nop
 8005b0c:	08006245 	.word	0x08006245
 8005b10:	08006256 	.word	0x08006256

08005b14 <__sflush_r>:
 8005b14:	898a      	ldrh	r2, [r1, #12]
 8005b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	0710      	lsls	r0, r2, #28
 8005b1e:	460c      	mov	r4, r1
 8005b20:	d458      	bmi.n	8005bd4 <__sflush_r+0xc0>
 8005b22:	684b      	ldr	r3, [r1, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	dc05      	bgt.n	8005b34 <__sflush_r+0x20>
 8005b28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	dc02      	bgt.n	8005b34 <__sflush_r+0x20>
 8005b2e:	2000      	movs	r0, #0
 8005b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b36:	2e00      	cmp	r6, #0
 8005b38:	d0f9      	beq.n	8005b2e <__sflush_r+0x1a>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b40:	682f      	ldr	r7, [r5, #0]
 8005b42:	6a21      	ldr	r1, [r4, #32]
 8005b44:	602b      	str	r3, [r5, #0]
 8005b46:	d032      	beq.n	8005bae <__sflush_r+0x9a>
 8005b48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b4a:	89a3      	ldrh	r3, [r4, #12]
 8005b4c:	075a      	lsls	r2, r3, #29
 8005b4e:	d505      	bpl.n	8005b5c <__sflush_r+0x48>
 8005b50:	6863      	ldr	r3, [r4, #4]
 8005b52:	1ac0      	subs	r0, r0, r3
 8005b54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b56:	b10b      	cbz	r3, 8005b5c <__sflush_r+0x48>
 8005b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b5a:	1ac0      	subs	r0, r0, r3
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4602      	mov	r2, r0
 8005b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b62:	6a21      	ldr	r1, [r4, #32]
 8005b64:	4628      	mov	r0, r5
 8005b66:	47b0      	blx	r6
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	d106      	bne.n	8005b7c <__sflush_r+0x68>
 8005b6e:	6829      	ldr	r1, [r5, #0]
 8005b70:	291d      	cmp	r1, #29
 8005b72:	d82b      	bhi.n	8005bcc <__sflush_r+0xb8>
 8005b74:	4a29      	ldr	r2, [pc, #164]	; (8005c1c <__sflush_r+0x108>)
 8005b76:	410a      	asrs	r2, r1
 8005b78:	07d6      	lsls	r6, r2, #31
 8005b7a:	d427      	bmi.n	8005bcc <__sflush_r+0xb8>
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	6062      	str	r2, [r4, #4]
 8005b80:	04d9      	lsls	r1, r3, #19
 8005b82:	6922      	ldr	r2, [r4, #16]
 8005b84:	6022      	str	r2, [r4, #0]
 8005b86:	d504      	bpl.n	8005b92 <__sflush_r+0x7e>
 8005b88:	1c42      	adds	r2, r0, #1
 8005b8a:	d101      	bne.n	8005b90 <__sflush_r+0x7c>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b903      	cbnz	r3, 8005b92 <__sflush_r+0x7e>
 8005b90:	6560      	str	r0, [r4, #84]	; 0x54
 8005b92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b94:	602f      	str	r7, [r5, #0]
 8005b96:	2900      	cmp	r1, #0
 8005b98:	d0c9      	beq.n	8005b2e <__sflush_r+0x1a>
 8005b9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b9e:	4299      	cmp	r1, r3
 8005ba0:	d002      	beq.n	8005ba8 <__sflush_r+0x94>
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f7ff fc96 	bl	80054d4 <_free_r>
 8005ba8:	2000      	movs	r0, #0
 8005baa:	6360      	str	r0, [r4, #52]	; 0x34
 8005bac:	e7c0      	b.n	8005b30 <__sflush_r+0x1c>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b0      	blx	r6
 8005bb4:	1c41      	adds	r1, r0, #1
 8005bb6:	d1c8      	bne.n	8005b4a <__sflush_r+0x36>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0c5      	beq.n	8005b4a <__sflush_r+0x36>
 8005bbe:	2b1d      	cmp	r3, #29
 8005bc0:	d001      	beq.n	8005bc6 <__sflush_r+0xb2>
 8005bc2:	2b16      	cmp	r3, #22
 8005bc4:	d101      	bne.n	8005bca <__sflush_r+0xb6>
 8005bc6:	602f      	str	r7, [r5, #0]
 8005bc8:	e7b1      	b.n	8005b2e <__sflush_r+0x1a>
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd0:	81a3      	strh	r3, [r4, #12]
 8005bd2:	e7ad      	b.n	8005b30 <__sflush_r+0x1c>
 8005bd4:	690f      	ldr	r7, [r1, #16]
 8005bd6:	2f00      	cmp	r7, #0
 8005bd8:	d0a9      	beq.n	8005b2e <__sflush_r+0x1a>
 8005bda:	0793      	lsls	r3, r2, #30
 8005bdc:	680e      	ldr	r6, [r1, #0]
 8005bde:	bf08      	it	eq
 8005be0:	694b      	ldreq	r3, [r1, #20]
 8005be2:	600f      	str	r7, [r1, #0]
 8005be4:	bf18      	it	ne
 8005be6:	2300      	movne	r3, #0
 8005be8:	eba6 0807 	sub.w	r8, r6, r7
 8005bec:	608b      	str	r3, [r1, #8]
 8005bee:	f1b8 0f00 	cmp.w	r8, #0
 8005bf2:	dd9c      	ble.n	8005b2e <__sflush_r+0x1a>
 8005bf4:	6a21      	ldr	r1, [r4, #32]
 8005bf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bf8:	4643      	mov	r3, r8
 8005bfa:	463a      	mov	r2, r7
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	47b0      	blx	r6
 8005c00:	2800      	cmp	r0, #0
 8005c02:	dc06      	bgt.n	8005c12 <__sflush_r+0xfe>
 8005c04:	89a3      	ldrh	r3, [r4, #12]
 8005c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c0a:	81a3      	strh	r3, [r4, #12]
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	e78e      	b.n	8005b30 <__sflush_r+0x1c>
 8005c12:	4407      	add	r7, r0
 8005c14:	eba8 0800 	sub.w	r8, r8, r0
 8005c18:	e7e9      	b.n	8005bee <__sflush_r+0xda>
 8005c1a:	bf00      	nop
 8005c1c:	dfbffffe 	.word	0xdfbffffe

08005c20 <_fflush_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	690b      	ldr	r3, [r1, #16]
 8005c24:	4605      	mov	r5, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	b913      	cbnz	r3, 8005c30 <_fflush_r+0x10>
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	b118      	cbz	r0, 8005c3a <_fflush_r+0x1a>
 8005c32:	6a03      	ldr	r3, [r0, #32]
 8005c34:	b90b      	cbnz	r3, 8005c3a <_fflush_r+0x1a>
 8005c36:	f7ff fa3d 	bl	80050b4 <__sinit>
 8005c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f3      	beq.n	8005c2a <_fflush_r+0xa>
 8005c42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c44:	07d0      	lsls	r0, r2, #31
 8005c46:	d404      	bmi.n	8005c52 <_fflush_r+0x32>
 8005c48:	0599      	lsls	r1, r3, #22
 8005c4a:	d402      	bmi.n	8005c52 <_fflush_r+0x32>
 8005c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c4e:	f7ff fc3e 	bl	80054ce <__retarget_lock_acquire_recursive>
 8005c52:	4628      	mov	r0, r5
 8005c54:	4621      	mov	r1, r4
 8005c56:	f7ff ff5d 	bl	8005b14 <__sflush_r>
 8005c5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c5c:	07da      	lsls	r2, r3, #31
 8005c5e:	4605      	mov	r5, r0
 8005c60:	d4e4      	bmi.n	8005c2c <_fflush_r+0xc>
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	059b      	lsls	r3, r3, #22
 8005c66:	d4e1      	bmi.n	8005c2c <_fflush_r+0xc>
 8005c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c6a:	f7ff fc31 	bl	80054d0 <__retarget_lock_release_recursive>
 8005c6e:	e7dd      	b.n	8005c2c <_fflush_r+0xc>

08005c70 <__swhatbuf_r>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	460c      	mov	r4, r1
 8005c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	b096      	sub	sp, #88	; 0x58
 8005c7c:	4615      	mov	r5, r2
 8005c7e:	461e      	mov	r6, r3
 8005c80:	da0d      	bge.n	8005c9e <__swhatbuf_r+0x2e>
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c88:	f04f 0100 	mov.w	r1, #0
 8005c8c:	bf0c      	ite	eq
 8005c8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005c92:	2340      	movne	r3, #64	; 0x40
 8005c94:	2000      	movs	r0, #0
 8005c96:	6031      	str	r1, [r6, #0]
 8005c98:	602b      	str	r3, [r5, #0]
 8005c9a:	b016      	add	sp, #88	; 0x58
 8005c9c:	bd70      	pop	{r4, r5, r6, pc}
 8005c9e:	466a      	mov	r2, sp
 8005ca0:	f000 f87c 	bl	8005d9c <_fstat_r>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	dbec      	blt.n	8005c82 <__swhatbuf_r+0x12>
 8005ca8:	9901      	ldr	r1, [sp, #4]
 8005caa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005cae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005cb2:	4259      	negs	r1, r3
 8005cb4:	4159      	adcs	r1, r3
 8005cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cba:	e7eb      	b.n	8005c94 <__swhatbuf_r+0x24>

08005cbc <__smakebuf_r>:
 8005cbc:	898b      	ldrh	r3, [r1, #12]
 8005cbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cc0:	079d      	lsls	r5, r3, #30
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	d507      	bpl.n	8005cd8 <__smakebuf_r+0x1c>
 8005cc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	6123      	str	r3, [r4, #16]
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	6163      	str	r3, [r4, #20]
 8005cd4:	b002      	add	sp, #8
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	ab01      	add	r3, sp, #4
 8005cda:	466a      	mov	r2, sp
 8005cdc:	f7ff ffc8 	bl	8005c70 <__swhatbuf_r>
 8005ce0:	9900      	ldr	r1, [sp, #0]
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	f7ff f8cd 	bl	8004e84 <_malloc_r>
 8005cea:	b948      	cbnz	r0, 8005d00 <__smakebuf_r+0x44>
 8005cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf0:	059a      	lsls	r2, r3, #22
 8005cf2:	d4ef      	bmi.n	8005cd4 <__smakebuf_r+0x18>
 8005cf4:	f023 0303 	bic.w	r3, r3, #3
 8005cf8:	f043 0302 	orr.w	r3, r3, #2
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	e7e3      	b.n	8005cc8 <__smakebuf_r+0xc>
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	6020      	str	r0, [r4, #0]
 8005d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d08:	81a3      	strh	r3, [r4, #12]
 8005d0a:	9b00      	ldr	r3, [sp, #0]
 8005d0c:	6163      	str	r3, [r4, #20]
 8005d0e:	9b01      	ldr	r3, [sp, #4]
 8005d10:	6120      	str	r0, [r4, #16]
 8005d12:	b15b      	cbz	r3, 8005d2c <__smakebuf_r+0x70>
 8005d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 f851 	bl	8005dc0 <_isatty_r>
 8005d1e:	b128      	cbz	r0, 8005d2c <__smakebuf_r+0x70>
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	f023 0303 	bic.w	r3, r3, #3
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	81a3      	strh	r3, [r4, #12]
 8005d2c:	89a3      	ldrh	r3, [r4, #12]
 8005d2e:	431d      	orrs	r5, r3
 8005d30:	81a5      	strh	r5, [r4, #12]
 8005d32:	e7cf      	b.n	8005cd4 <__smakebuf_r+0x18>

08005d34 <_putc_r>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	460d      	mov	r5, r1
 8005d38:	4614      	mov	r4, r2
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	b118      	cbz	r0, 8005d46 <_putc_r+0x12>
 8005d3e:	6a03      	ldr	r3, [r0, #32]
 8005d40:	b90b      	cbnz	r3, 8005d46 <_putc_r+0x12>
 8005d42:	f7ff f9b7 	bl	80050b4 <__sinit>
 8005d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d48:	07d8      	lsls	r0, r3, #31
 8005d4a:	d405      	bmi.n	8005d58 <_putc_r+0x24>
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	0599      	lsls	r1, r3, #22
 8005d50:	d402      	bmi.n	8005d58 <_putc_r+0x24>
 8005d52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d54:	f7ff fbbb 	bl	80054ce <__retarget_lock_acquire_recursive>
 8005d58:	68a3      	ldr	r3, [r4, #8]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	60a3      	str	r3, [r4, #8]
 8005d60:	da05      	bge.n	8005d6e <_putc_r+0x3a>
 8005d62:	69a2      	ldr	r2, [r4, #24]
 8005d64:	4293      	cmp	r3, r2
 8005d66:	db12      	blt.n	8005d8e <_putc_r+0x5a>
 8005d68:	b2eb      	uxtb	r3, r5
 8005d6a:	2b0a      	cmp	r3, #10
 8005d6c:	d00f      	beq.n	8005d8e <_putc_r+0x5a>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	6022      	str	r2, [r4, #0]
 8005d74:	701d      	strb	r5, [r3, #0]
 8005d76:	b2ed      	uxtb	r5, r5
 8005d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d7a:	07da      	lsls	r2, r3, #31
 8005d7c:	d405      	bmi.n	8005d8a <_putc_r+0x56>
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	059b      	lsls	r3, r3, #22
 8005d82:	d402      	bmi.n	8005d8a <_putc_r+0x56>
 8005d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d86:	f7ff fba3 	bl	80054d0 <__retarget_lock_release_recursive>
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4622      	mov	r2, r4
 8005d92:	4630      	mov	r0, r6
 8005d94:	f7ff fa7d 	bl	8005292 <__swbuf_r>
 8005d98:	4605      	mov	r5, r0
 8005d9a:	e7ed      	b.n	8005d78 <_putc_r+0x44>

08005d9c <_fstat_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4d07      	ldr	r5, [pc, #28]	; (8005dbc <_fstat_r+0x20>)
 8005da0:	2300      	movs	r3, #0
 8005da2:	4604      	mov	r4, r0
 8005da4:	4608      	mov	r0, r1
 8005da6:	4611      	mov	r1, r2
 8005da8:	602b      	str	r3, [r5, #0]
 8005daa:	f7fb fd78 	bl	800189e <_fstat>
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	d102      	bne.n	8005db8 <_fstat_r+0x1c>
 8005db2:	682b      	ldr	r3, [r5, #0]
 8005db4:	b103      	cbz	r3, 8005db8 <_fstat_r+0x1c>
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	bd38      	pop	{r3, r4, r5, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000328 	.word	0x20000328

08005dc0 <_isatty_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4d06      	ldr	r5, [pc, #24]	; (8005ddc <_isatty_r+0x1c>)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	4608      	mov	r0, r1
 8005dca:	602b      	str	r3, [r5, #0]
 8005dcc:	f7fb fd77 	bl	80018be <_isatty>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_isatty_r+0x1a>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_isatty_r+0x1a>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	20000328 	.word	0x20000328

08005de0 <_init>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	bf00      	nop
 8005de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de6:	bc08      	pop	{r3}
 8005de8:	469e      	mov	lr, r3
 8005dea:	4770      	bx	lr

08005dec <_fini>:
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dee:	bf00      	nop
 8005df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df2:	bc08      	pop	{r3}
 8005df4:	469e      	mov	lr, r3
 8005df6:	4770      	bx	lr
